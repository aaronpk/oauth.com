<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/6.0.3" created="2024-06-25 17:05" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>OAuth 2.0 Simplified</title>
	<link>https://www.oauth.com</link>
	<description></description>
	<pubDate>Tue, 25 Jun 2024 17:05:27 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://www.oauth.com</wp:base_site_url>
	<wp:base_blog_url>https://www.oauth.com</wp:base_blog_url>

		<wp:author><wp:author_id>4</wp:author_id><wp:author_login><![CDATA[aaron@parecki.com]]></wp:author_login><wp:author_email><![CDATA[aaron@parecki.com]]></wp:author_email><wp:author_display_name><![CDATA[Aaron Parecki]]></wp:author_display_name><wp:author_first_name><![CDATA[Aaron]]></wp:author_first_name><wp:author_last_name><![CDATA[Parecki]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[flickerbox]]></wp:author_login><wp:author_email><![CDATA[team-okta@flickerbox.com]]></wp:author_email><wp:author_display_name><![CDATA[flickerbox]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>10</wp:author_id><wp:author_login><![CDATA[aaron.parecki]]></wp:author_login><wp:author_email><![CDATA[aaron.parecki@okta.com]]></wp:author_email><wp:author_display_name><![CDATA[Aaron Parecki]]></wp:author_display_name><wp:author_first_name><![CDATA[Aaron]]></wp:author_first_name><wp:author_last_name><![CDATA[Parecki]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
				<wp:term>
		<wp:term_id>2</wp:term_id>
		<wp:term_taxonomy><![CDATA[portfolio-category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
		
	<generator>https://wordpress.org/?v=6.0.3</generator>

		<item>
		<title><![CDATA[Page Settings (Content)]]></title>
		<link>https://www.oauth.com/?post_type=acf-field-group&#038;p=51</link>
		<pubDate>Wed, 10 Aug 2016 00:12:23 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?post_type=acf-field-group&#038;p=51</guid>
		<description></description>
		<content:encoded><![CDATA[a:9:{s:8:"location";a:1:{i:0;a:2:{i:0;a:3:{s:5:"param";s:9:"post_type";s:8:"operator";s:2:"==";s:5:"value";s:4:"page";}i:1;a:3:{s:5:"param";s:13:"page_template";s:8:"operator";s:2:"!=";s:5:"value";s:21:"template-redirect.php";}}}s:8:"position";s:15:"acf_after_title";s:5:"style";s:8:"seamless";s:15:"label_placement";s:3:"top";s:21:"instruction_placement";s:5:"label";s:14:"hide_on_screen";s:0:"";s:11:"description";s:0:"";s:8:"modified";i:1471279286;s:5:"local";s:4:"json";}]]></content:encoded>
		<excerpt:encoded><![CDATA[page-settings-content]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 00:12:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 00:12:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-15 13:30:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-15 20:30:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[group_57aa70e75800e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[acf-field-group]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Page Number]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=52</link>
		<pubDate>Wed, 10 Aug 2016 00:12:23 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?post_type=acf-field&#038;p=52</guid>
		<description></description>
		<content:encoded><![CDATA[a:12:{s:4:"type";s:4:"text";s:12:"instructions";s:38:"Ex) Chapter = 2, Chapter.Section = 2.4";s:8:"required";i:0;s:17:"conditional_logic";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"25";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:0:"";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:8:"readonly";i:0;s:8:"disabled";i:0;}]]></content:encoded>
		<excerpt:encoded><![CDATA[page_number]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 00:12:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 00:12:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-15 13:30:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-15 20:30:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57aa71138b388]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>51</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Page Title]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=70</link>
		<pubDate>Wed, 10 Aug 2016 18:10:14 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?post_type=acf-field&#038;p=70</guid>
		<description></description>
		<content:encoded><![CDATA[a:12:{s:4:"type";s:4:"text";s:12:"instructions";s:50:"Title of the page, output within the page content.";s:8:"required";i:1;s:17:"conditional_logic";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"75";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:0:"";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:8:"readonly";i:0;s:8:"disabled";i:0;}]]></content:encoded>
		<excerpt:encoded><![CDATA[page_title]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 18:10:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 18:10:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-15 13:30:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-15 20:30:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab6dee5a734]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>51</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Valprop]]></title>
		<link>https://www.oauth.com/?post_type=acf-field-group&#038;p=81</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field-group&#038;p=81</guid>
		<description></description>
		<content:encoded><![CDATA[a:9:{s:8:"location";a:1:{i:0;a:2:{i:0;a:3:{s:5:"param";s:9:"post_type";s:8:"operator";s:2:"==";s:5:"value";s:4:"page";}i:1;a:3:{s:5:"param";s:13:"page_template";s:8:"operator";s:2:"!=";s:5:"value";s:21:"template-redirect.php";}}}s:8:"position";s:15:"acf_after_title";s:5:"style";s:7:"default";s:15:"label_placement";s:3:"top";s:21:"instruction_placement";s:5:"label";s:14:"hide_on_screen";s:0:"";s:11:"description";s:0:"";s:8:"modified";i:1472143025;s:5:"local";s:4:"json";}]]></content:encoded>
		<excerpt:encoded><![CDATA[valprop]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[group_57ab98d6cb927]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[acf-field-group]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Enable Valprop]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=82</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=82</guid>
		<description></description>
		<content:encoded><![CDATA[a:7:{s:4:"type";s:10:"true_false";s:12:"instructions";s:0:"";s:8:"required";i:0;s:17:"conditional_logic";i:0;s:7:"wrapper";a:3:{s:5:"width";s:0:"";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:7:"message";s:0:"";s:13:"default_value";i:0;}]]></content:encoded>
		<excerpt:encoded><![CDATA[enable_valprop]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab9bc167970]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Valprop Copy]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=84</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=84</guid>
		<description></description>
		<content:encoded><![CDATA[a:9:{s:4:"type";s:7:"wysiwyg";s:12:"instructions";s:0:"";s:8:"required";i:1;s:7:"wrapper";a:3:{s:5:"width";s:0:"";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:4:"tabs";s:3:"all";s:7:"toolbar";s:4:"full";s:12:"media_upload";i:0;s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[copy]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab9c9b4c4d5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Left CTA Link]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=85</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=85</guid>
		<description></description>
		<content:encoded><![CDATA[a:10:{s:4:"type";s:4:"text";s:12:"instructions";s:0:"";s:8:"required";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:22:"http://www.example.com";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[left_cta_link]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab98fc2218b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Left CTA Text]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=86</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=86</guid>
		<description></description>
		<content:encoded><![CDATA[a:12:{s:4:"type";s:4:"text";s:12:"instructions";s:0:"";s:8:"required";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:10:"Click Here";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:8:"readonly";i:0;s:8:"disabled";i:0;s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[left_cta_text]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab99aa2218c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Right CTA Link]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=87</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=87</guid>
		<description></description>
		<content:encoded><![CDATA[a:10:{s:4:"type";s:4:"text";s:12:"instructions";s:0:"";s:8:"required";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:22:"http://www.example.com";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[right_cta_link]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab9c4880b41]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Right CTA Text]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=88</link>
		<pubDate>Wed, 10 Aug 2016 22:50:51 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=88</guid>
		<description></description>
		<content:encoded><![CDATA[a:12:{s:4:"type";s:4:"text";s:12:"instructions";s:0:"";s:8:"required";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:10:"Click Here";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:8:"readonly";i:0;s:8:"disabled";i:0;s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[right_cta_text]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57ab9c5980b42]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[abstract-background-20]]></title>
		<link>https://www.oauth.com/oauth2-servers/abstract-background-20/</link>
		<pubDate>Wed, 10 Aug 2016 22:54:09 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/wp-content/uploads/2016/08/abstract-background-20.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2016-08-10 22:54:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 22:54:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-10 22:54:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-10 22:54:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[abstract-background-20]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/abstract-background-20.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/abstract-background-20.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:1080;s:4:"file";s:35:"2016/08/abstract-background-20.jpeg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"abstract-background-20-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"abstract-background-20-300x169.jpeg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:35:"abstract-background-20-768x432.jpeg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"abstract-background-20-1024x576.jpeg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Page Settings (Redirect)]]></title>
		<link>https://www.oauth.com/?post_type=acf-field-group&#038;p=99</link>
		<pubDate>Mon, 15 Aug 2016 20:30:21 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field-group&#038;p=99</guid>
		<description></description>
		<content:encoded><![CDATA[a:9:{s:8:"location";a:1:{i:0;a:2:{i:0;a:3:{s:5:"param";s:9:"post_type";s:8:"operator";s:2:"==";s:5:"value";s:4:"page";}i:1;a:3:{s:5:"param";s:13:"page_template";s:8:"operator";s:2:"==";s:5:"value";s:21:"template-redirect.php";}}}s:8:"position";s:15:"acf_after_title";s:5:"style";s:8:"seamless";s:15:"label_placement";s:3:"top";s:21:"instruction_placement";s:5:"label";s:14:"hide_on_screen";s:0:"";s:11:"description";s:0:"";s:8:"modified";i:1471279312;s:5:"local";s:4:"json";}]]></content:encoded>
		<excerpt:encoded><![CDATA[page-settings-redirect]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2016-08-15 13:30:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-15 20:30:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 14:13:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 21:13:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[group_57b1f01ea6603]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[acf-field-group]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Page Number]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=100</link>
		<pubDate>Mon, 15 Aug 2016 20:30:22 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=100</guid>
		<description></description>
		<content:encoded><![CDATA[a:12:{s:4:"type";s:4:"text";s:12:"instructions";s:38:"Ex) Chapter = 2, Chapter.Section = 2.4";s:8:"required";i:0;s:17:"conditional_logic";i:0;s:7:"wrapper";a:3:{s:5:"width";s:2:"25";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:13:"default_value";s:0:"";s:11:"placeholder";s:0:"";s:7:"prepend";s:0:"";s:6:"append";s:0:"";s:9:"maxlength";s:0:"";s:8:"readonly";i:0;s:8:"disabled";i:0;}]]></content:encoded>
		<excerpt:encoded><![CDATA[page_number]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2016-08-15 13:30:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-15 20:30:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-15 13:30:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-15 20:30:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57b1f03d9957e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>99</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Left CTA Link Behavior]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=238</link>
		<pubDate>Wed, 17 Aug 2016 21:13:39 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=238</guid>
		<description></description>
		<content:encoded><![CDATA[a:13:{s:4:"type";s:6:"select";s:12:"instructions";s:0:"";s:8:"required";i:1;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:7:"choices";a:2:{s:5:"_self";s:19:"Open in Same Window";s:6:"_blank";s:18:"Open in New Window";}s:13:"default_value";a:1:{i:0;s:5:"_self";}s:10:"allow_null";i:0;s:8:"multiple";i:0;s:2:"ui";i:0;s:4:"ajax";i:0;s:13:"return_format";s:5:"value";s:11:"placeholder";s:0:"";s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[left_cta_target]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 14:13:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 21:13:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57b4c4fe65143]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[Right CTA Link Behavior]]></title>
		<link>https://www.oauth.com/?post_type=acf-field&#038;p=239</link>
		<pubDate>Wed, 17 Aug 2016 21:13:39 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?post_type=acf-field&#038;p=239</guid>
		<description></description>
		<content:encoded><![CDATA[a:13:{s:4:"type";s:6:"select";s:12:"instructions";s:0:"";s:8:"required";i:1;s:7:"wrapper";a:3:{s:5:"width";s:2:"50";s:5:"class";s:0:"";s:2:"id";s:0:"";}s:7:"choices";a:2:{s:5:"_self";s:19:"Open in Same Window";s:6:"_blank";s:18:"Open in New Window";}s:13:"default_value";a:1:{i:0;s:5:"_self";}s:10:"allow_null";i:0;s:8:"multiple";i:0;s:2:"ui";i:0;s:4:"ajax";i:0;s:13:"return_format";s:5:"value";s:11:"placeholder";s:0:"";s:17:"conditional_logic";a:1:{i:0;a:1:{i:0;a:3:{s:5:"field";s:19:"field_57ab9bc167970";s:8:"operator";s:2:"==";s:5:"value";s:1:"1";}}}}]]></content:encoded>
		<excerpt:encoded><![CDATA[right_cta_target]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 14:13:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 21:13:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-25 09:40:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-25 16:40:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[field_57b4c55865144]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>81</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[acf-field]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[benwerd-twitter-checkboxes]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/benwerd-twitter-checkboxes/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:25 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/benwerd-twitter-checkboxes.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[benwerd-twitter-checkboxes]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/benwerd-twitter-checkboxes.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/benwerd-twitter-checkboxes.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:781;s:6:"height";i:447;s:4:"file";s:38:"2016/08/benwerd-twitter-checkboxes.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"benwerd-twitter-checkboxes-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"benwerd-twitter-checkboxes-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"benwerd-twitter-checkboxes-768x440.png";s:5:"width";i:768;s:6:"height";i:440;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[dropbox]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/dropbox/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:26 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/dropbox.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dropbox]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/dropbox.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/dropbox.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:819;s:6:"height";i:459;s:4:"file";s:19:"2016/08/dropbox.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"dropbox-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"dropbox-300x168.png";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"dropbox-768x430.png";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[facebook-edit-scope]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/facebook-edit-scope/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/facebook-edit-scope.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[facebook-edit-scope]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/facebook-edit-scope.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/facebook-edit-scope.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1026;s:6:"height";i:547;s:4:"file";s:31:"2016/08/facebook-edit-scope.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"facebook-edit-scope-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"facebook-edit-scope-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"facebook-edit-scope-768x409.png";s:5:"width";i:768;s:6:"height";i:409;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:32:"facebook-edit-scope-1024x546.png";s:5:"width";i:1024;s:6:"height";i:546;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[facebook]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/facebook/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/facebook.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[facebook]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/facebook.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/facebook.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1020;s:6:"height";i:547;s:4:"file";s:20:"2016/08/facebook.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"facebook-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"facebook-300x161.png";s:5:"width";i:300;s:6:"height";i:161;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"facebook-768x412.png";s:5:"width";i:768;s:6:"height";i:412;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[flickr]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/flickr/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:33 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/flickr.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flickr]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/flickr.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/flickr.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:776;s:6:"height";i:533;s:4:"file";s:18:"2016/08/flickr.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"flickr-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"flickr-300x206.png";s:5:"width";i:300;s:6:"height";i:206;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"flickr-768x528.png";s:5:"width";i:768;s:6:"height";i:528;s:9:"mime-type";s:9:"image/png";}s:16:"resized-1160x665";a:5:{s:4:"file";s:19:"flickr-1160x665.png";s:5:"width";i:1160;s:6:"height";i:665;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:294548;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:16:"resized-1160x665";a:5:{s:4:"file";s:19:"flickr-1160x665.png";s:5:"width";i:1160;s:6:"height";i:665;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:294548;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/github/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:35 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:803;s:6:"height";i:508;s:4:"file";s:18:"2016/08/github.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"github-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"github-300x190.png";s:5:"width";i:300;s:6:"height";i:190;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"github-768x486.png";s:5:"width";i:768;s:6:"height";i:486;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google-scope-popup]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/google-scope-popup/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:36 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/google-scope-popup.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-scope-popup]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/google-scope-popup.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/google-scope-popup.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:850;s:6:"height";i:605;s:4:"file";s:30:"2016/08/google-scope-popup.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"google-scope-popup-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"google-scope-popup-300x214.png";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"google-scope-popup-768x547.png";s:5:"width";i:768;s:6:"height";i:547;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/google/</link>
		<pubDate>Wed, 17 Aug 2016 22:11:37 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/google.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 15:11:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 22:11:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 15:11:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-17 22:11:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>179</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/google.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/google.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:851;s:6:"height";i:606;s:4:"file";s:18:"2016/08/google.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"google-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"google-300x214.png";s:5:"width";i:300;s:6:"height";i:214;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"google-768x547.png";s:5:"width";i:768;s:6:"height";i:547;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[arcgis-oauth-app]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/arcgis-oauth-app/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:50 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/arcgis-oauth-app.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arcgis-oauth-app]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/arcgis-oauth-app.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/arcgis-oauth-app.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:374;s:6:"height";i:667;s:4:"file";s:28:"2016/08/arcgis-oauth-app.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"arcgis-oauth-app-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"arcgis-oauth-app-168x300.png";s:5:"width";i:168;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[auth_request]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/auth_request/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:52 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/auth_request.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[auth_request]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/auth_request.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/auth_request.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:751;s:6:"height";i:427;s:4:"file";s:24:"2016/08/auth_request.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"auth_request-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:24:"auth_request-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_application_created]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/github_application_created/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:52 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_application_created.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_application_created]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_application_created.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_application_created.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:744;s:6:"height";i:750;s:4:"file";s:38:"2016/08/github_application_created.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"github_application_created-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"github_application_created-298x300.png";s:5:"width";i:298;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_create_new_application]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/github_create_new_application/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:53 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_create_new_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_create_new_application]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_create_new_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_create_new_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:753;s:6:"height";i:535;s:4:"file";s:41:"2016/08/github_create_new_application.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:41:"github_create_new_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:41:"github_create_new_application-300x213.png";s:5:"width";i:300;s:6:"height";i:213;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_oauth_prompt]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/github_oauth_prompt/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:54 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_oauth_prompt.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_oauth_prompt]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_oauth_prompt.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_oauth_prompt.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:810;s:6:"height";i:612;s:4:"file";s:31:"2016/08/github_oauth_prompt.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"github_oauth_prompt-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"github_oauth_prompt-300x227.png";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"github_oauth_prompt-768x580.png";s:5:"width";i:768;s:6:"height";i:580;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[sfsafariviewcontroller]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/sfsafariviewcontroller/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:56 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/sfsafariviewcontroller.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sfsafariviewcontroller]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/sfsafariviewcontroller.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/sfsafariviewcontroller.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:750;s:6:"height";i:1334;s:4:"file";s:34:"2016/08/sfsafariviewcontroller.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"sfsafariviewcontroller-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"sfsafariviewcontroller-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:35:"sfsafariviewcontroller-576x1024.png";s:5:"width";i:576;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_browser_client_server]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/user_browser_client_server/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:57 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/user_browser_client_server.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_browser_client_server]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/user_browser_client_server.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/user_browser_client_server.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:902;s:6:"height";i:230;s:4:"file";s:38:"2016/08/user_browser_client_server.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"user_browser_client_server-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"user_browser_client_server-300x76.png";s:5:"width";i:300;s:6:"height";i:76;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"user_browser_client_server-768x196.png";s:5:"width";i:768;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_browser_server]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/user_browser_server/</link>
		<pubDate>Thu, 18 Aug 2016 00:36:58 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/user_browser_server.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 17:36:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 00:36:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 17:36:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 00:36:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_browser_server]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/user_browser_server.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/user_browser_server.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:661;s:6:"height";i:475;s:4:"file";s:31:"2016/08/user_browser_server.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"user_browser_server-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"user_browser_server-300x216.png";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[foursquare_create_new_application]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/registering-new-application/foursquare_create_new_application/</link>
		<pubDate>Thu, 18 Aug 2016 02:37:13 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/foursquare_create_new_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:37:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:37:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:37:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:37:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[foursquare_create_new_application]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>142</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/foursquare_create_new_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/foursquare_create_new_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:991;s:6:"height";i:731;s:4:"file";s:45:"2016/08/foursquare_create_new_application.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"foursquare_create_new_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:45:"foursquare_create_new_application-300x221.png";s:5:"width";i:300;s:6:"height";i:221;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:45:"foursquare_create_new_application-768x567.png";s:5:"width";i:768;s:6:"height";i:567;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[instagram_create_new_application]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/registering-new-application/instagram_create_new_application/</link>
		<pubDate>Thu, 18 Aug 2016 02:37:22 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/instagram_create_new_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:37:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:37:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:37:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:37:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[instagram_create_new_application]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>142</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/instagram_create_new_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/instagram_create_new_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:775;s:6:"height";i:685;s:4:"file";s:44:"2016/08/instagram_create_new_application.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"instagram_create_new_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"instagram_create_new_application-300x265.png";s:5:"width";i:300;s:6:"height";i:265;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:44:"instagram_create_new_application-768x679.png";s:5:"width";i:768;s:6:"height";i:679;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_confirm_password]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/registering-new-application/github_confirm_password/</link>
		<pubDate>Thu, 18 Aug 2016 02:37:43 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_confirm_password.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:37:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:37:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:37:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:37:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_confirm_password]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>142</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_confirm_password.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_confirm_password.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:634;s:6:"height";i:423;s:4:"file";s:35:"2016/08/github_confirm_password.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"github_confirm_password-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"github_confirm_password-300x200.png";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[dropbox_show_secret]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/registering-new-application/dropbox_show_secret/</link>
		<pubDate>Thu, 18 Aug 2016 02:38:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/dropbox_show_secret.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:38:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:38:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:38:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:38:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dropbox_show_secret]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>142</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/dropbox_show_secret.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/dropbox_show_secret.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:432;s:6:"height";i:128;s:4:"file";s:31:"2016/08/dropbox_show_secret.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"dropbox_show_secret-150x128.png";s:5:"width";i:150;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"dropbox_show_secret-300x89.png";s:5:"width";i:300;s:6:"height";i:89;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[oauth_authorization_screen]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/oauth_authorization_screen/</link>
		<pubDate>Thu, 18 Aug 2016 02:43:39 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/oauth_authorization_screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:43:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:43:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:43:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:43:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oauth_authorization_screen]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/oauth_authorization_screen.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/oauth_authorization_screen.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1141;s:6:"height";i:674;s:4:"file";s:38:"2016/08/oauth_authorization_screen.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"oauth_authorization_screen-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"oauth_authorization_screen-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"oauth_authorization_screen-768x454.png";s:5:"width";i:768;s:6:"height";i:454;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:39:"oauth_authorization_screen-1024x605.png";s:5:"width";i:1024;s:6:"height";i:605;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[twitter_logged_out_auth_screen]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/twitter_logged_out_auth_screen/</link>
		<pubDate>Thu, 18 Aug 2016 02:43:40 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/twitter_logged_out_auth_screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:43:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:43:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:43:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:43:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter_logged_out_auth_screen]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/twitter_logged_out_auth_screen.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/twitter_logged_out_auth_screen.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:573;s:4:"file";s:42:"2016/08/twitter_logged_out_auth_screen.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"twitter_logged_out_auth_screen-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"twitter_logged_out_auth_screen-300x246.png";s:5:"width";i:300;s:6:"height";i:246;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_auth_external_authentication]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/user_auth_external_authentication/</link>
		<pubDate>Thu, 18 Aug 2016 02:43:41 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/user_auth_external_authentication.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:43:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:43:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:43:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:43:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_auth_external_authentication]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/user_auth_external_authentication.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/user_auth_external_authentication.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:860;s:6:"height";i:246;s:4:"file";s:45:"2016/08/user_auth_external_authentication.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"user_auth_external_authentication-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"user_auth_external_authentication-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:45:"user_auth_external_authentication-768x220.png";s:5:"width";i:768;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_auth_login_flow]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/user_auth_login_flow/</link>
		<pubDate>Thu, 18 Aug 2016 02:43:42 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/user_auth_login_flow.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 19:43:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 02:43:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-17 19:43:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 02:43:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_auth_login_flow]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/user_auth_login_flow.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/user_auth_login_flow.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:949;s:6:"height";i:350;s:4:"file";s:32:"2016/08/user_auth_login_flow.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"user_auth_login_flow-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"user_auth_login_flow-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"user_auth_login_flow-768x283.png";s:5:"width";i:768;s:6:"height";i:283;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github-authorization-details]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/github-authorization-details/</link>
		<pubDate>Thu, 18 Aug 2016 20:49:26 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github-authorization-details.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date><![CDATA[2016-08-18 13:49:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 20:49:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-18 13:49:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 20:49:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github-authorization-details]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github-authorization-details.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github-authorization-details.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:454;s:4:"file";s:40:"2016/08/github-authorization-details.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"github-authorization-details-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"github-authorization-details-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github-authorization-list]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/github-authorization-list/</link>
		<pubDate>Thu, 18 Aug 2016 20:49:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github-authorization-list.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date><![CDATA[2016-08-18 13:49:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 20:49:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-18 13:49:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 20:49:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github-authorization-list]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github-authorization-list.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github-authorization-list.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:751;s:6:"height";i:310;s:4:"file";s:37:"2016/08/github-authorization-list.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"github-authorization-list-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"github-authorization-list-300x124.png";s:5:"width";i:300;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google-authorization-details]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/google-authorization-details/</link>
		<pubDate>Thu, 18 Aug 2016 20:49:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/google-authorization-details.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2016-08-18 13:49:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 20:49:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-18 13:49:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 20:49:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-authorization-details]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/google-authorization-details.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/google-authorization-details.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:688;s:6:"height";i:667;s:4:"file";s:40:"2016/08/google-authorization-details.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"google-authorization-details-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"google-authorization-details-300x291.png";s:5:"width";i:300;s:6:"height";i:291;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google-authorization-list]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/google-authorization-list/</link>
		<pubDate>Thu, 18 Aug 2016 20:49:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/google-authorization-list.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2016-08-18 13:49:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 20:49:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-18 13:49:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 20:49:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-authorization-list]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/google-authorization-list.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/google-authorization-list.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:814;s:6:"height";i:666;s:4:"file";s:37:"2016/08/google-authorization-list.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"google-authorization-list-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"google-authorization-list-300x245.png";s:5:"width";i:300;s:6:"height";i:245;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:37:"google-authorization-list-768x628.png";s:5:"width";i:768;s:6:"height";i:628;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[twitter-authorization-list]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/twitter-authorization-list/</link>
		<pubDate>Thu, 18 Aug 2016 20:49:30 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/twitter-authorization-list.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2016-08-18 13:49:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-18 20:49:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-18 13:49:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-18 20:49:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-authorization-list]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/twitter-authorization-list.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/twitter-authorization-list.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:601;s:6:"height";i:343;s:4:"file";s:38:"2016/08/twitter-authorization-list.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"twitter-authorization-list-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"twitter-authorization-list-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_delete_application]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/deleting-applications-revoking-secrets/github_delete_application/</link>
		<pubDate>Fri, 19 Aug 2016 23:54:07 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_delete_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2016-08-19 16:54:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-19 23:54:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-19 16:54:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-19 23:54:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_delete_application]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>146</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_delete_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_delete_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:469;s:6:"height";i:230;s:4:"file";s:37:"2016/08/github_delete_application.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"github_delete_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"github_delete_application-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_reset_client_secret]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/deleting-applications-revoking-secrets/github_reset_client_secret/</link>
		<pubDate>Fri, 19 Aug 2016 23:54:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/github_reset_client_secret.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date><![CDATA[2016-08-19 16:54:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-19 23:54:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-19 16:54:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-19 23:54:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_reset_client_secret]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>146</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/github_reset_client_secret.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/github_reset_client_secret.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:474;s:6:"height";i:272;s:4:"file";s:38:"2016/08/github_reset_client_secret.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"github_reset_client_secret-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"github_reset_client_secret-300x172.png";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google-apis]]></title>
		<link>https://www.oauth.com/oauth2-servers/the-resource-server/google-apis/</link>
		<pubDate>Sat, 20 Aug 2016 16:18:09 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/google-apis.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date><![CDATA[2016-08-20 09:18:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-20 16:18:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-08-20 09:18:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-08-20 16:18:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-apis]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>216</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/google-apis.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/google-apis.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:897;s:6:"height";i:479;s:4:"file";s:23:"2016/08/google-apis.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"google-apis-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"google-apis-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"google-apis-768x410.png";s:5:"width";i:768;s:6:"height";i:410;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-02]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/okta_oauth-diagrams_20170622-02/</link>
		<pubDate>Mon, 03 Jul 2017 18:11:48 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-02.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:11:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:11:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:11:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:11:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-02]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-02.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-02.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:902;s:6:"height";i:231;s:4:"file";s:43:"2016/08/okta_oauth-diagrams_20170622-02.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-02-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"okta_oauth-diagrams_20170622-02-300x77.png";s:5:"width";i:300;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-02-768x197.png";s:5:"width";i:768;s:6:"height";i:197;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-01]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/okta_oauth-diagrams_20170622-01/</link>
		<pubDate>Mon, 03 Jul 2017 18:14:35 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:14:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:14:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:14:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:14:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01-e1499105694563.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-01-e1499105694563.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:285;s:4:"file";s:58:"2016/08/okta_oauth-diagrams_20170622-01-e1499105694563.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-01-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-01-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";i:752;s:6:"height";i:428;s:4:"file";s:35:"okta_oauth-diagrams_20170622-01.png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-01]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/okta_oauth-diagrams_20170622-01-2/</link>
		<pubDate>Mon, 03 Jul 2017 18:17:58 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:17:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:17:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:17:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:17:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-01-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-01-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:428;s:4:"file";s:45:"2016/08/okta_oauth-diagrams_20170622-01-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"okta_oauth-diagrams_20170622-01-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:45:"okta_oauth-diagrams_20170622-01-1-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-03]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/okta_oauth-diagrams_20170622-03/</link>
		<pubDate>Mon, 03 Jul 2017 18:20:15 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-03.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>512</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:20:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:20:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:20:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:20:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-03]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-03.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-03.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:662;s:6:"height";i:475;s:4:"file";s:43:"2016/08/okta_oauth-diagrams_20170622-03.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-03-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-03-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-04]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/okta_oauth-diagrams_20170622-04/</link>
		<pubDate>Mon, 03 Jul 2017 18:22:48 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-04.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:22:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:22:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:22:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:22:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-04]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-04.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-04.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:950;s:6:"height";i:351;s:4:"file";s:43:"2016/08/okta_oauth-diagrams_20170622-04.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-04-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-04-300x111.png";s:5:"width";i:300;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-04-768x284.png";s:5:"width";i:768;s:6:"height";i:284;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[okta_oauth-diagrams_20170622-05]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/okta_oauth-diagrams_20170622-05/</link>
		<pubDate>Mon, 03 Jul 2017 18:24:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-05.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 11:24:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:24:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 11:24:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 18:24:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_oauth-diagrams_20170622-05]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>164</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-05.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2016/08/okta_oauth-diagrams_20170622-05.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:861;s:6:"height";i:247;s:4:"file";s:43:"2016/08/okta_oauth-diagrams_20170622-05.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-05-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"okta_oauth-diagrams_20170622-05-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:43:"okta_oauth-diagrams_20170622-05-768x220.png";s:5:"width";i:768;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[sfsafariviewcontroller-example]]></title>
		<link>https://www.oauth.com/sfsafariviewcontroller-example/</link>
		<pubDate>Wed, 09 Aug 2017 01:26:23 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/sfsafariviewcontroller-example.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date><![CDATA[2017-08-08 18:26:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-09 01:26:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-08 18:26:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-09 01:26:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sfsafariviewcontroller-example]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/sfsafariviewcontroller-example.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/sfsafariviewcontroller-example.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:750;s:6:"height";i:1334;s:4:"file";s:42:"2017/08/sfsafariviewcontroller-example.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:42:"sfsafariviewcontroller-example-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:42:"sfsafariviewcontroller-example-169x300.png";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:43:"sfsafariviewcontroller-example-576x1024.png";s:5:"width";i:576;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Device Code Display]]></title>
		<link>https://www.oauth.com/device-code-display/</link>
		<pubDate>Thu, 10 Aug 2017 17:18:41 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/device-code-display.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[The device displays the device code and URL]]></excerpt:encoded>
		<wp:post_id>644</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:18:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:18:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-10 10:21:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-10 17:21:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[device-code-display]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/device-code-display.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/device-code-display.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2051;s:6:"height";i:550;s:4:"file";s:31:"2017/08/device-code-display.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"device-code-display-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:30:"device-code-display-300x80.jpg";s:5:"width";i:300;s:6:"height";i:80;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:31:"device-code-display-768x206.jpg";s:5:"width";i:768;s:6:"height";i:206;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:32:"device-code-display-1024x275.jpg";s:5:"width";i:1024;s:6:"height";i:275;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Getting Device Code]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/user-flow/getting-device-code/</link>
		<pubDate>Thu, 10 Aug 2017 17:18:43 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/getting-device-code.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[The device making an API request to obtain a device code]]></excerpt:encoded>
		<wp:post_id>645</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:18:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:18:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-10 10:20:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-10 17:20:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-device-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>643</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/getting-device-code.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/getting-device-code.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2048;s:6:"height";i:550;s:4:"file";s:31:"2017/08/getting-device-code.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"getting-device-code-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:30:"getting-device-code-300x81.jpg";s:5:"width";i:300;s:6:"height";i:81;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:31:"getting-device-code-768x206.jpg";s:5:"width";i:768;s:6:"height";i:206;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:32:"getting-device-code-1024x275.jpg";s:5:"width";i:1024;s:6:"height";i:275;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/user-flow/google-1-enter-the-code/</link>
		<pubDate>Thu, 10 Aug 2017 17:18:44 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/google-1-enter-the-code.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Google prompts the user to enter the code]]></excerpt:encoded>
		<wp:post_id>646</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:18:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:18:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-10 10:22:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-10 17:22:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-1-enter-the-code]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>643</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/google-1-enter-the-code.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/google-1-enter-the-code.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:806;s:6:"height";i:697;s:4:"file";s:35:"2017/08/google-1-enter-the-code.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"google-1-enter-the-code-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:35:"google-1-enter-the-code-300x259.png";s:5:"width";i:300;s:6:"height";i:259;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:35:"google-1-enter-the-code-768x664.png";s:5:"width";i:768;s:6:"height";i:664;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Scope]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/user-flow/google-2-scope/</link>
		<pubDate>Thu, 10 Aug 2017 17:18:46 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/google-2-scope.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Google displays the scopes the application is requesting]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:18:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:18:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-10 10:23:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-10 17:23:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-2-scope]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>643</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/google-2-scope.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/google-2-scope.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:884;s:6:"height";i:485;s:4:"file";s:26:"2017/08/google-2-scope.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"google-2-scope-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"google-2-scope-300x165.png";s:5:"width";i:300;s:6:"height";i:165;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:26:"google-2-scope-768x421.png";s:5:"width";i:768;s:6:"height";i:421;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Return to Device]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/user-flow/google-3-return-to-device/</link>
		<pubDate>Thu, 10 Aug 2017 17:18:47 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2017/08/google-3-return-to-device.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Google instructs the user to return to the device]]></excerpt:encoded>
		<wp:post_id>648</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:18:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:18:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-10 10:23:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-10 17:23:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-3-return-to-device]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>643</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2017/08/google-3-return-to-device.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2017/08/google-3-return-to-device.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:781;s:6:"height";i:683;s:4:"file";s:37:"2017/08/google-3-return-to-device.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"google-3-return-to-device-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"google-3-return-to-device-300x262.png";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:37:"google-3-return-to-device-768x672.png";s:5:"width";i:768;s:6:"height";i:672;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[oauth-playground]]></title>
		<link>https://www.oauth.com/oauth2-servers/tools-and-libraries/oauth-playground/</link>
		<pubDate>Thu, 12 Jul 2018 17:07:48 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/oauth-playground.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>719</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:07:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:07:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:07:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:07:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oauth-playground]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>697</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/oauth-playground.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/oauth-playground.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2152;s:6:"height";i:1580;s:4:"file";s:28:"2018/07/oauth-playground.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"oauth-playground-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"oauth-playground-300x220.png";s:5:"width";i:300;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"oauth-playground-768x564.png";s:5:"width";i:768;s:6:"height";i:564;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:29:"oauth-playground-1024x752.png";s:5:"width";i:1024;s:6:"height";i:752;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[jsonwebtoken.io]]></title>
		<link>https://www.oauth.com/oauth2-servers/tools-and-libraries/jsonwebtoken-io/</link>
		<pubDate>Thu, 12 Jul 2018 17:09:43 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/jsonwebtoken.io_.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>721</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:09:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:09:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:09:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:09:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jsonwebtoken-io]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>697</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/jsonwebtoken.io_.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/jsonwebtoken.io_.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1760;s:6:"height";i:1538;s:4:"file";s:28:"2018/07/jsonwebtoken.io_.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"jsonwebtoken.io_-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"jsonwebtoken.io_-300x262.png";s:5:"width";i:300;s:6:"height";i:262;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"jsonwebtoken.io_-768x671.png";s:5:"width";i:768;s:6:"height";i:671;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:29:"jsonwebtoken.io_-1024x895.png";s:5:"width";i:1024;s:6:"height";i:895;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[indieauth-authorization-prompt-aaronpk]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/authorization/indieauth-authorization-prompt-aaronpk/</link>
		<pubDate>Thu, 12 Jul 2018 17:18:51 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/indieauth-authorization-prompt-aaronpk.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>730</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:18:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:18:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:18:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:18:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[indieauth-authorization-prompt-aaronpk]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>690</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/indieauth-authorization-prompt-aaronpk.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/indieauth-authorization-prompt-aaronpk.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1298;s:6:"height";i:1228;s:4:"file";s:50:"2018/07/indieauth-authorization-prompt-aaronpk.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:50:"indieauth-authorization-prompt-aaronpk-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:50:"indieauth-authorization-prompt-aaronpk-300x284.png";s:5:"width";i:300;s:6:"height";i:284;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:50:"indieauth-authorization-prompt-aaronpk-768x727.png";s:5:"width";i:768;s:6:"height";i:727;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:51:"indieauth-authorization-prompt-aaronpk-1024x969.png";s:5:"width";i:1024;s:6:"height";i:969;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[indieauth-authorization-prompt-wordpress]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/authorization/indieauth-authorization-prompt-wordpress/</link>
		<pubDate>Thu, 12 Jul 2018 17:18:54 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/indieauth-authorization-prompt-wordpress.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>731</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:18:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:18:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:18:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:18:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[indieauth-authorization-prompt-wordpress]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>690</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/indieauth-authorization-prompt-wordpress.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/indieauth-authorization-prompt-wordpress.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:409;s:6:"height";i:639;s:4:"file";s:52:"2018/07/indieauth-authorization-prompt-wordpress.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:52:"indieauth-authorization-prompt-wordpress-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:52:"indieauth-authorization-prompt-wordpress-192x300.png";s:5:"width";i:192;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[indieauth-login-prompt]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/authorization/indieauth-login-prompt/</link>
		<pubDate>Thu, 12 Jul 2018 17:18:55 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/indieauth-login-prompt.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>732</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:18:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:18:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:18:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:18:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[indieauth-login-prompt]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>690</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/indieauth-login-prompt.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/indieauth-login-prompt.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1348;s:6:"height";i:574;s:4:"file";s:34:"2018/07/indieauth-login-prompt.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"indieauth-login-prompt-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:34:"indieauth-login-prompt-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"indieauth-login-prompt-768x327.png";s:5:"width";i:768;s:6:"height";i:327;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:35:"indieauth-login-prompt-1024x436.png";s:5:"width";i:1024;s:6:"height";i:436;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github-authorization-details]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/github-authorization-details-2/</link>
		<pubDate>Thu, 12 Jul 2018 18:35:10 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/github-authorization-details.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>785</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 11:35:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 18:35:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:35:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:35:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github-authorization-details-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/github-authorization-details.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/github-authorization-details.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:752;s:6:"height";i:454;s:4:"file";s:40:"2018/07/github-authorization-details.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"github-authorization-details-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"github-authorization-details-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github-authorization-list]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/github-authorization-list-2/</link>
		<pubDate>Thu, 12 Jul 2018 18:35:12 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/github-authorization-list.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>786</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 11:35:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 18:35:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:35:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:35:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github-authorization-list-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/github-authorization-list.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/github-authorization-list.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1530;s:6:"height";i:690;s:4:"file";s:37:"2018/07/github-authorization-list.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"github-authorization-list-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"github-authorization-list-300x135.png";s:5:"width";i:300;s:6:"height";i:135;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:37:"github-authorization-list-768x346.png";s:5:"width";i:768;s:6:"height";i:346;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:38:"github-authorization-list-1024x462.png";s:5:"width";i:1024;s:6:"height";i:462;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[twitter-authorization-list]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/twitter-authorization-list-2/</link>
		<pubDate>Thu, 12 Jul 2018 18:35:13 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/twitter-authorization-list.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>787</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 11:35:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 18:35:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:35:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:35:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[twitter-authorization-list-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/twitter-authorization-list.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/twitter-authorization-list.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1270;s:6:"height";i:892;s:4:"file";s:38:"2018/07/twitter-authorization-list.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"twitter-authorization-list-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"twitter-authorization-list-300x211.png";s:5:"width";i:300;s:6:"height";i:211;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"twitter-authorization-list-768x539.png";s:5:"width";i:768;s:6:"height";i:539;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:39:"twitter-authorization-list-1024x719.png";s:5:"width";i:1024;s:6:"height";i:719;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[fitbit-authorize]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/checkboxes/fitbit-authorize/</link>
		<pubDate>Thu, 12 Jul 2018 20:19:39 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/fitbit-authorize.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>809</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 13:19:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 20:19:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 13:19:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 20:19:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fitbit-authorize]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>181</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/fitbit-authorize.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/fitbit-authorize.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:932;s:6:"height";i:976;s:4:"file";s:28:"2018/07/fitbit-authorize.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"fitbit-authorize-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"fitbit-authorize-286x300.png";s:5:"width";i:286;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:28:"fitbit-authorize-768x804.png";s:5:"width";i:768;s:6:"height";i:804;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_browser_server]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/user_browser_server-2/</link>
		<pubDate>Thu, 12 Jul 2018 21:12:55 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/user_browser_server.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>845</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:12:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:12:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 14:12:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 21:12:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_browser_server-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/user_browser_server.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/user_browser_server.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:662;s:6:"height";i:475;s:4:"file";s:31:"2018/07/user_browser_server.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"user_browser_server-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"user_browser_server-300x215.png";s:5:"width";i:300;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[user_browser_client_server]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/user_browser_client_server-2/</link>
		<pubDate>Thu, 12 Jul 2018 21:58:19 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/user_browser_client_server.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[The app's server communicates with the API]]></excerpt:encoded>
		<wp:post_id>862</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:58:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:58:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 14:58:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 21:58:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user_browser_client_server-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/user_browser_client_server.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/user_browser_client_server.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:900;s:6:"height";i:230;s:4:"file";s:38:"2018/07/user_browser_client_server.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"user_browser_client_server-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"user_browser_client_server-300x77.png";s:5:"width";i:300;s:6:"height";i:77;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"user_browser_client_server-768x196.png";s:5:"width";i:768;s:6:"height";i:196;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google-create-credentials]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/create-an-application/google-create-credentials/</link>
		<pubDate>Thu, 12 Jul 2018 22:33:36 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/google-create-credentials.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Create Credentials for your App on the Google API Console]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:33:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:33:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:33:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:33:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google-create-credentials]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>883</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/google-create-credentials.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/google-create-credentials.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2058;s:6:"height";i:1438;s:4:"file";s:37:"2018/07/google-create-credentials.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"google-create-credentials-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"google-create-credentials-300x210.png";s:5:"width";i:300;s:6:"height";i:210;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:37:"google-create-credentials-768x537.png";s:5:"width";i:768;s:6:"height";i:537;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:38:"google-create-credentials-1024x716.png";s:5:"width";i:1024;s:6:"height";i:716;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[google_oauth_prompt]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/authorization-request/google_oauth_prompt/</link>
		<pubDate>Thu, 12 Jul 2018 22:41:14 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/google_oauth_prompt.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Google's Authorization Request]]></excerpt:encoded>
		<wp:post_id>889</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:41:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:41:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:41:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:41:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[google_oauth_prompt]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>888</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/google_oauth_prompt.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/google_oauth_prompt.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1022;s:6:"height";i:1190;s:4:"file";s:31:"2018/07/google_oauth_prompt.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"google_oauth_prompt-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"google_oauth_prompt-258x300.png";s:5:"width";i:258;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"google_oauth_prompt-768x894.png";s:5:"width";i:768;s:6:"height";i:894;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:32:"google_oauth_prompt-879x1024.png";s:5:"width";i:879;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_create_new_application]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/create-an-application/github_create_new_application-2/</link>
		<pubDate>Thu, 12 Jul 2018 22:53:54 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/github_create_new_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Register a new OAuth application on GitHub]]></excerpt:encoded>
		<wp:post_id>899</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:53:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:53:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:53:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:53:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_create_new_application-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>898</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/github_create_new_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/github_create_new_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1600;s:6:"height";i:1120;s:4:"file";s:41:"2018/07/github_create_new_application.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:41:"github_create_new_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:41:"github_create_new_application-300x210.png";s:5:"width";i:300;s:6:"height";i:210;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:41:"github_create_new_application-768x538.png";s:5:"width";i:768;s:6:"height";i:538;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:42:"github_create_new_application-1024x717.png";s:5:"width";i:1024;s:6:"height";i:717;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_application_created]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/create-an-application/github_application_created-2/</link>
		<pubDate>Thu, 12 Jul 2018 22:54:30 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/github_application_created.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[GitHub application has been created]]></excerpt:encoded>
		<wp:post_id>900</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:54:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:54:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:54:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:54:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_application_created-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>898</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/github_application_created.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/github_application_created.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1532;s:6:"height";i:2425;s:4:"file";s:38:"2018/07/github_application_created.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"github_application_created-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:38:"github_application_created-190x300.png";s:5:"width";i:190;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:39:"github_application_created-768x1216.png";s:5:"width";i:768;s:6:"height";i:1216;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:39:"github_application_created-647x1024.png";s:5:"width";i:647;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[github_oauth_prompt]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/authorization-request/github_oauth_prompt-2/</link>
		<pubDate>Thu, 12 Jul 2018 22:59:13 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2018/07/github_oauth_prompt.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[GitHub's Authorization Request]]></excerpt:encoded>
		<wp:post_id>908</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:59:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:59:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:59:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:59:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github_oauth_prompt-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>907</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2018/07/github_oauth_prompt.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/07/github_oauth_prompt.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1204;s:6:"height";i:1792;s:4:"file";s:31:"2018/07/github_oauth_prompt.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"github_oauth_prompt-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"github_oauth_prompt-202x300.png";s:5:"width";i:202;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"github_oauth_prompt-768x1143.png";s:5:"width";i:768;s:6:"height";i:1143;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:32:"github_oauth_prompt-688x1024.png";s:5:"width";i:688;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/969/</link>
		<pubDate>Thu, 22 Jul 2021 19:21:56 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/969/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>969</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:21:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[969]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>968</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[banned-users-list]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:4;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:5:"large";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:3;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:6;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:0;s:1:"y";i:6;}s:5:"large";a:2:{s:1:"x";i:0;s:1:"y";i:2;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:14;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:32;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/971/</link>
		<pubDate>Thu, 22 Jul 2021 19:21:56 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/971/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>971</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:21:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[971]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>968</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[brute-force]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:3;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:0;s:1:"y";i:4;}s:4:"wide";a:2:{s:1:"x";i:3;s:1:"y";i:2;}s:5:"large";a:2:{s:1:"x";i:2;s:1:"y";i:2;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:6;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:10;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Creating a new application in Okta]]></title>
		<link>https://www.oauth.com/okta_new_application/</link>
		<pubDate>Thu, 16 Dec 2021 20:54:49 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2021/12/okta_new_application.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1033</wp:post_id>
		<wp:post_date><![CDATA[2021-12-16 13:54:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-16 20:54:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:55:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:55:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[okta_new_application]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2021/12/okta_new_application.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/12/okta_new_application.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_relevanssi_noindex_reason]]></wp:meta_key>
		<wp:meta_value><![CDATA[Relevanssi image attachment filter]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2112;s:6:"height";i:1124;s:4:"file";s:32:"2021/12/okta_new_application.png";s:5:"sizes";a:7:{s:6:"medium";a:4:{s:4:"file";s:32:"okta_new_application-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:33:"okta_new_application-1024x545.png";s:5:"width";i:1024;s:6:"height";i:545;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:32:"okta_new_application-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"okta_new_application-768x409.png";s:5:"width";i:768;s:6:"height";i:409;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:33:"okta_new_application-1536x817.png";s:5:"width";i:1536;s:6:"height";i:817;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:34:"okta_new_application-2048x1090.png";s:5:"width";i:2048;s:6:"height";i:1090;s:9:"mime-type";s:9:"image/png";}s:16:"resized-1024x585";a:4:{s:4:"file";s:42:"okta_new_application-1024x545-1024x585.png";s:5:"width";i:1024;s:6:"height";i:585;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_gallery_featured]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:16:"resized-1024x585";a:4:{s:4:"file";s:42:"okta_new_application-1024x545-1024x585.png";s:5:"width";i:1024;s:6:"height";i:585;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[jwt.io]]></title>
		<link>https://www.oauth.com/oauth2-servers/tools-and-libraries/jwt-io/</link>
		<pubDate>Thu, 16 Dec 2021 23:36:53 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2021/12/jwt-io.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[jwt.io]]></excerpt:encoded>
		<wp:post_id>1133</wp:post_id>
		<wp:post_date><![CDATA[2021-12-16 16:36:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-12-16 23:36:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:37:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:37:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jwt-io]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>697</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2021/12/jwt-io.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2021/12/jwt-io.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_relevanssi_noindex_reason]]></wp:meta_key>
		<wp:meta_value><![CDATA[Relevanssi image attachment filter]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2246;s:6:"height";i:1738;s:4:"file";s:18:"2021/12/jwt-io.png";s:5:"sizes";a:6:{s:6:"medium";a:4:{s:4:"file";s:18:"jwt-io-300x232.png";s:5:"width";i:300;s:6:"height";i:232;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:19:"jwt-io-1024x792.png";s:5:"width";i:1024;s:6:"height";i:792;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:18:"jwt-io-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:18:"jwt-io-768x594.png";s:5:"width";i:768;s:6:"height";i:594;s:9:"mime-type";s:9:"image/png";}s:9:"1536x1536";a:4:{s:4:"file";s:20:"jwt-io-1536x1189.png";s:5:"width";i:1536;s:6:"height";i:1189;s:9:"mime-type";s:9:"image/png";}s:9:"2048x2048";a:4:{s:4:"file";s:20:"jwt-io-2048x1585.png";s:5:"width";i:2048;s:6:"height";i:1585;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_gallery_featured]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[oauth_authorization_screen]]></title>
		<link>https://www.oauth.com/oauth_authorization_screen-2/</link>
		<pubDate>Thu, 26 May 2022 23:16:00 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/wp-content/uploads/2022/05/oauth_authorization_screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1144</wp:post_id>
		<wp:post_date><![CDATA[2022-05-26 16:16:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-05-26 23:16:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-05-26 16:16:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-05-26 23:16:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oauth_authorization_screen-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://www.oauth.com/wp-content/uploads/2022/05/oauth_authorization_screen.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2022/05/oauth_authorization_screen.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_relevanssi_noindex_reason]]></wp:meta_key>
		<wp:meta_value><![CDATA[Relevanssi image attachment filter]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1141;s:6:"height";i:674;s:4:"file";s:38:"2022/05/oauth_authorization_screen.png";s:5:"sizes";a:5:{s:6:"medium";a:4:{s:4:"file";s:38:"oauth_authorization_screen-300x177.png";s:5:"width";i:300;s:6:"height";i:177;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:39:"oauth_authorization_screen-1024x605.png";s:5:"width";i:1024;s:6:"height";i:605;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:38:"oauth_authorization_screen-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:38:"oauth_authorization_screen-768x454.png";s:5:"width";i:768;s:6:"height";i:454;s:9:"mime-type";s:9:"image/png";}s:16:"resized-1024x585";a:5:{s:4:"file";s:48:"oauth_authorization_screen-1024x605-1024x585.png";s:5:"width";i:1024;s:6:"height";i:585;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:113139;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:16:"resized-1024x585";a:5:{s:4:"file";s:48:"oauth_authorization_screen-1024x605-1024x585.png";s:5:"width";i:1024;s:6:"height";i:585;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:113139;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Background]]></title>
		<link>https://www.oauth.com/oauth2-servers/background/</link>
		<pubDate>Fri, 22 Jul 2016 10:25:58 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://dev-oauthsite.pantheonsite.io/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Preface</h2>
<i>by <a href="https://aaronparecki.com/">Aaron Parecki</a></i>

I first got involved with OAuth in 2010 when I was building an API, and knew that I wanted third-party developers to be able to build apps on top of it. At the time, OAuth seemed incredibly intimidating. There were only a few implementations of OAuth 1 in existence, and OAuth 2.0 was still a rough draft. One night I decided to sit down with a craft beer and a paper copy of the latest draft and read it from start to finish until I understood it.

After wading through the forty-four-page spec, I learned a couple things: reading specs is not the best way to learn how OAuth works, and OAuth 2.0 wasn't nearly as complicated as I originally had thought. I began writing a simplified overview of the spec that I wished had existed when I was first learning this. I published it on my website as a blog post called "OAuth 2.0 Simplified" (<a href="https://aaronparecki.com/oauth-2-simplified/">https://aaronparecki.com/oauth-2-simplified/</a>). This post is now viewed hundreds of thousands of times each year. It is clear that people know OAuth 2.0 is the right choice for securing their APIs, and are looking for resources to help understand it.

I had been wanting to expand this blog post into a more comprehensive guide to OAuth servers, and in 2016, I was put in touch with Okta, and we published the first version of this new guide to OAuth on <a href="https://www.oauth.com">oauth.com</a>. In 2017, we collaborated on publishing the print edition of the book, and have published revised editions in 2018 and 2020.

My hope is that this book makes OAuth 2.0 more approachable, and gives you a solid foundation of knowledge that you'll need as you continue to work with technologies on the Web.

<h2>Background</h2>
Before OAuth, a common pattern for granting access to your account to a third-party application was to simply give it your password and allow it to act as you. We commonly saw this with Twitter apps which would ask for your Twitter password in order to give you some stats on your account, or would ask to be able to tweet something from your account in exchange for something of value.

This pattern of applications obtaining user passwords obviously has a number of problems. Since the application would need to log in to the service as the user, these applications would often store users' passwords in plain text, making them a target for harvesting passwords. Once the application has the user's password, it has complete access to the user's account, including having access to capabilities such as changing the user's password! Another problem was that after giving an app your password, the only way you'd be able to revoke that access was by changing your password, something that users are typically reluctant to do.

Naturally, many services quickly realized the problems and limitations of this model, and sought to solve this quickly. Many services implemented things similar to OAuth 1.0. Flickr's API used what was called "FlickrAuth" which used "frobs" and "tokens". Google created "AuthSub". Facebook opted to issue each application a secret, and require the application sign each request with an md5 hash with that secret. Yahoo created "BBAuth" (Browser-Based Auth). The result was a wide variety of solutions to the problem, completely incompatible with each other, and often failing to address certain security considerations.

Around November 2006, Blaine Cook, chief architect at Twitter, was looking for a better authentication method for the Twitter API, something that didn't require users giving out their Twitter passwords to third-party apps.

<blockquote>We want something like Flickr Auth / Google AuthSub / Yahoo! BBAuth, but published as an open standard, with common server and client libraries, etc.

- Blaine Cook, April 5, 2007</blockquote>

In 2007, a group of people working on the development of OpenID got together and created a mailing list to produce a proposal for a standard for API access control that could be used by any system, regardless of whether it used OpenID. This original group included Blaine Cook, Kellen Elliott-McCrea, Larry Halff, Tara Hunt, Ian McKeller, Chris Messina, and a few others.

In the following months, several people from Google and AOL got involved, wanting to support the effort as well. By August 2007, the first draft of the OAuth 1 spec was published, along with several implementations of API clients working against Twitter's privately-launched prototype of their OAuth API. Eran Hammer joined the project, eventually taking over as community chair and editor of the spec. By the end of the year, the community published 7 updated drafts and the OAuth Core 1.0 spec was declared final at the Internet Identity Workshop.

Over the next couple years, work on the OAuth spec moved to an IETF working group, where an effort to publish OAuth 1.1 was started. In November 2009, the editor proposed to drop work on the 1.1 revision and instead focus on a more significantly different 2.0 version.

The OAuth 2.0 spec started out as an effort to simplify and clear up many of the aspects of OAuth 1 that were difficult or confusing.

While several companies had implemented OAuth 1 APIs (namely Twitter, and later Flickr), there are some use cases, such as mobile applications, that cannot be safely implemented in OAuth 1. The goal of OAuth 2.0 was to take the knowledge learned from the first implementations of OAuth 1 and update it for the emerging mobile application use case, as well as to simplify aspects that were confusing to consumers of the APIs.

Work on the OAuth 2.0 spec began in the IETF working group, with Eran Hammer and several others named as editors of the spec. While the effort began on a strong note, it quickly became apparent that people in the group had very different goals with the spec.

The source of the contentions around the development of the OAuth 2.0 framework stemmed from the unbridgeable conflicts between the web and enterprise worlds. As work on the spec continued, most of the contributors in the web community left to go implement their products, leaving only the enterprise crowd to finish the spec.

In July 2010, the draft 10 was published, and no new drafts were published until December that year. Draft 10 still had a few people in the web community contributing, and so the spec was coming along nicely. The result was that most of the services that decided to implement an OAuth 2.0 API were reading draft 10. Most of the implementations at the time (Facebook, Salesforce, Windows Live, Google, Foursquare, etc) were all doing roughly the same thing. After launching their APIs they rarely went back and updated to newer drafts of OAuth 2.

Over the next 22 revisions of the standard, the web and enterprise contributors continued to disagree on fundamental issues. The only way to resolve the disagreements and continue making progress was to pull out the conflicting issues and put them into their own drafts, leaving holes in the spec that were called "extensible". By the final draft, so much of the core was pulled into separate documents, that the core document was renamed from being a "protocol" to being a "framework," and a disclaimer was added that "this specification is likely to produce a wide range of non-interoperable implementations."

In 2012, Eran Hammer, the primary editor of the OAuth 2.0 standard, decided he could no longer contribute to the standard and officially withdrew his name and <a href="http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/" class="url">left the working group</a>. Naturally this stirred up a lot of attention in what was going on with the standard, which he did a good job of addressing in blog posts and at one final conference in Portland, Oregon. He ended his blog post with "I'm hoping someone will take 2.0 and produce a 10 page profile that's useful for the vast majority of web providers."

Today, if someone wants to implement OAuth 2.0 for their web service, they need to synthesize information from a number of different RFCs and drafts. The standard itself does not require a token type, and does not require any specific grant types. This means implementers must decide which they will be supporting. The standard does not even give any guidance on token string size, which ends up being one of the first questions every implementer asks when they get started. Implementers must also read the security guidance and cautions in the document and understand the implications of the decisions they are forced to make.

Interestingly, most of the web services that do implement OAuth 2.0 for their APIs come to many of the same decisions, and so most of the OAuth 2.0 APIs in existence look very similar. This book is a guide to building OAuth 2.0 APIs, with concrete recommendations based on the majority of the live implementations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2016-07-22 03:25:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-22 10:25:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-10 21:59:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-11 04:59:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[background]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[Internal Name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Part 1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c03d92955171925434ed0129a6c9a41a]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote data-secret="tc3Y0FAdMS" class="wp-embedded-content"><a href="http://oauth.com.dev/oauth-2-0-servers/sample-page/chapter-1-chapter/section-first-chapter/">The First Section in the First Chapter</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="http://oauth.com.dev/oauth-2-0-servers/sample-page/chapter-1-chapter/section-first-chapter/embed/#?secret=tc3Y0FAdMS" data-secret="tc3Y0FAdMS" width="600" height="338" title="&#8220;The First Section in the First Chapter&#8221; &#8212; oauth" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_c03d92955171925434ed0129a6c9a41a]]></wp:meta_key>
		<wp:meta_value><![CDATA[1470775025]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Background]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Before OAuth, a common pattern for granting access to your account to a third-party application was to simply give it your password and allow it to act as you.]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OAuth.com]]></title>
		<link>https://www.oauth.com/</link>
		<pubDate>Wed, 10 Aug 2016 00:52:21 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?page_id=6</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 style="text-align: center;">OAuth 2.0 is the modern standard for securing access to APIs.</h2>
<p style="text-align: center;">OAuth 2.0 Simplified is a guide to building an OAuth 2.0 server. Through high-level overviews, step-by-step instructions, and real-world examples, you will learn how to take advantage of the OAuth 2.0 framework while building a secure API.</p>
<p style="text-align: center;">Want this book in print or Kindle format? Visit <a href="https://oauth2simplified.com/">oauth2simplified.com</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2016-08-09 17:52:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 00:52:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-17 08:22:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-17 15:22:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oauth2-servers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[Internal Name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Homepage]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[<h1 style="text-align: center;">OAuth 2.0 Servers</h1>
<div style="text-align: center;">OAuth 2.0 is the modern standard for securing access to APIs. Read on for a complete guide to building your own authorization server.</div>
<div style="text-align: center;"></div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab64815940f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Table of Contents]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_img]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_background_img]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aba326eef16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[copy]]></wp:meta_key>
		<wp:meta_value><![CDATA[<h1 style="text-align: center;">OAuth 2.0 Simplified</h1>
<p id="byline" style="text-align: center;">Written by Aaron Parecki</p>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_copy]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9c9b4c4d5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[left_cta_link]]></wp:meta_key>
		<wp:meta_value><![CDATA[#in-page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_left_cta_link]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab98fc2218b]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[left_cta_text]]></wp:meta_key>
		<wp:meta_value><![CDATA[Learn about OAuth 2.0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_left_cta_text]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab99aa2218c]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[right_cta_link]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://developer.okta.com/signup/]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_right_cta_link]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9c4880b41]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[right_cta_text]]></wp:meta_key>
		<wp:meta_value><![CDATA[Solve it with Okta]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_right_cta_text]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9c5980b42]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[left_cta_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[_self]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_left_cta_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57b4c4fe65143]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[right_cta_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[_blank]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_right_cta_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57b4c55865144]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"du91292","cols":[{"element_id":"b18c293","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Signing in with Google]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/</link>
		<pubDate>Wed, 10 Aug 2016 01:48:59 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?page_id=28</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>Despite OAuth being an <i>authorization</i> protocol rather than an <i>authentication</i> protocol, it is often used as the basis for authentication workflows anyway. A typical use of many common OAuth APIs is just to identify the user at the computer when logging in to a third-party app.</p>

    <p>Authentication and authorization are often confused with each other, but can be more easily understood if you think about them from the perspective of an application. An app that is authenticating users is just verifying who the user is. An app that is authorizing users is trying to gain access or modify something that belongs to the user.</p>

    <p>OAuth was designed as an authorization protocol, so the end result of every OAuth flow is the app obtains an access token in order to be able to access or modify something about the user's account. The access token itself says nothing about <i>who</i> the user is.</p>

    <p>There are several ways different services provide a way for an app to find out the identity of the user. A simple way is for the API to provide a "user info" endpoint which will return the authenticated user's name and other profile info when an API call is made with an access token. While this is not something that is part of the OAuth standard, it's a common approach many services have taken. A more advanced and standardized approach is to use OpenID Connect, an OAuth 2.0 extension. OpenID Connect is covered in more detail in <a href="#openid_connect" class="chapter noname end"></a>.</p>

    <p>This chapter will walk through using a simplified OpenID Connect workflow with the Google API to identify the user who signed in to your application.</p>

<ul>
  <li><a href="/oauth2-servers/signing-in-with-google/create-an-application/"></a></li>
  <li><a href="/oauth2-servers/signing-in-with-google/setting-up-the-environment/"></a></li>
  <li><a href="/oauth2-servers/signing-in-with-google/authorization-request/"></a></li>
  <li><a href="/oauth2-servers/signing-in-with-google/getting-an-id-token/"></a></li>
  <li><a href="/oauth2-servers/signing-in-with-google/verifying-the-user-info/"></a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2016-08-09 18:48:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 01:48:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-10 22:08:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-11 05:08:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[signing-in-with-google]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[Numeric Representation]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Signing in with Google]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[This chapter is a short overview of working with typical OAuth 2.0 APIs. While each implementation of OAuth 2.0 can be slightly different...]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mobile and Native Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/mobile-and-native-apps/</link>
		<pubDate>Wed, 10 Aug 2016 01:50:03 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?page_id=33</guid>
		<description></description>
		<content:encoded><![CDATA[Like single-page apps, mobile apps also cannot maintain the confidentiality of a client secret. Because of this, mobile apps must also use an OAuth flow that does not require a client secret. The current best practice is to use the Authorization Flow with PKCE, along with launching an external browser, in order to ensure the native app cannot modify the browser window or inspect the contents.

Many websites provide mobile SDKs which handle the authorization process for you. For those services, you are probably better off using their SDKs directly, since they may have augmented their APIs with non-standard additions. Google provides an open source library called AppAuth which handles the implementation details of the flow described below. It is meant to be able to work with any OAuth 2.0 server that implements the spec. In the case that the service does not a provide their own abstraction, and you have to use their OAuth 2.0 endpoints directly, this section describes how to use the authorization code flow with PKCE to interface with an API.

<ul>
  <li><a href="/oauth2-servers/mobile-and-native-apps/authorization/">Authorization</a></li>
  <li><a href="/oauth2-servers/mobile-and-native-apps/security-considerations/">Security Considerations</a></li>
</ul>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2016-08-09 18:50:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 01:50:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:19:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:19:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mobile-and-native-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab64815940f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Mobile and Native Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"1n3a101","cols":[{"element_id":"fydh101","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Single-Page Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/</link>
		<pubDate>Wed, 10 Aug 2016 01:50:21 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://oauth.com.dev/?page_id=36</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>Single-page apps (also known as browser-based apps) run entirely in the browser after loading the JavaScript and HTML source code from a web page. Since the entire source is available to the browser, they cannot maintain the confidentiality of a client secret, so a secret is not used for these apps. Because they can't use a client secret, the best option is to use the PKCE extension to protect the authorization code in the redirect. This is similar to the solution for mobile apps which also can't use a client secret.</p>

<div class="aside" style="border: 1px #ccc solid; border-radius: 20px; padding: 20px;">
     <h5>Deprecation Notice</h5>

     <p>A common historical pattern for single-page apps was to use the Implicit flow to receive an access token in the redirect without the intermediate authorization code exchange step. This has a number of security issues as described <a href="/oauth2-servers/single-page-apps/implicit-flow/">Implicit Flow</a> and should no longer be used. Please see <a href="https://oauth.net/2/browser-based-apps/" class="url">https://oauth.net/2/browser-based-apps/ for more details.</a></p>
</div>

The diagram below illustrates an example where the user interacts with their browser, which in turn makes API requests directly to the service. After first downloading the Javascript and HTML source code from the client, the browser then makes direct API requests to the service. In this case, the app's server never makes API requests to the service, since everything is handled directly in the browser.

[caption id="attachment_845" align="aligncenter" width="662"]<img class="wp-image-845 size-full" src="/wp-content/uploads/2018/07/user_browser_server.png" alt="" width="662" height="475" /> The user's browser communicates directly with the API server[/caption]

<h2 id="authorization">Authorization</h2>

The authorization code is a temporary code that the client will exchange for an access token. The code itself is obtained from the authorization server where the user gets a chance to see what the information the client is requesting, and approve or deny the request.

The first step of the web flow is to request authorization from the user. This is accomplished by creating an authorization request link for the user to click on.

The authorization URL is usually in a format such as:

[text]https://authorization-server.com/oauth/authorize
  ?client_id=a17c21ed
  &amp;response_type=code
  &amp;state=5ca75bd30
  &amp;redirect_uri=https%3A%2F%2Fexample-app.com%2Fauth[/text]

After the user visits the authorization page, the service shows the user an explanation of the request, including application name, scope, etc. If the user clicks "approve", the server will redirect back to the website, with an authorization code and the state value in the URL query string.

<h3>Authorization Grant Parameters</h3>
The following parameters are used to make the authorization request.
<h4><code>response_type</code></h4>
<code>response_type</code> is set to <code>code</code> indicating that you want an authorization code as the response.
<h4><code>client_id</code></h4>
The <code>client_id</code> is the identifier for your app. You will have received a client_id when first registering your app with the service.
<h4><code>redirect_uri</code> (optional)</h4>
The <code>redirect_uri</code> is optional in the spec, but some services require it. This is the URL to which you want the user to be redirected after the authorization is complete. This must match the redirect URL that you have previously registered with the service.
<h4><code>scope</code> (optional)</h4>
Include one or more scope values to request additional levels of access. The values will depend on the particular service.
<h4><code>state</code> (recommended)</h4>
The <code>state</code> parameter serves two functions. When the user is redirected back to your app, whatever value you include as the state will also be included in the redirect. This gives your app a chance to persist data between the user being directed to the authorization server and back again, such as using the state parameter as a session key. This may be used to indicate what action in the app to perform after authorization is complete, for example, indicating which of your app's pages to redirect to after authorization. This also serves as a CSRF protection mechanism.

Note that the lack of using a client secret means that using the state parameter is even more important for single-page apps.

<h2 id="example">Example Flow</h2>
The following step-by-step example illustrates using the authorization grant type for single-page apps.

<h4>The app initiates the authorization request</h4>
The app initiates the flow by crafting a URL containing ID, and optionally scope and state. The app can put this into an <code>&lt;a href=""&gt;</code> tag.

[text]&lt;a href=&quot;https://authorization-server.com/authorize?response_type=code
     &amp;client_id=mRkZGFjM&amp;state=TY2OTZhZGFk&quot;&gt;Connect Your Account&lt;/a&gt;[/text]

<h4>The user approves the request</h4>
Upon being directed to the auth server, the user sees the authorization request.

[caption id="attachment_510" align="aligncenter" width="650"]<img class="wp-image-510 " src="https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01-1.png" alt="" width="650" height="370" /> Example Authorization Request[/caption]

After the user is taken to the service and sees the request, they will either allow or deny the request. If they allow the request, they will be redirected back to the redirect URL specified along with an authorization code in the query string. The app then needs to exchange this authorization code for an access token.

[text]https://example-app.com/cb?code=Yzk5ZDczMzRlNDEwY&amp;state=TY2OTZhZGFk[/text]

If you include a "state" parameter in the initial authorization URL, the service will return it to you after the user authorizes your app. Your app should compare the state with the state it created in the initial request. This helps ensure that you only exchange authorization codes that you requested, preventing attackers from redirecting to your callback URL with arbitrary or stolen authorization codes.

<h4>Exchange the authorization code for an access token</h4>

To exchange the authorization code for an access token, the app makes a POST request to the service's token endpoint. The request will have the following parameters.

<h5><code>grant_type</code> (required)</h5>
The <code>grant_type</code> parameter must be set to "<code>authorization_code</code>".

<h5><code>code</code> (required)</h5>
This parameter is for the authorization code received from the authorization server which will be in the query string parameter "code" in this request.

<h5><code>redirect_uri</code> (possibly required)</h5>
If the redirect URL was included in the initial authorization request, it must be included in the token request as well, and must be identical. Some services support registering multiple redirect URLs, and some require the redirect URL to be specified on each request. Check the service's documentation for the specifics.

<h5>Client Identification (required)</h5>
Despite the client secret not being used in this flow, the request requires sending the client ID to identify the application making the request. This means the client must include the client ID as a POST body parameter rather than using HTTP Basic Authentication like it can when including the client secret as well.

[text]POST /oauth/token HTTP/1.1
  Host: authorization-endpoint.com
  grant_type=code
  &amp;code=Yzk5ZDczMzRlNDEwY
  &amp;redirect_uri=https://example-app.com/cb
  &amp;client_id=mRkZGFjM[/text]

<h2 id="implicit">Implicit Flow</h2>

        <p>Some services use the alternative Implicit Flow for single-page apps, rather than allow the app to use the Authorization Code flow with no secret.</p>

        <p>The Implicit Flow bypasses the code exchange step, and instead the access token is returned in the query string fragment to the client immediately.</p>

        <p>In practice, there are only very limited cases in which this is necessary. Several major implementations (<a href="https://www.ietf.org/mail-archive/web/oauth/current/msg16966.html" class="url">Keycloak</a>, <a href="https://www.ietf.org/mail-archive/web/oauth/current/msg16968.html" class="url">Deutsche Telekom</a>, <a href="https://www.ietf.org/mail-archive/web/oauth/current/msg16967.html" class="url">Smart Health IT</a>) have chosen to avoid the Implicit Flow completely and use the Authorization Code flow instead.</p>

        <p>In order for a single-page app to use the Authorization Code flow, it must be able to make a POST request to the authorization server. This means if the authorization server is on a different domain, the server will need to support the appropriate CORS headers. If supporting CORS headers is not an option, then the service may use the Implicit Flow instead.</p>

        <p>In any case, with both the Implicit Flow as well as the Authorization Code Flow with no secret, the server must require registration of the redirect URL in order to maintain the security of the flow.</p>


<h2 id="security-considerations">Security Considerations</h2>

<p>The only way the authorization code grant with no client secret can be secure is by using the "state" parameter and restricting the redirect URL to trusted clients. Since the secret is not used, there is no way to verify the identity of the client other than by using a registered redirect URL. This is why you need to pre-register your redirect URL with the OAuth 2.0 service.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2016-08-09 18:50:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-10 01:50:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:18:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:18:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[single-page-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab64815940f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Single-Page Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Since the entire source is available to the browser, single-page apps cannot maintain the confidentiality of a client secret, so the secret is not used.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"sohk346","cols":[{"element_id":"0om7346","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Server-Side Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/</link>
		<pubDate>Fri, 12 Aug 2016 21:11:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=95</guid>
		<description></description>
		<content:encoded><![CDATA[Server-side apps are the most common type of application encountered when dealing with OAuth servers. These apps run on a web server where the source code of the application is not available to the public, so they can maintain the confidentiality of their client secret.

The diagram below illustrates a typical example where the user interacts with their browser which is communicating with the client. The client and the API server have a separate secure communications channel between them. The user's browser never makes a request directly to the API server, everything goes through the client first.

[caption id="attachment_862" align="alignnone" width="900"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/user_browser_client_server.png" alt="" width="900" height="230" class="size-full wp-image-862" /> The app's server communicates with the API[/caption]

Server-side apps use the <code>authorization_code</code> grant type. In this flow, after the user authorizes the application, the application receives an "authorization code" which it can then exchange for an access token.

<ul>
  <li><a href="/oauth2-servers/server-side-apps/authorization-code/">Authorization Code Flow</a></li>
  <li><a href="/oauth2-servers/server-side-apps/example-flow/">Example Flow</a></li>
  <li><a href="/oauth2-servers/server-side-apps/possible-errors/">Possible Errors</a></li>
  <li><a href="/oauth2-servers/server-side-apps/user-experience/">User Experience Considerations</a></li>
  <li><a href="/oauth2-servers/server-side-apps/security-considerations/">Security Considerations</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2016-08-12 14:11:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-12 21:11:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-10 22:14:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-11 05:14:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[server-side-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Server-Side Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a39b2e6de025d4ec7634a8c1edce4c1e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_cfd29b15bf1a25708e9a6d760381c962]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Terminology Reference]]></title>
		<link>https://www.oauth.com/oauth2-servers/definitions/</link>
		<pubDate>Mon, 15 Aug 2016 23:47:16 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=108</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Roles</h2>
OAuth defines four roles:
<ul>
 	<li>Resource owner (the user)</li>
 	<li>Resource server (the API)</li>
 	<li>Authorization server (can be the same server as the API)</li>
 	<li>Client (the application)</li>
</ul>

<h3 id="the-user">The User</h3>
The OAuth 2.0 spec refers to the user as the "resource owner." The resource owner is the person who is giving access to some portion of their account. The resources in this case can be data (photos, documents, contacts), services (posting a blog entry, transferring funds), or any other resource requiring access restrictions. Any system that wants to act on behalf of the user must first get permission from them.

<h3 id="the-api">The API</h3>
The spec refers to what you typically think of as the main API as the "resource server." The resource server is the server that contains the user's information that is being accessed by the third-party application. The resource server must be able to accept and validate access tokens and grant the request if the user has allowed it. The resource server does not necessarily need to know about applications.

<h3 id="the-authorization-server">The Authorization Server</h3>
The authorization server is what the user interacts with when an application is requesting access to their account. This is the server that displays the OAuth prompt, and where the user approves or denies the application's request. The authorization server is also responsible for granting access tokens after the user authorizes the application.

<h3 id="the-client">The Client</h3>
The client is the app that is attempting to act on the user's behalf or access the user's resources. Before the client can access the user's account, it needs to obtain permission. The client will obtain permission by either directing the user to the authorization server, or by asserting permission directly with the authorization server without interaction by the user.


<h2 id="confidential-clients">Confidential Clients</h2>
Confidential clients are clients which have the ability to maintain the confidentiality of the <code>client_secret</code>. Typically these clients are only applications that run on a server under the control of the developer, where the source code is not accessible to users. These types of applications are commonly referred to as "web apps," since they are most often running on a web server.


<h2 id="public-clients">Public Clients</h2>
Public clients cannot maintain the confidentiality of a <code>client_secret</code>, so the secret is not used for these apps. Both mobile apps and Javascript apps are considered public clients. Since anyone running a Javascript app can easily view the source code of the application, a secret would be visible there trivially. With mobile applications, the binary can be decompiled to extract strings. Any time the application is running on a device under the user's control, it should be considered a public client.


<h2 id="access-token">Access Token</h2>
An access token is the string used when making authenticated requests to the API. The string itself has no meaning to the application using it, but represents that the user has authorized a third-party application to access their account. The token has a corresponding duration of access, scope, and potentially other information the server needs.


<h2 id="refresh-token">Refresh Token</h2>
A refresh token is a string that is used to get a new access token when an access token expires. Not all APIs use refresh tokens.


<h2 id="authorization-code">Authorization Code</h2>
An authorization code is an intermediate token used in the server-side app flow, described in more detail in <a href="/oauth2-servers/oauth2-clients/server-side-apps/">Server-Side Apps</a>. An authorization code is returned to the client after the authorization step, and then the client exchanges it for an access token.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2016-08-15 16:47:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-15 23:47:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:02:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:02:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[definitions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Terminology Reference]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"zg6y607","cols":[{"element_id":"ogdz607","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Dashboard]]></title>
		<link>https://www.oauth.com/itsec-dashboard/security-dashboard/</link>
		<pubDate>Thu, 22 Jul 2021 19:21:56 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dashboard/security-dashboard/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>968</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:21:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-dashboard]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dashboard]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/972/</link>
		<pubDate>Thu, 22 Jul 2021 19:21:56 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/972/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:21:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[972]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>968</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[banned-users]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:1;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:4;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:5;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:2;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:1;s:1:"y";i:0;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:4;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/973/</link>
		<pubDate>Thu, 22 Jul 2021 19:21:56 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/973/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>973</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:21:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:21:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:21:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[973]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>968</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[lockout]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:1;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:2;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:4;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/975/</link>
		<pubDate>Thu, 22 Jul 2021 19:22:43 +0000</pubDate>
		<dc:creator><![CDATA[flickerbox]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/975/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>975</wp:post_id>
		<wp:post_date><![CDATA[2021-07-22 12:22:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-22 19:22:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 12:22:43]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 19:22:43]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[975]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>968</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[active-lockouts]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:4:"wide";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:1;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:2;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:1;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Dashboard]]></title>
		<link>https://www.oauth.com/itsec-dashboard/security-dashboard-2/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:07 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dashboard/security-dashboard-2/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1152</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-dashboard-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dashboard]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1153/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1153/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1153</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1153]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[banned-users-list]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:4;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:5:"large";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:3;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:3;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:6;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:0;s:1:"y";i:4;}s:5:"large";a:2:{s:1:"x";i:0;s:1:"y";i:8;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:14;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:32;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1154/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1154/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1154</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1154]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[security-profile-list]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:4;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:3;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:3;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:3;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:3;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:4;s:1:"y";i:0;}s:4:"wide";a:2:{s:1:"x";i:0;s:1:"y";i:2;}s:5:"large";a:2:{s:1:"x";i:0;s:1:"y";i:6;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:18;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:30;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1155/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1155/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1155</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1155]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[database-backup]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:0;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:3;s:1:"y";i:4;}s:5:"large";a:2:{s:1:"x";i:2;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:12;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:24;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1156/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1156/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1156</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1156]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[brute-force]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:3;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:0;s:1:"y";i:4;}s:4:"wide";a:2:{s:1:"x";i:3;s:1:"y";i:2;}s:5:"large";a:2:{s:1:"x";i:0;s:1:"y";i:4;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:6;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:10;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1157/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1157/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1157</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1157]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[banned-users]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:1;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:4;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:5;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:2;s:1:"y";i:4;}s:6:"medium";a:2:{s:1:"x";i:1;s:1:"y";i:0;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:4;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1158/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1158/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1158</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1158]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[lockout]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:1;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:2;s:1:"y";i:2;}s:4:"wide";a:2:{s:1:"x";i:4;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:1;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1159/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1159/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1159]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[version-management]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:1;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:2;s:1:"y";i:0;}s:4:"wide";a:2:{s:1:"x";i:2;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:3;s:1:"y";i:0;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:4;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:8;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.oauth.com/itsec-dash-card/1160/</link>
		<pubDate>Mon, 30 Jan 2023 23:07:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/itsec-dash-card/1160/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date><![CDATA[2023-01-30 16:07:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-30 16:07:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-30 23:07:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1160]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>1152</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[itsec-dash-card]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card]]></wp:meta_key>
		<wp:meta_value><![CDATA[malware-scan]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_size]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:4:"wide";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:5:"large";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"medium";a:2:{s:1:"w";i:2;s:1:"h";i:2;}s:6:"mobile";a:2:{s:1:"w";i:2;s:1:"h";i:2;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_position]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:4:"huge";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:4:"wide";a:2:{s:1:"x";i:0;s:1:"y";i:0;}s:5:"large";a:2:{s:1:"x";i:2;s:1:"y";i:2;}s:6:"medium";a:2:{s:1:"x";i:0;s:1:"y";i:2;}s:6:"mobile";a:2:{s:1:"x";i:0;s:1:"y";i:6;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_itsec_dashboard_card_settings]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Differences Between OAuth 1 and 2]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/</link>
		<pubDate>Wed, 17 Aug 2016 16:06:46 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">http://www.oauth.com/?page_id=136</guid>
		<description></description>
		<content:encoded><![CDATA[<p>OAuth 2.0 is a complete rewrite of OAuth 1.0 from the ground up, sharing only overall goals and general user experience. OAuth 2.0 is not backwards compatible with OAuth 1.0 or 1.1, and should be thought of as a completely new protocol.</p>

<p>OAuth 1.0 was largely based on two existing proprietary protocols: Flickr's authorization API and Google's AuthSub. The work that became OAuth 1.0 was the best solution based on actual implementation experience at the time. Over a few years of many companies building OAuth 1 APIs, and many developers writing code to consume the APIs, the community learned where the protocol was proving challenging to people. Several specific areas were identified as needing improvement because they were either limiting the abilities of the APIs, or were too challenging to implement.</p>

<p>OAuth 2.0 represents years of discussions between a wide range of companies and individuals including Yahoo!, Facebook, Salesforce, Microsoft, Twitter, Deutsche Telekom, Intuit, Mozilla and Google.</p>

<p>This section covers the major differences between OAuth 1.0 and 2.0, and the motivations behind them. If you are familiar with OAuth 1.0, this is a good starting point to quickly understand the major changes in OAuth 2.0.</p>

<h3>Terminology and Roles</h3>

<p>Where OAuth 2.0 defines four roles, (client, authorization server, resource server, and resource owner,) OAuth 1 uses a different set of terms for these roles. The OAuth 2.0 "client" is known as the "consumer," the "resource owner" is known simply as the "user," and the "resource server" is known as the "service provider". OAuth 1 also does not explicitly separate the roles of resource server and authorization server.</p>

<p>The terms "two-legged" and "three-legged" have been replaced by the idea of grant types, such as the <a href="/oauth2-servers/access-tokens/client-credentials/">Client Credentials</a> grant type and the <a href="/oauth2-servers/access-tokens/authorization-code-request/">Authorization Code</a> grant type.</p>

<ul>
  <li><a href="/oauth2-servers/additional-resources/authentication-and-signatures/">Authentication and Signatures</a></li>
  <li><a href="/oauth2-servers/additional-resources/user-experience-alternative-token-issuance-options/">User Experience and Alternative Token Issuance Options</a></li>
  <li><a href="/oauth2-servers/additional-resources/performance-at-scale/">Performance at Scale</a></li>
  <li><a href="/oauth2-servers/additional-resources/bearer-tokens/">Bearer Tokens</a></li>
  <li><a href="/oauth2-servers/additional-resources/short-lived-tokens-long-lived-authorizations/">Short-lived tokens with Long-lived authorizations</a></li>
  <li><a href="/oauth2-servers/additional-resources/separation-of-roles/">Separation of Roles</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 09:06:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 16:06:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-14 11:57:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-14 18:57:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[differences-between-oauth-1-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Differences Between OAuth 1 and 2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"s9da34","cols":[{"element_id":"vxfu35","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Making Authenticated Requests]]></title>
		<link>https://www.oauth.com/oauth2-servers/making-authenticated-requests/</link>
		<pubDate>Wed, 17 Aug 2016 17:25:52 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=138</guid>
		<description></description>
		<content:encoded><![CDATA[Regardless of which grant type you used or whether you used a client secret, you now have an OAuth 2.0 Bearer Token you can use with the API.

    <p>The access token is sent to the service in the HTTP <code>Authorization</code> header prefixed by the text <code>Bearer</code>. Historically, some services allowed the token to be sent in the post body parameter or even the GET query string, but there are downsides to these approaches and for the most part modern implementations will use only the HTTP header method.</p>

    <p>When passing in the access token in an HTTP header, you should make a request like the following:</p>

[text]
POST /resource/1/update HTTP/1.1
Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia&quot;
Host: api.authorization-server.com

description=Hello+World[/text]


    <p>The access token is not intended to be parsed or understood by your application. The only thing your application should do with it is use it to make API requests. Some services will use structured tokens like JWTs as their access tokens, described in <a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/" class="chapter">Self-Encoded Access Tokens</a> but the client does not need to worry about decoding the token in this case.</p>

    <p>In fact, attempting to decode the access token is dangerous, as the server makes no guarantees that access tokens will always continue to be in the same format. It's entirely possible that the next time you get an access token from the service, it will be in a different format. The thing to keep in mind is that access tokens are opaque to the client, and should only be used to make API requests and not interpreted themselves.</p>

    <p>If you are trying to find out whether your access token has expired, you can either store the expiration lifetime that was returned when you first got the access token, or just try to make the request anyway, and get a new access token if the current one has expired. In practice, there isn't much of a difference. While preemptively refreshing the access token can save an HTTP request, you still need to handle the case when an API call reports an expired token before you were expecting it to expire, since access tokens can expire for many reasons beyond just their expected lifetime.</p>

    <p>See below for more details on getting new access tokens using refresh tokens.</p>

If you're trying to find out more information about the user who signed in, you should read the API docs of the particular service to find out their recommendation. For example, Google's API uses OpenID Connect to provide a userinfo endpoint that can return info about the user given an access token, or you can get the user's information from an ID token instead. We walk through a complete example of the userinfo endpoint workflow in <a href="/oauth2-servers/oauth2-clients/signing-in-with-google/" class="chapter end">Signing in with Google</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:25:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:25:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:33:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:33:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[making-authenticated-requests]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Making Authenticated Requests]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"m7or43","cols":[{"element_id":"thmc43","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Client Registration]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/</link>
		<pubDate>Wed, 17 Aug 2016 17:30:15 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=140</guid>
		<description></description>
		<content:encoded><![CDATA[/oauth2-servers/client-registration/registering-new-application/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:30:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:30:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 13:44:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 20:44:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[client-registration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[template-redirect.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57b1f03d9957e]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Client Registration]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Registering a New Application]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/registering-new-application/</link>
		<pubDate>Wed, 17 Aug 2016 17:31:34 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=142</guid>
		<description></description>
		<content:encoded><![CDATA[When a developer comes to your website, they will need a way to create a new application and obtain credentials. Typically you will have them create a developer account, or create an account on behalf of their organization, before they can create an application.

While the OAuth 2.0 spec doesn't require you to collect any application information in particular before granting credentials, most services collect basic information about an app, such as the app name and an icon, before issuing the <code>client_id</code> and <code>client_secret</code>. It is, however, important that you require the developer to register one or more redirect URLs for the application for security purposes. This is explained in more detail in <a href="/oauth2-servers/redirect-uris/">Redirect URLs</a>.

Typically services collect information about an application such as:
<ul>
 	<li>Application name</li>
 	<li>An icon for the application</li>
 	<li>URL to the application's home page</li>
 	<li>A short description of the application</li>
 	<li>A link to the application's privacy policy</li>
 	<li>A list of redirect URLs</li>
</ul>
Below is GitHub's interface for registering an application. In it, they collect the application name, home page URL, the callback URL, and an optional description.

[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2016/08/github_create_new_application.png" alt="Creating a new application on Github" width="650" height="462" /> Create a new application on GitHub[/caption]

It is a good idea to specify to your developers whether the information you are collecting from them will be displayed to end users, or whether it is for internal use only.

Foursquare's application registration page asks for similar information, but they additionally ask for a short tagline and a privacy policy URL. These are displayed to the user in the authorization prompt.

[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2016/08/foursquare_create_new_application.png" alt="Creating a new application on Foursquare" width="650" height="480" /> Create a new application on Foursquare[/caption]

Due to the security considerations with using the legacy Implicit grant type, some services (such as Instagram) disable this grant type for new applications by default, and require that the developer explicitly enables it in the application's settings, as shown below.

[caption id="" align="aligncenter" width="601"]<img src="/wp-content/uploads/2016/08/instagram_create_new_application.png" alt="Creating a new application on Instagram" width="601" height="531" /> Create a new application on Instagram[/caption]

Instagram provides a note instructing developers to not name their applications with words that might make the app appear to be from Instagram. This is also a good place to include a link to the API Terms of Use.

Your service can also make the developer choose the type of application they are creating, (public or confidential), or choose a description of the app platform which may be more relatable to the developer (web app, mobile app, SPA, etc). Your service should only issue a client secret to confidential applications, and disallow use of the Implicit grant for those applications as well.

[caption id="" align="aligncenter" width="600"]<img src="/wp-content/uploads/2021/12/okta_new_application.png" alt="Creating a new application in Okta" width="600" /> Create a new application in Okta[/caption]

As shown in the screenshot above, Okta lets the developer choose which platform the application is for (Native, Single-Page App, Web, or Service) before collecting information about the app. Depending on the value the developer chooses here, that will determine things like which grant types are enabled for the app, and whether the app is issued a client secret.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:31:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:31:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:56:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:56:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[registering-new-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>140</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[8.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Registering a New Application]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"zo3t59","cols":[{"element_id":"7qph59","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The Client ID and Secret]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/</link>
		<pubDate>Wed, 17 Aug 2016 17:34:38 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=144</guid>
		<description></description>
		<content:encoded><![CDATA[At this point, you've built the application registration screen, you're ready to let the developer register the application. When the developer registers the application, you'll need to generate a client ID and optionally a secret. When generating these strings, there are some important things to consider in terms of security and aesthetics.

<h2>Client ID</h2>
The <code>client_id</code> is a public identifier for apps. Even though it's public, it's best that it isn't guessable by third parties, so many implementations use something like a 32-character hex string. If the client ID is guessable, it makes it slightly easier to craft phishing attacks against arbitrary applications. It must also be unique across all clients that the authorization server handles.

Here are some examples of client IDs from services that support OAuth 2.0:
<ul>
 	<li>Foursquare: <code>ZYDPLLBWSK3MVQJSIYHB1OR2JXCY0X2C5UJ2QAR2MAAIT5Q</code></li>
 	<li>Github: <code>6779ef20e75817b79602</code></li>
 	<li>Google: <code>292085223830.apps.googleusercontent.com</code></li>
 	<li>Instagram: <code>f2a1ed52710d4533bde25be6da03b6e3</code></li>
 	<li>SoundCloud: <code>269d98e4922fb3895e9ae2108cbb5064</code></li>
 	<li>Windows Live: <code>00000000400ECB04</code></li>
        <li>Okta: <code>0oa2hl2inow5Uqc6c357</code></li>
</ul>
If the developer is creating a "public" app (a mobile or single-page app), then you should not issue a <code>client_secret</code> to the app at all. This is the only way to ensure the developer won't accidentally include it in their application. If it doesn't exist, it can't be leaked!

Because of this, it's usually a good idea to ask the developer what type of application they are creating when they start. You can present the following options to them, and only issue a secret for "web server" or "service" apps.
<ul>
 	<li>Web-server app</li>
 	<li>Single-page app</li>
 	<li>Mobile or native app</li>
 	<li>Service app</li>
</ul>

Of course there's nothing stopping the developer from choosing the wrong option, but by taking the initiative of asking the developer what kind of app the credentials will be used by, you can help reduce the likelihood of leaked secrets.

<h2>Client Secret</h2>
The <code>client_secret</code> is a secret known only to the application and the authorization server. It is essential the application's own password. It must be sufficiently random to not be guessable, which means you should avoid using common UUID libraries which often take into account the timestamp or MAC address of the server generating it. A great way to generate a secure secret is to use a cryptographically-secure library to generate a 256-bit value and then convert it to a hexadecimal representation.

In PHP, you can use the <code>random_bytes</code> function and convert to a hex string:

[php]bin2hex(random_bytes(32));[/php]

In Ruby, you can use the SecureRandom library to generate a hex string:

[ruby]require 'securerandom'
SecureRandom.hex(32)[/ruby]

It is critical that developers never include their <code>client_secret</code> in public (mobile or browser-based) clients. To help developers avoid accidentally doing this, it's best to make the client secret visually different from the ID. This way when developers copy and paste the ID and secret, it is easy to recognize which is which. Usually using a longer string for the secret is a good way to indicate this, or prefixing the secret with "secret" or "private".

<h2>Storing and Displaying the Client ID and Secret</h2>
For each registered application, you'll need to store the public <code>client_id</code> and the private <code>client_secret</code>. Because these are essentially equivalent to a username and password, you should not store the secret in plain text, instead only store an encrypted or hashed version, to help reduce the likelihood of the secret leaking.

When you issue the client ID and secret, you will need to display them to the developer. Most services provide a way for developers to retrieve the secret of an existing application, although some will only display the secret one time and require the developer store it themselves immediately. If you display the secret only one time, you can store a hashed version of it to avoid storing the plaintext secret at all.

If you store the secret in a way that can be displayed later to developers, you should take extra precautions when revealing the secret. A common way to protect the secret is to insert a "re-authorization" prompt before the developer can view the secret.

[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2016/08/github_confirm_password.png" alt="GitHub reauthorization prompt" width="650" height="434" /> GitHub asks to confirm your password when making sensitive changes[/caption]

The service asks the developer to confirm their password before it will reveal the secret. This is commonly seen in Amazon or GitHub's websites when you attempt to view or update sensitive information.

[caption id="" align="aligncenter" width="500"]<img src="/wp-content/uploads/2016/08/dropbox_show_secret.png" alt="Dropbox 'show secret' confirmation" width="500" height="148" /> Dropbox hides the secret until it is clicked[/caption]

Additionally, obscuring the secret on the application detail page until the developer clicks "show" is a good way to prevent accidental leakage of the secret.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:34:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:34:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:01:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:01:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[client-id-secret]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>140</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[8.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Client ID and Secret]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"e7cc436","cols":[{"element_id":"97qo436","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Deleting Applications and Revoking Secrets]]></title>
		<link>https://www.oauth.com/oauth2-servers/client-registration/deleting-applications-revoking-secrets/</link>
		<pubDate>Wed, 17 Aug 2016 17:36:57 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=146</guid>
		<description></description>
		<content:encoded><![CDATA[Developers will need a way to delete (or at least deactivate) their applications. It is also a good idea to provide a way for the developer to revoke and generate a new client secret for their apps.

<h3>Deleting Applications</h3>

When the developer deletes an application, the service should inform the developer about the consequences of deleting the application. For example, GitHub tells the developer that all access tokens will be revoked, and how many users will be affected.

[caption id="" align="aligncenter" width="469"]<img src="/wp-content/uploads/2016/08/github_delete_application.png" alt="GitHub delete application prompt" width="469" height="230" /> GitHub asks to confirm deleting an application[/caption]

Deleting an application should immediately <a href="/oauth2-servers/listing-authorizations/revoking-access/">revoke all access tokens</a> and other credentials that were issued to the application such as pending authorization codes and refresh tokens.

<h3>Revoking Secrets</h3>
The service should provide the developer with a way to reset the client secret. In the case when the secret is accidentally exposed, the developer needs a way to ensure the old secret can be revoked. Revoking the secret should not necessarily invalidate users' access tokens, since the developer could always delete the application if they wanted to also invalidate all user tokens.

[caption id="" align="aligncenter" width="474"]<img src="/wp-content/uploads/2016/08/github_reset_client_secret.png" alt="GitHub reset client secret prompt" width="474" height="272" /> GitHub asks to confirm resetting an application's secret[/caption]

Resetting the secret should keep all existing access tokens active. However this does mean that any deployed applications using the old secret will be unable to refresh the access token using the old secret. The deployed applications will need to update their secrets before they will be able to use a refresh token.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:36:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:36:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:02:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:02:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[deleting-applications-revoking-secrets]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>140</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[8.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Deleting Applications and Revoking Secrets]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"eez7793","cols":[{"element_id":"i05o793","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/</link>
		<pubDate>Wed, 17 Aug 2016 17:38:22 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=148</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The authorization interface is the screen users see when granting applications access to their account. The following sections cover how to build the authorization screen, what components to include in the interface, and how best to present the interface to end users.</p>

<p>When implementing an OAuth server, you are enabling a developer community to build applications that leverage your platform, allowing applications to access and potentially modify private user content, or act on behalf of users. Because of this, you need to ensure you are empowering your users with as much information as possible to protect their accounts and ensure they are informed as to what applications are doing with their accounts.</p>

<ul>
<li><a href="/oauth2-servers/authorization/the-authorization-request/">The Authorization Request</a>
<li><a href="/oauth2-servers/authorization/requiring-user-login/">Requiring User Login</a>
<li><a href="/oauth2-servers/authorization/the-authorization-interface/">The Authorization Interface</a>
<li><a href="/oauth2-servers/authorization/the-authorization-response/">The Authorization Response</a>
<li><a href="/oauth2-servers/authorization/security-considerations/">Security Considerations</a>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:38:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:38:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 13:35:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 20:35:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The Authorization Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/the-authorization-request/</link>
		<pubDate>Wed, 17 Aug 2016 17:48:47 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=161</guid>
		<description></description>
		<content:encoded><![CDATA[  <p>Clients will direct a user's browser to the authorization server to begin the OAuth process. Clients may use either the authorization code grant type or the implicit grant. Along with the type of grant specified by the <code>response_type</code> parameter, the request will have a number of other parameters to indicate the specifics of the request.</p>
  
  <p><a href="/oauth2-servers/oauth2-clients/server-side-apps/">Server-Side Apps</a> describes how clients will build the authorization URL for your service. The first time the authorization server sees the user will be this authorization request, the user will be directed to the server with the query parameters the client has set. At this point, the authorization server will need to validate the request and present the authorization interface, allowing the user to approve or deny the request.</p>

  <h2>Request Parameters</h2>

  <p>The following parameters are used to begin the authorization request. For example, if the authorization server URL is <code>https://authorization-server.com/auth</code> then the client will craft a URL like the following and direct the user's browser to it:</p>

[text]https://authorization-server.com/auth?response_type=code
&amp;client_id=29352735982374239857
&amp;redirect_uri=https://example-app.com/callback
&amp;scope=create+delete
&amp;state=xcoivjuywkdkhvusuye3kch[/text]

  <h4>response_type</h4>

  <p><code>response_type</code> will be set to <code>code</code>, indicating that the application expects to receive an authorization code if successful.</p>

  <h4><code>client_id</code></h4>

  <p>The <code>client_id</code> is the public identifier for the app.</p>

  <h4><code>redirect_uri</code> (optional)</h4>

  <p>The <code>redirect_uri</code> is not required by the spec, but your service should require it. This URL must match one of the URLs the developer registered when creating the application, and the authorization server should reject the request if it does not match.</p>

  <h4><code>scope</code> (optional)</h4>

  <p>The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user.</p>

  <h4><code>state</code> (recommended)</h4>

  <p>The <code>state</code> parameter is used by the application to store request-specific data and/or prevent CSRF attacks. The authorization server must return the unmodified state value back to the application.</p>

    <h4>PKCE</h4>

    <p>If the authorization server supports the PKCE extension (described in <a href="/oauth2-servers/pkce/" class="chapter">PKCE</a>) then the <code>code_challenge</code> and <code>code_challenge_method</code> parameters will also be present. These must be remembered by the authorization server between issuing the authorization code and issuing the access token.</p>
  

  <h2>Verifying the Authorization Request</h2>

  <p>The authorization server must first verify that the <code>client_id</code> in the request corresponds to a valid application.</p>

    <p>If your server allows applications to register more than one redirect URL, then there are two steps to validating the redirect URL. If the request contains a <code>redirect_uri</code> parameter, the server must confirm it is a valid redirect URL for this application. If there is no <code>redirect_uri</code> parameter in the request, and only one URL was registered, the server uses the redirect URL that was previously registered. Otherwise, if no redirect URL is in the request, and no redirect URL has been registered, this is an error.</p>

    <p>If the <code>client_id</code> is invalid, the server should reject the request immediately and display the error to the user rather than redirecting the user back to the application.</p>

  <h3 id="invalid-redirect-uri">Invalid Redirect URL</h3>

    <p>If the authorization server detects a problem with the redirect URL, it needs to inform the user of the problem instead of redirecting the user. The redirect URL could be invalid for a number of reasons, including:</p>

  <ul>
    <li>the redirect URL parameter is missing</li>
    <li>the redirect URL parameter was invalid, such as if it was a string that does not parse as a URL</li>
    <li>the redirect URL does not match one of the registered redirect URLs for the application</li>
  </ul>

  <p>In these cases, the authorization server should display an error to the user informing them of the problem. The server must not redirect the user back to the application. This avoids what is known as an "<a href="https://oauth.net/advisories/2014-1-covert-redirect/">open redirector attack</a>." The server should only redirect the user to the redirect URL if the redirect URL has been registered.</p>

  <h3 id="other-errors">Other Errors</h3>

  <p>All other errors should be handled by redirecting the user to the redirect URL with an error code in the query string. See the <a href="/oauth2-servers/authorization/the-authorization-response/">Authorization Response</a> section for details on how to respond with an error.</p>

  <p>If the request is missing the <code>response_type</code> parameter, or the value of that parameter is anything besides <code>code</code> or <code>token</code>, the server can return an <code>invalid_request</code> error.</p>

  <p>Since the authorization server may require clients to specify if they are public or confidential, it can reject authorization requests that aren't allowed. For example, if the client specified they are a confidential client, the server can reject a request that uses the token grant type. When rejecting for this reason, use the error code <code>unauthorized_client</code>.</p>

  <p>The authorization server should reject the request if there are scope values that it doesn't recognize. In this case, the server can redirect to the callback URL with the <code>invalid_scope</code> error code.</p>

  <p>The authorization server needs to store the "state" value (and PKCE values) for this request in order to include it in the authorization response. The server must not modify or make any assumptions about what the state value contains, since it is purely for the benefit of the client.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:48:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:48:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:06:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:06:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-authorization-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>148</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Authorization Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"jxiy381","cols":[{"element_id":"26w1382","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Requiring User Login]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/requiring-user-login/</link>
		<pubDate>Wed, 17 Aug 2016 17:51:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=164</guid>
		<description></description>
		<content:encoded><![CDATA[The first thing the user will see after clicking the application's "sign in" or "connect" button is your authorization server UI. It's up to the authorization server to decide whether to require the user log in each time they visit the authorization screen, or keep the user signed in for some period of time. If the authorization server remembers the user in between requests, then it may still need to ask the user's permission to authorize the application on future visits.

Typically sites like Twitter or Facebook expect their users are signed in most of the time, so they provide a way for their authorization screens to give the user a streamlined experience by not requiring them to log in each time. However, based on the security requirements of your service as well as that of the third-party applications, it may be desirable to require or give developers the option to require the user to log in each time they visit the authorization screen.

In Google's API, applications can add <code>prompt=login</code> to the authorization request, which causes the authorization server to force the user to sign in again before it will show the authorization prompt.

In any case, if the user is signed out, or doesn't yet have an account on your service, you'll need to provide a way for them to sign in or create an account on this screen.

[caption id="" align="aligncenter" width="650"]<img class="" src="/wp-content/uploads/2016/08/twitter_logged_out_auth_screen.png" alt="" width="650" height="532" /> Logged-out view of Twitter's authorization screen[/caption]

Authenticating the user can be done any way you wish, as this is not specified in the OAuth 2.0 spec. Most services use a traditional username/password login to authenticate their users, but this is by no means the only way you can approach the problem. In enterprise environments, a common technique is to use SAML to leverage an existing authentication mechanism at the organization, while avoiding creating another username/password database.

This is also the opportunity the authorization server has to require multifactor authentication from the user. After authenticating with the user's primary username and password, the authorization server can require a second factor such as WebAuthn or a USB security key. The benefit of this pattern is the applications do not need to be aware of whether multifactor authentication is being used or required, since that happens entirely between the user and the authorization server without being visible to the application.

Once the user authenticates with the authorization server, it can continue to process the authorization request and redirect the user back to the application. Sometimes the server will consider a successful login to also mean that the user authorized the application. In this case, the authorization screen with the login prompt would need to include text that describes the fact that by signing in, the user is approving this authorization request. This would result in the following user flow.

[caption id="attachment_515" align="aligncenter" width="950"]<img class="wp-image-515 size-full" src="https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-04.png" alt="" width="950" height="351" /> User flow for logged-in vs not-logged-in[/caption]

If the authorization server needs to authenticate the user via SAML or with some other internal system, the user flow would look like the following

[caption id="attachment_518" align="aligncenter" width="861"]<img class="wp-image-518 size-full" src="https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-05.png" alt="" width="861" height="247" /> User flow for separate authentication server[/caption]

In this flow, the user is directed back to the authorization server after signing in, where they see the authorization request as they would if they had already been signed in.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:51:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:51:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:07:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:07:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[requiring-user-login]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>148</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Requiring User Login]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"d2vk761","cols":[{"element_id":"u4vr761","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The Authorization Interface]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/the-authorization-interface/</link>
		<pubDate>Wed, 17 Aug 2016 17:52:11 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=166</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2022/05/oauth_authorization_screen.png" alt="" width="650" height="384" /> Example OAuth Authorization Screen[/caption]

The authorization interface is the screen users will see when they are presented with an authorization request from a third-party app. This is often also referred to as the "consent screen" or "permission prompt". Since the user is being asked to grant some level of access to a third-party app, you need to ensure the user has all the information they need to make an informed decision about authorizing the application.

This is typically only needed when the user is logging in to a third-party application rather than a first-party application. For example, when logging in to Gmail, you wouldn't expect Google to ask you whether it's okay for Gmail to know your account info, since both the application (Gmail) and the OAuth server are part of the same company's product. However if you are logging in to a third-party mailing list application that will send emails from your Gmail account, it becomes critical that you as the user are informed about what this third-party application will be granted access to and what it will be able to do with your account.

An authorization interface typically has the following components:

<h3>Website name and logo</h3>

The service should be easily recognizable by the user, since they need to know which service they are granting access to. However you identify your website on your main pages should be consistent with the authorization interface. Typically this is done by showing the application name and logo in a consistent location of the screen, and/or by using a consistent color scheme across the entire website.

<h3>User identification</h3>

If the user is already signed in, you should indicate this to the user. This may be something like showing their name and photo in the top corner of the screen, as you would in the rest of your website.

It is important that the user knows which account they are currently signed in as, in case they manage multiple accounts, so that they don't mistakenly authorize a different user account.

<h3>Application details</h3>

The authorization interface should clearly identify the application that is making the request. In addition to the developer-provided application name, it is usually a good idea to show the website and application's logo as well. This is information you will have collected when the developer registered the application. We discussed this in detail in <a href="/oauth2-servers/client-registration/">Client Registration</a>.

<h3>The requested scope</h3>

The scope values provided in the authorization request should be clearly displayed to the user. The scope values are typically short strings representing certain access, so a more human-readable version should be shown to the user.

For example, if a service defines a scope of "private" to mean read access to private profile data, then the authorization server should say something along the lines of "this application will be able to view your private profile data." If the scope explicitly allows write access, that should also be identified in the description, such as "this application will be able to edit your profile data."

If no scope is present, but your service still grants some basic level of access to a user's account, you should include a message describing what the app will get access to. If omitting scope means the only thing the app gets is user identification, you can include a message to the effect of "this application would like you to sign in" or "this application would like to know your basic profile information."

See <a href="/oauth2-servers/scope/">Scope</a> for more information on how to effectively use scope in your service.

<h3>The requested or effective lifetime</h3>

The authorization server has to make a decision about how long the authorization will be valid, how long the access tokens will last and how long refresh tokens will last.

Most services do not automatically expire authorizations, and instead expect the user to periodically review and revoke access to apps they no longer want to use. However some services provide limited token lifetime by default, and either allow the application to request a longer duration, or force users to re-authorize the app after the authorization is expired.

Whatever your decision about the lifetime of the authorization, you should make it clear to the user how long the app will be able to act on the user's behalf. This can be something as simple as a sentence that says "this application will be able to access your account until you revoke access," or "this application will be able to access your account for one week." See <a href="/oauth2-servers/access-tokens/access-token-lifetime/">Access Token Lifetime</a> for more information about token lifetimes.

<h3>Allow / Deny</h3>

Lastly, the authorization server should provide two buttons to the user, to allow or deny the request. If the user is not logged in, you should provide a login prompt instead of an "allow" button.

If the user approves the request, the authorization server will create a temporary authorization code and redirect the user back to the application. If the user clicks "deny," the server will redirect back to the application with an error code in the URL. The next section goes into details of how this response should be handled.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:52:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:52:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-05-26 16:17:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-05-26 23:17:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-authorization-interface]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>148</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Authorization Interface]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"q8y128","cols":[{"element_id":"aieq29","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The Authorization Response]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/the-authorization-response/</link>
		<pubDate>Wed, 17 Aug 2016 17:52:45 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=168</guid>
		<description></description>
		<content:encoded><![CDATA[Once the user has finished logging in and approving the request, the authorization server is ready to redirect the user back to the application.

<h2>Authorization Code Response</h2>

If the request is valid and the user grants the authorization request, the authorization server generates an authorization code and redirects the user back to the application, adding the authorization code and the application's "state" value to the redirect URL.

<h3>Generating the Authorization Code</h3>

The authorization code must expire shortly after it is issued. The OAuth 2.0 spec recommends a maximum lifetime of 10 minutes, but in practice, most services set the expiration much shorter, around 30-60 seconds. The authorization code itself can be of any length, but the length of the codes should be documented.

Because authorization codes are meant to be short-lived and single-use, you could implement them as self encoded tokens. With this technique, you can avoid storing authorization codes in a database, and instead, encode all of the necessary information into the authorization code itself. You can use either a built-in encryption library of your server-side environment, or a standard such as JSON Web Signature (JWS). However, since this authorization code is only meant to be used by the authorization server, it can often be simpler to implement them as short strings stored in a server-side cache that's accessible to the authorization endpoint and token endpoint.

In any case, the information that will need to be associated with the authorization code is the following.

<ul>
  <li><b><code>client_id</code></b> - The client ID (or other client identifier) that requested this code</li>
  <li><b><code>redirect_uri</code></b> - The redirect URL that was used. This needs to be stored since the access token request must contain the same redirect URL for <a href="/oauth2-servers/redirect-uris/redirect-uri-validation/">verification</a> when issuing the access token.</li>
  <li><b>User info</b> - Some way to identify the user that this authorization code is for, such as a user ID.</li>
  <li><b>Expiration Date</b> - The code needs to include an expiration date so that it only lasts a short time.</li>
  <li><b>Unique ID</b> - The code needs its own unique ID of some sort in order to be able to check if the code has been used before. A database ID or a random string is sufficient.</li>
  <li><b>PKCE: <code>code_challenge</code> and <code>code_challenge_method</code></b> - When supporting PKCE, these two values provided by the application need to be stored so that they can be verified when issuing the access token later.</li>
</ul>

Once you've generated the authorization code, either by creating a JWS-encoded string, or by generating a random string and storing the associated information in a database, you'll need to redirect the user to the application's redirect URL specified. The parameters to be added to the query string of the redirect URL are as follows:

<h4><code>code</code></h4>

<p>This parameter contains the authorization code which the client will later exchange for an access token.</p>

<h4><code>state</code></h4>

<p>If the initial request contained a state parameter, the response must also include the exact value from the request. The client will be using this to associate this response with the initial request.</p>

<p>For example, the authorization server redirects the user by sending the following HTTP response.</p>

[text]HTTP/1.1 302 Found
Location: https://example-app.com/redirect?code=g0ZGZmNjVmOWI&amp;state=dkZmYxMzE2[/text]


<h2>Implicit Grant Type Response</h2>

With the Implicit grant (<code>response_type=token</code>) the authorization server generates an access token immediately and redirects to the callback URL with the token and other access token attributes in the fragment.

<p>For example, the authorization server redirects the user by sending the following HTTP response (extra line breaks for display purposes).</p>

[text]
HTTP/1.1 302 Found
Location: https://example-app.com/redirect#access_token=MyMzFjNTk2NTk4ZTYyZGI3
 &amp;state=dkZmYxMzE2
 &amp;token_type=Bearer
 &amp;expires_in=86400[/text]

You can see that this is much more dangerous than issuing a temporary one-time-use authorization code. Since there are many more ways an attacker can steal data out of an HTTP redirect compared to intercepting an HTTPS request, it's much riskier using this option compared to the authorization code flow.

From the authorization server's point of view, at the point it creates the access token and sends the HTTP redirect, it has no way of knowing whether or not the redirect was successful and the correct application has received the access token. It's kind of tossing the access token up into the air and crossing its fingers that the app catches it. This is in contrast to the authorization code method, where even though the authorization server can't guarantee the authorization code wasn't stolen, it can at least prevent a stolen authorization code from being useful by requiring a client secret or the PKCE code verifier. This provides a much greater level of security since the authorization server can now be more confident that it won't be giving access tokens away to attackers.

For these reasons as well as more documented in <a href="https://oauth.net/2/browser-based-apps/">OAuth 2.0 for Browser-Based Apps</a>, it is recommended that the Implicit flow no longer be used.

<h2>Error Response</h2>

    <p>There are two different kinds of errors to handle. The first kind of error is when the developer did something wrong when creating the authorization request. The other kind of error is when the user rejects the request (clicks the "Deny" button).</p>

    <p>If there is something wrong with the syntax of the request, such as the <code>redirect_uri</code> or <code>client_id</code> is invalid, then it's important <b>not</b> to redirect the user and instead you should show the error message directly. This is to avoid letting your authorization server be used as an open redirector.</p>

    <p>If the <code>redirect_uri</code> and <code>client_id</code> are both valid, but there is still some other problem, it's okay to redirect the user back to the redirect URI with the error in the query string.</p>

    <p>When redirecting back to the application to indicate an error, the server adds the following parameters to the redirect URL:</p>

<h4><code>error</code></h4>

<p>a single ASCII error code from the following list:</p>

<ul>
  <li><code>invalid_request</code> - the request is missing a parameter, contains an invalid parameter, includes a parameter more than once, or is otherwise invalid.</li>
  <li><code>access_denied</code> - the user or authorization server denied the request</li>
  <li><code>unauthorized_client</code> - the client is not allowed to request an authorization code using this method, for example if a confidential client attempts to use the implicit grant type.</li>
  <li><code>unsupported_response_type</code> - the server does not support obtaining an authorization code using this method, for example if the authorization server never implemented the implicit grant type.</li>
  <li><code>invalid_scope</code> - the requested scope is invalid or unknown.</li>
  <li><code>server_error</code> - instead of displaying a 500 Internal Server Error page to the user, the server can redirect with this error code.</li>
  <li><code>temporarily_unavailable</code> - if the server is undergoing maintenance, or is otherwise unavailable, this error code can be returned instead of responding with a 503 Service Unavailable status code.</li>
</ul>

<h4><code>error_description</code></h4>

<p>The authorization server can optionally include a human-readable description of the error. This parameter is intended for the developer to understand the error, and is not meant to be displayed to the end user. The valid characters for this parameter are the ASCII character set except for the double quote and backslash, specifically, hex codes 20-21, 23-5B and 5D-7E.</p>

<h4><code>error_uri</code></h4>

<p>The server can also return a URL to a human-readable web page with information about the error. This is intended for the developer to get more information about the error, and is not meant to be displayed to the end user.</p>

<h4><code>state</code></h4>

<p>If the request contained a state parameter, the error response must also include the exact value from the request. The client may use this to associate this response with the initial request.</p>

<h4>Example</h4>

<p>For example, if the user denied the authorization request, the server would construct the following URL and send an HTTP redirect response like the below (newlines in the URL are for illustration purposes).</p>
[text]
HTTP/1.1 302 Found
Location: https://example-app.com/redirect?error=access_denied
 &amp;error_description=The+user+denied+the+request
 &amp;error_uri=https%3A%2F%2Foauth2server.com%2Ferror%2Faccess_denied
 &amp;state=wxyz1234[/text]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:52:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:52:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:11:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:11:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-authorization-response]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>148</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Authorization Response]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"u7bc281","cols":[{"element_id":"btsx281","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Considerations]]></title>
		<link>https://www.oauth.com/oauth2-servers/authorization/security-considerations/</link>
		<pubDate>Wed, 17 Aug 2016 17:53:07 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=170</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Below are some known issues that should be taken into consideration when building an authorization server.</p>

<p>In addition to the considerations listed here, there is more information available in the <a href="https://oauth.net/2/security-considerations/">OAuth 2.0 Thread Model and Security Considerations</a> RFC as well as <a href="https://oauth.net/2/oauth-best-practice/">OAuth 2.0 Security Best Current Practice</a>.</p>


<h2>Phishing Attacks</h2>

One potential attack against OAuth servers is a phishing attack. This is where an attacker makes a web page that looks identical to the service's authorization page, which typically contain username and password fields. Then, through various means, the attacker can trick the user in to visiting the page. Unless the user can inspect the address bar of the browser, the page may look otherwise identical to the genuine authorization page, and the user may enter their username and password.

One way attackers can attempt to trick the user into visiting the counterfeit server is by embedding this phishing page in an embedded web view in a native application. Since embedded web views don't show the address bar, the user then has no way to visually confirm they are on the legitimate site. This is unfortunately common in mobile applications, and often justified by the developer wanting to provide a better user experience by keeping the user in the application through the entire login process. Some OAuth providers encourage third party applications to either open a web browser or launch the provider's native application instead of allowing them to embed an authorization page in a web view.

<h3>Countermeasures</h3>

Ensure the authorization server is served via https to avoid DNS spoofing.

The authorization server should educate developers of the risks of phishing attacks, and can take steps to prevent the page from being embedded in native applications or in iframes.

<p>Users should be educated about the dangers of phishing attacks, and should be taught best practices such as only accessing applications that they trust, and periodically reviewing the list of applications they've authorized to <a href="/oauth2-servers/listing-authorizations/revoking-access/">revoke access</a> to apps they no longer use.</p>

The service may want to validate third-party applications prior to allowing other users to use the application. Services such as Instagram and Dropbox currently do this, where upon initial creation of an application, the app is only usable by the developer or other whitelisted user accounts. After the app is submitted for approval and reviewed, then it can be used by the whole user base of the service. This gives the service a chance to inspect how the application interacts with the service.

<h2>Clickjacking</h2>

In a clickjacking attack, the attacker creates a malicious website in which it loads the authorization server URL in a transparent iframe above the attacker's web page. The attacker's web page is stacked below the iframe, and has some innocuous-looking buttons or links, placed very carefully to be directly under the authorization server's confirmation button. When the user clicks the misleading visible button, they are actually clicking the invisible button on the authorization page, thereby granting access to the attacker's application. This allows the attacker to trick the user into granting access without their knowledge.

<h3>Countermeasures</h3>

<p>This kind of attack can be prevented by ensuring the authorization URL is always loaded directly in a native browser, and not embedded in an iframe. Newer browsers have the ability for the authorization server to set an HTTP header, <code>X-Frame-Options</code>, and older browsers can use common Javascript "frame-busting" techniques.</p>


<h2>Redirect URL Manipulation</h2>

An attacker can construct an authorization URL using a client ID that belongs to a known good application, but set the redirect URL to a URL under the control of the attacker. If the authorization server does not validate redirect URLs, and the attacker uses the "token" response type, the user will be returned to the attacker's application with the access token in the URL. If the client is a public client, and the attacker intercepts the authorization code, then the attacker can also exchange the code for an access token.

Another similar attack is when the attacker can spoof the user's DNS, and the registered redirect is not an https URL. This would allow the attacker to pretend to be the valid redirect URL, and steal the access token that way.

<p>The "Open Redirect" attack is when the authorization server does not require an exact match of the redirect URL, and instead allows an attacker to construct a URL that will redirect to the attacker's website. Whether or not this ends up being used to steal authorization codes or access tokens, this is also a danger in that it can be used to launch other unrelated attacks. More details about the Open Redirect attack can be found at <a href="https://oauth.net/advisories/2014-1-covert-redirect/">https://oauth.net/advisories/2014-1-covert-redirect/</a>.</p>


<h3>Countermeasures</h3>

<p>The authorization server must require that one or more redirect URLs are registered by the application, and only redirect to an exact match of a previously registered URL.</p>

The authorization server should also require that all redirect URLs are https. Since this can sometimes be a burden during development, it is also acceptable to allow non-https redirect URLs while the application is "in development" and can only be accessed by the developer, and then require that the redirect URL is changed to an https URL before the application is published and available to other users.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:53:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:53:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:14:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:14:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-considerations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>148</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[9.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Security Considerations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"4vrn436","cols":[{"element_id":"bmhx436","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Scope]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/</link>
		<pubDate>Wed, 17 Aug 2016 17:58:39 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=174</guid>
		<description></description>
		<content:encoded><![CDATA[Scope is a way to limit an app's access to a user's data. Rather than granting complete access to a user's account, it is often useful to give apps a way to request a more limited scope of what they are allowed to do on behalf of a user.

Some apps only use OAuth in order to identify the user, so they only need access to a user ID and basic profile information. Other apps may need to know more sensitive information such as the user's birthday, or they may need the ability to post content on behalf of the user, or modify profile data. Users will be more willing to authorize an application if they know exactly what the application can and cannot do with their account. Scope is a way to control access and help the user identify the permissions they are granting to the application.

It's important to remember that scope is not the same as the internal permissions system of an API. Scope is a way to limit what an application can do within the context of what a user can do. For example, if you have a user in the "customer" group, and the application is requesting the "admin" scope, the OAuth server is not going to create an access token with the "admin" scope, because that user is not allowed to use that scope themselves.

Scope should be thought of as the application requesting permission from the user who's using the app.

<ul>
<li><a href="/oauth2-servers/scope/defining-scopes/">Defining Scopes</a></li>
<li><a href="/oauth2-servers/scope/user-interface/">User Interface</a></li>
<li><a href="/oauth2-servers/scope/checkboxes/">Checkboxes</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 10:58:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 17:58:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:15:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:15:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[scope]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Scope]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"rwkj313","cols":[{"element_id":"7006313","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Defining Scopes]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/defining-scopes/</link>
		<pubDate>Wed, 17 Aug 2016 18:12:22 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=177</guid>
		<description></description>
		<content:encoded><![CDATA[Scope is a mechanism to let an application request limited access to a user's data.

The challenge when defining scopes for your service is to not get carried away with defining too many scopes. Users need to be able to understand what level of access they are granting to the application, and this will be presented to the user in some sort of list. When presented to the user, they need to actually understand what is going on and not get overwhelmed with information. If you over-complicate it for users, they will just click "ok" until the app works, and ignore any warnings.

<h2 id="read-vs-write">Read vs. Write</h2>

<p>Read vs write access is a good place to start when defining scopes for a service. Typically read access to a user's private profile information is treated with separate access control from apps wanting to update the profile information.</p>

<p>Apps that need to be able to create content on behalf of a user (for example, third-party Twitter apps that post tweets to a user's timeline) need a different level of access from apps that only need to read a user's public data.</p>


<h2 id="restricting-access">Restricting Access to Sensitive Information</h2>

<p>Often a service will have various aspects of a user account that have different levels of security. For example, <a href="https://developer.github.com/v3/oauth/#scopes" class="external">GitHub</a> has a separate scope that allows applications to have access to private repos. By default, applications don't have access to private repos unless they ask for that scope, so users can feel comfortable knowing that only apps they choose can access their private repos belonging to their organization.</p>

<p>GitHub provides a separate scope that allows applications to delete repos, so users can rest assured that random applications can't go around deleting their repos.</p>

<p><a href="https://www.dropbox.com/developers/reference/oauth-guide" class="external">Dropbox</a> provides a way for applications to restrict themselves to only be able to edit files in a single folder. This provides a way that users can try out apps that use Dropbox as a storage or syncing mechanism without worrying about the application potentially having the ability to read all their files.</p>


<h2 id="functionality">Selectively Enabling Access by Functionality</h2>

<p>A great use of scope is to selectively enable access to a user's account based on the functionality needed. For example, Google offers a set of scopes for their various services such as Google Drive, Gmail, YouTube, etc. This means applications that need to access the YouTube API won't necessarily also be able to access the user's Gmail account.</p>

<p>Google's API is a great example of effectively using scope. For a full list of the scopes that the Google OAuth API supports, visit their OAuth 2.0 Playground at <a href="https://developers.google.com/oauthplayground/">https://developers.google.com/oauthplayground/</a></p>


<h2 id="billable">Limiting Access to Billable Resources</h2>

<p>If your service provides an API that may cause the user to incur charges, scope is a great way to protect against applications abusing this.</p>

<p>Let's use an example of a service that provides advanced capabilities that use licensed content, in this case one that provides an API that aggregates demographic data for a given area. The user racks up charges as the service is used, and the cost is based on the size of the area being queried. A user signing in to an app that uses a completely different part of the API would want to ensure this app is not able to use the demographics API, since that would cause that user to incur charges. The service should in this case define a special scope, say, "demographics". The demographics API should only respond to API requests from tokens that contain this scope.</p>

<p>In this example, the demographics API could use the <a href="/oauth2-servers/token-introspection-endpoint/">token introspection endpoint</a> to look up the list of scopes that are valid for this token. If the response does not include "demographics" in the list of scopes, the endpoint would reject the request with an HTTP 403 response.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:12:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:12:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:16:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:16:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[defining-scopes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[10.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Defining Scopes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"frhz817","cols":[{"element_id":"g57f817","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[User Interface]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/user-interface/</link>
		<pubDate>Wed, 17 Aug 2016 18:12:43 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=179</guid>
		<description></description>
		<content:encoded><![CDATA[The interface that the user sees when authorizing an app needs to clearly display the list of scopes that are being requested by the application. The user may not be aware of all of the possibilities of scopes that the service provides, so it's best to make this text as clear and straightforward as possible, avoiding jargon and abbreviations.

If the request grants the application full access to a user's account, or access to a substantial part of their account such as being able to do everything except change their password, the service should make it abundantly clear. 

For example, the first sentence on the Dropbox authorization UI is "Example OAuth App would like access to the files and folders in your Dropbox" with a "Learn More" link that links to a help page describing exactly what access the application will have.

<img class="aligncenter" src="/wp-content/uploads/2016/08/dropbox.png" width="651" height="365" />

The Flickr authorization interface shows three things the user is granting to the app when I sign in, and clearly shows permission the app will <i>not</i> have. The benefit of showing this is the user can be reassured the app they're authorizing won't be able to do potentially destructive operations.

<img class="aligncenter" src="/wp-content/uploads/2016/08/flickr.png" width="651" height="447" />

GitHub has done a great job of providing detailed information about the scopes a user is granting. Each scope requested gets a section on the page with the name, an icon, a short description highlighting whether this is read-only or read-write, and a dropdown to see a more detailed explanation.

<img class="aligncenter" src="/wp-content/uploads/2016/08/github.png" width="650" height="411" />

Google has a single authorization endpoint for all of their services including the Gmail API, Google Drive, Youtube, etc. Their authorization interface displays each scope in a list, and includes an "information" icon you can click to get more information about the particular scope.

<img class="aligncenter" src="/wp-content/uploads/2016/08/google.png" width="650" height="463" />

Clicking the information icon presents an overlay that describes in detail what this scope allows.

<img class="aligncenter" src="/wp-content/uploads/2016/08/google-scope-popup.png" width="650" height="463" />

You can see there are a number of ways you can provide the user with information about the scope of the OAuth grant, and various services have taken quite different approaches. Be sure to consider the privacy and security requirements of your application when deciding what level of detail you will include about the scope.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:12:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:12:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:17:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:17:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-interface]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[10.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[User Interface]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"r9zg215","cols":[{"element_id":"0gae215","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Checkboxes]]></title>
		<link>https://www.oauth.com/oauth2-servers/scope/checkboxes/</link>
		<pubDate>Wed, 17 Aug 2016 18:13:07 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=181</guid>
		<description></description>
		<content:encoded><![CDATA[While seemingly an underused feature, the OAuth 2.0 spec explicitly allows the authorization server to grant an access token with less scope than the application requests. This leaves room for some interesting possibilities.

Before the development of the OAuth 2.0 spec began, OAuth 1 was deployed at Twitter, and the Twitter app ecosystem was growing quickly. When creating a Twitter app, you would choose whether your app needed read+write access or just read access to your users' accounts. This was a mechanism that led to the development of OAuth 2.0's concept of scope. However, this implementation was rather limiting, since apps would either request write access or not, and the user might simply reject the request if they did not want to grant the app write access.

There quickly developed a common anti-pattern of Twitter apps that only used the write access to post a tweet advertising the app. One of the more infamous occurrences of this was in 2010, when the app "Twifficiency," which claimed to "calculate your twitter efficiency based upon your twitter activity" spiraled out of control. You would sign in to the app with your Twitter account, and it would crawl through your past tweets and analyze them. However, it also automatically tweeted out "My Twifficiency score is __%. What's yours?" with a link to the website. Many people were not even aware the app was doing this, or that they had granted this app permission to post to their account. This caused the app to go viral, since the followers of anyone who used the app would see it in their timeline.

Many people were upset about this, and complained loudly on Twitter. Ben Ward, a developer at Yahoo at the time, went one step further, and created a mockup of a potential user interface that could solve this problem, and wrote a brief blog post explaining it. <a href="https://benward.uk/blog/tumblr-968515729">https://benward.uk/blog/tumblr-968515729</a>

<img class="aligncenter" src="/wp-content/uploads/2016/08/benwerd-twitter-checkboxes.png" width="650" height="372" />

In the post, Ward described a user interface that would allow the application to request specific permissions, and the user could choose to grant or not grant each one. This would allow users to sign in to an application but not grant the ability for it to post to their account at first. Later, if the user did want to allow the app to post, the app could provide a mechanism to re-authorize the user on Twitter. Ward was hired at Twitter a few months later.

This post stirred up some discussion among several people involved in the development of the OAuth specs, in a Google Buzz thread which now only exists on archive.org: <a href="http://web.archive.org/web/20100823114908/http://www.google.com/buzz/tantek/5YHAAmztLcD/t-Look-BenWard-schools-Twitter-on-OAuth">http://web.archive.org/web/20100823114908/http://www.google.com/buzz/tantek/5YHAAmztLcD/t-Look-BenWard-schools-Twitter-on-OAuth</a>.

To this day, Twitter still does not provide this kind of granular authorization. However, other services have begun to implement similar things, giving the user more control during the authorization flow rather than making it look like a "click OK to continue" dialog.

<h3 id="facebook">Facebook</h3>

Facebook supports a variation on this idea by providing a simple UI for the initial screen, but allows users to click to edit the scopes the application will be granted, shown below.

<img class="aligncenter" src="/wp-content/uploads/2016/08/facebook.png" width="650" height="349" />

If you click "Edit the info you provide", you are taken to an interface that lists each scope the application requested, and you can un-check them as desired. In the screenshot below, I've chosen to not allow the application to see my list of friends.

<img class="aligncenter" src="/wp-content/uploads/2016/08/facebook-edit-scope.png" width="651" height="347" />

Only the scopes the application requested appear in this list. This provides a better experience for users, since they are able to maintain control and better understand how applications can use their account.

<h3>FitBit</h3>

FitBit tracks many aspects of a user's health, such as step count, heart rate, food and drink consumed, sleep quality, weight, and more. The FitBit API provides access to all this data to third party applications. Because many third-party apps will be reading or writing only certain kinds of data, such as a wifi scale that only needs to write weight entries, FitBit provides granular scopes so that a user can grant access to only certain parts of their profile.

FitBit's authorization screen, shown below allows the user to selectively grant or deny access to each particular scope that the application is requesting.

<img src="https://www.oauth.com/wp-content/uploads/2018/07/fitbit-authorize.png" alt="" width="932" height="976" class="alignnone size-full wp-image-809" />

GitHub has described in <a href="https://developer.github.com/changes/2013-10-04-oauth-changes-coming/">a blog post</a> in 2013 that they have plans for allowing users to edit the scopes, however as of 2018, there has been no follow-up.

Giving your users the ability to choose which scopes are granted is a great way to make people feel more comfortable with using third party apps. A checkbox next to each scope is sufficient, or you can move the controls to a separate screen like Facebook. You'll need to ensure that when you send the access token response, it includes the list of scopes granted if it's different from what the application requested. See <a href="/oauth2-servers/access-tokens/access-token-response/">Access Token Response</a> for more details.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:13:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:13:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:19:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:19:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[checkboxes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[10.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Checkboxes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"f8q6111","cols":[{"element_id":"n7lf112","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redirect URLs]]></title>
		<link>https://www.oauth.com/oauth2-servers/redirect-uris/</link>
		<pubDate>Wed, 17 Aug 2016 18:14:41 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=184</guid>
		<description></description>
		<content:encoded><![CDATA[Redirect URLs are a critical part of the OAuth flow. After a user successfully authorizes an application, the authorization server will redirect the user back to the application. Because the redirect URL will contain sensitive information, it is critical that the service doesn't redirect the user to arbitrary locations.

The best way to ensure the user will only be redirected to appropriate locations is to require the developer to register one or more redirect URLs when they create the application. In these sections we will cover how to handle redirect URLs for mobile applications, how to validate redirect URLs, and how to handle errors.

<ul>
  <li><a href="/oauth2-servers/redirect-uris/redirect-uri-registration/">Redirect URI Registration</a></li>
  <li><a href="/oauth2-servers/redirect-uris/redirect-uris-native-apps/">Redirect URIs for Native Apps</a></li>
  <li><a href="/oauth2-servers/redirect-uris/redirect-uri-validation/">Redirect URI Validation</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:14:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:14:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:19:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:19:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-uris]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Redirect URIs]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"ljf0361","cols":[{"element_id":"8xbg361","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redirect URL Registration]]></title>
		<link>https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uri-registration/</link>
		<pubDate>Wed, 17 Aug 2016 18:15:02 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=186</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In order to avoid exposing users to open redirector attacks, you must require developers register one or more redirect URLs for the application. The authorization server must never redirect to any other location. <a href="/oauth2-servers/client-registration/registering-new-application/">Registering a New Application</a> covers creating a registration form to allow developers to register redirect URLs for their applications.</p>

<p>If an attacker can manipulate the redirect URL before the user reaches the authorization server, they could cause the server to redirect the user to a malicious server which would send the authorization code to the attacker. This is one way attackers can try to intercept an OAuth exchange and steal access tokens. If the authorization endpoint does not limit the URLs that it will redirect to, then it's considered an "open redirector", and can be used in combination with other things to launch attacks that aren't even related to OAuth necessarily.</p>


<h2 id="valid">Valid Redirect URLs</h2>

<p>When you build the form to allow developers to register redirect URLs, you should do some basic validation of the URL that they enter.</p>

<p>Registered redirect URLs may contain query string parameters, but must not contain anything in the fragment. The registration server should reject the request if the developer tries to register a redirect URL that contains a fragment.</p>

<p>Note that for native and mobile apps, the platform may allow a developer to register a URL scheme such as <code>myapp://</code> which can then be used in the redirect URL. This means the authorization server should allow arbitrary URL schemes to be registered in order to support registering redirect URLs for native apps. See <a href="/oauth2-servers/oauth2-clients/mobile-and-native-apps/">Mobile and Native Apps</a> for more information.</p>


<h2 id="per-request">Per-Request Customization</h2>

<p>Often times a developer will think that they need to be able to use a different redirect URL on each authorization request, and will try to change the query string parameters per request. This is not the intended use of the redirect URL, and should not be allowed by the authorization server. The server should <a href="/oauth2-servers/redirect-uris/redirect-uri-validation/">reject any authorization requests</a> with redirect URLs that are not an exact match of a registered URL.</p>

<p>If a client wishes to include request-specific data in the redirect URL, it can instead use the "state" parameter to store data that will be included after the user is redirected. It can either encode the data in the state parameter itself, or use the state parameter as a session ID to store the state on the server.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:15:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:15:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:20:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:20:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-uri-registration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>184</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[11.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Redirect URL Registration]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"mda6914","cols":[{"element_id":"tlws915","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redirect URLs for Native Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uris-native-apps/</link>
		<pubDate>Wed, 17 Aug 2016 18:16:01 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=188</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Native applications are clients installed on a device, such as a desktop application or native mobile application. There are a few things to keep in mind when supporting native apps related to security and user experience.</p>

<p>The authorization endpoint normally redirects the user back to the client's registered redirect URL. Depending on the platform, native apps can either claim a URL pattern, or register a custom URL scheme that will launch the application. For example, an iOS application may register a custom protocol such as <code>myapp://</code> and then use a redirect_uri of <code>myapp://callback</code>.</p>

<h2 id="https-url">App-Claimed https URL Redirection</h2>

<p>Some platforms, (Android, and iOS as of iOS 9), allow the app to override specific URL patterns to launch the native application instead of a web browser. For example, an application could register <code>https://app.example.com/auth</code> and whenever the web browser attempts to redirect to that URL, the operating system launches the native app instead.</p>

<p>If the operating system does support claiming URLs, this method should be used. If the operating system does some level of validation that the developer had control over this web URL, then this allows the identity of the native application to be guaranteed by the operating system. If the operating system does not support this, then the app will have to use a custom URL scheme instead.</p>

<h2 id="custom-scheme">Custom URL Scheme</h2>

<p>Most mobile and desktop operating systems allow apps to register a custom URL scheme that will launch the app when a URL with that scheme is visited from the system browser.</p>

<p>Using this method, the native app starts the OAuth flow as normal, by launching the system browser with the standard authorization code parameters. The only difference is that the redirect URL will be a URL with the app's custom scheme.</p>

<p>When the authorization server sends the <code>Location</code> header intending to redirect the user to <code>myapp://callback#token=....</code>, the phone will launch the application and the app will be able to resume the authorization process, parsing the access token from the URL and storing it internally.</p>

<h3 id="namespaces">Custom URL Scheme Namespaces</h3>

<p>Since there is no centralized method of registering URL schemes, apps have to do their best to choose URL schemes that won't conflict with each other.</p>

<p>Your service can help by requiring the URL scheme to follow a certain pattern, and only allow the developer to register a custom scheme that matches that pattern.</p>

<p>For example, Facebook generates a URL scheme for every app based on the app's client ID. For example, <code>fb00000000://</code> where the numbers correspond to the app's client ID. This provides a reasonably sure method of generating globally unique URL schemes, since other apps are unlikely to use a URL scheme with this pattern.</p>

<p>Another option for apps is to use the reverse domain name pattern with a domain that is under the control of the app's publisher, resulting in a URL scheme of <code>com.example.myapp</code> for example. This is also something that can be enforced by the service if you wish.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:16:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:16:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:21:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:21:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-uris-native-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>184</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[11.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Redirect URLs for Native Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"8tl2269","cols":[{"element_id":"b6oh269","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redirect URL Validation]]></title>
		<link>https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uri-validation/</link>
		<pubDate>Wed, 17 Aug 2016 18:16:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=190</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There are three cases when you'll need to validate redirect URLs.</p>

<ul>
  <li>When the developer registers the redirect URL as part of creating an application</li>
  <li>In the authorization request (both authorization code and implicit grant types)</li>
  <li>When the application exchanges an authorization code for an access token</li>
</ul>


<h3 id="registration">Redirect URL Registration</h3>

<p>As discussed in <a href="/oauth2-servers/client-registration/registering-new-application/">Creating an Application</a>, the service should allow developers to register one or more redirect URLs when creating the application. The only restriction on the redirect URL is that it cannot contain a fragment component. The service must allow developers to register redirect URLs with custom URL schemes, in order to support <a href="/oauth2-servers/redirect-uris/redirect-uris-native-apps/">native applications</a> on some platforms.</p>


<h3 id="authorization-request">Authorization Request</h3>

<p>When the application starts the OAuth flow, it will <a href="/oauth2-servers/authorization/the-authorization-request/">direct the user</a> to your service's authorization endpoint. The request will have several parameters in the URL, including a redirect URL.</p>

<p>At this point, the authorization server must validate the redirect URL to ensure the URL in the request matches one of the registered URLs for the application. The request will also have a <code>client_id</code> parameter, so the service should look up the redirect URLs based on that. It is entirely possible for an attacker to craft an authorization request with one app's client ID and the attacker's redirect URL, which is why registration is required.</p>

<p>The service should look for an exact match of the URL, and avoid matching on only part of the specific URL. (The client can use the state parameter if it needs to <a href="/oauth2-servers/redirect-uris/redirect-uri-registration/#per-request">customize each request</a>.) Simple string matching is sufficient since the redirect URL can't be customized per request. All the server needs to do is check that the redirect URL in the request matches one of the redirect URLs the developer entered when registering their application.</p>

<p>If the redirect URL is not one of the registered redirect URLs, then the server must immediately show an error indicating such, and not redirect the user. This avoids having your authorization server be used as an <a href="https://oauth.net/advisories/2014-1-covert-redirect/">open redirector</a>.</p>


<h3 id="granting-access-tokens">Granting Access Tokens</h3>

<p>The token endpoint will get a request to <a href="/oauth2-servers/access-tokens/authorization-code-request/">exchange an authorization code for an access token</a>. This request will contain a redirect URL as well as the authorization code. As an added measure of security, the server should verify that the redirect URL in this request matches exactly the redirect URL that was included in the initial authorization request for this authorization code. If the redirect URL does not match, the server rejects the request with an error.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:16:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:16:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 12:51:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 19:51:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-uri-validation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>184</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[11.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Redirect URL Validation]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Access Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/</link>
		<pubDate>Wed, 17 Aug 2016 18:17:18 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=194</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Access tokens are the thing that applications use to make API requests on behalf of a user. The access token represents the authorization of a specific application to access specific parts of a user's data.</p>

<p>Access tokens do not have to be of any particular format, although there are different considerations for different options which will be discussed later in this chapter. As far as the client application is concerned, the access token is an opaque string, and it will take whatever the string is and use it in an HTTP request. The resource server will need to understand what the access token means and how to validate it, but applications will never be concerned with understanding what an access token means.</p>

<p>Access tokens must be kept confidential in transit and in storage. The only parties that should ever see the access token are the application itself, the authorization server, and resource server. The application should ensure the storage of the access token is not accessible to other applications on the same device. The access token can only be used over an HTTPS connection, since passing it over a non-encrypted channel would make it trivial for third parties to intercept.</p>

<p>The token endpoint is where apps make a request to get an access token for a user. This section describes how to verify token requests and how to return the appropriate response and errors.</p>

<ul>
  <li><a href="/oauth2-servers/access-tokens/authorization-code-request/">Authorization Code</a></li>
  <li><a href="/oauth2-servers/access-tokens/password-grant/">Password Grant</a></li>
  <li><a href="/oauth2-servers/access-tokens/client-credentials/">Client Credentials</a></li>
  <li><a href="/oauth2-servers/access-tokens/access-token-response/">Access Token Response</a></li>
  <li><a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/">Self-Encoded Access Tokens</a></li>
  <li><a href="/oauth2-servers/access-tokens/access-token-lifetime/">Access Token Lifetime</a></li>
  <li><a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">Refreshing Access Tokens</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:17:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:17:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 14:30:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 21:30:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[access-tokens]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Access Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"zxop850","cols":[{"element_id":"qfiw851","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Code Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/</link>
		<pubDate>Wed, 17 Aug 2016 18:17:38 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=196</guid>
		<description></description>
		<content:encoded><![CDATA[The authorization code grant is used when an application exchanges an authorization code for an access token. After the user returns to the application via the redirect URL, the application will get the authorization code from the URL and use it to request an access token. This request will be made to the token endpoint.

<h2 id="request-parameters">Request Parameters</h2>
The access token request will contain the following parameters.
<h4><code>grant_type</code> (required)</h4>
The <code>grant_type</code> parameter must be set to "authorization_code".
<h4><code>code</code> (required)</h4>
This parameter is the authorization code that the client previously received from the authorization server.
<h4><code>redirect_uri</code> (possibly required)</h4>
If the redirect URI was included in the initial authorization request, the service must require it in the token request as well. The redirect URI in the token request must be an exact match of the redirect URI that was used when generating the authorization code. The service must reject the request otherwise.
<h4><code>code_verifier</code> (required for PKCE support)</h4>
If the client included a <code>code_challenge</code> parameter in the initial authorization request, it must now prove it has the secret used to generate the hash by sending it in the POST request. This is the plaintext string that was used to calculate the hash that was previously sent in the <code>code_challenge</code> parameter.
<h4><code>client_id</code> (required if no other client authentication is present)</h4>
If the client is authenticating via HTTP Basic Auth or some other method, then this parameter is not required. Otherwise, this parameter is required.

If the client was issued a client secret, then the server must authenticate the client. One way to authenticate the client is to accept another parameter in this request, <code>client_secret</code>. Alternately the authorization server can use HTTP Basic Auth. Technically the spec allows the authorization server to support any form of client authentication, and mentions public/private key pair as an option. In practice, most consumer servers support the simpler methods of authenticating clients using either or both of the methods mentioned here. For more advanced methods of authenticating the client, refer to RFC 7523 which defines a method of using a signed JWT as client authentication.

<h3 id="verifying">Verifying the authorization code grant</h3>
After checking for all required parameters, and authenticating the client if the client was issued credentials, the authorization server can continue verifying the other parts of the request.

The server then checks if the authorization code is valid, and has not expired. The service must then verify that the authorization code provided in the request was issued to the client identified. Lastly, the service must ensure the redirect URI parameter present matches the redirect URI that was used to request the authorization code.

For PKCE support, the authorization server should calculate the SHA256 hash of the <code>code_verifier</code> presented in this token request, and compare that with the <code>code_challenge</code> presented in the authorization request. If they match, the authorization server can be confident that it's the same client making this token request that made the original authorization request.

If everything checks out, the service can <a href="/oauth2-servers/access-tokens/access-token-response/">generate an access token</a> and respond.
<h3 id="example">Example</h3>
The following example shows an authorization grant request for a confidential client.

[text]
POST /oauth/token HTTP/1.1
Host: authorization-server.com

grant_type=authorization_code
&amp;code=xxxxxxxxxxx
&amp;redirect_uri=https://example-app.com/redirect
&amp;code_verifier=Th7UHJdLswIYQxwSg29DbK1a_d9o41uNMTRmuH0PM8zyoMAQ
&amp;client_id=xxxxxxxxxx
&amp;client_secret=xxxxxxxxxx
[/text]

See <a href="/oauth2-servers/access-tokens/access-token-response/">Access Token Response</a> for details on the parameters to return when generating an access token or responding to errors.

<h2 id="security-considerations">Security Considerations</h2>
<h4>Preventing replay attacks</h4>
If an authorization code is used more than once, the authorization server must deny the subsequent requests. This is easy to accomplish if the authorization codes are stored in a database, since they can simply be marked as used.

If you are implementing self-encoded authorization codes, as in our example code, you'll need to keep track of the tokens that have been used for the lifetime of the token. One way to accomplish this by caching the code in a cache for the lifetime of the code. This way when verifying codes, we can first check if they have already been used by checking the cache for the code. Once the code reaches its expiration date, it will no longer be in the cache, but we can reject it based on the expiration date anyway.

If a code is used more than once, it should be treated as an attack. If possible, the service should revoke the previous access tokens that were issued from this authorization code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:17:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:17:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:09:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:09:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-code-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Code Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"s32m581","cols":[{"element_id":"l57t581","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Password Grant]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/password-grant/</link>
		<pubDate>Wed, 17 Aug 2016 18:17:57 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=198</guid>
		<description></description>
		<content:encoded><![CDATA[The Password grant is used when the application exchanges the user's username and password for an access token. This is exactly the thing OAuth was created to prevent in the first place, so you should never allow third-party apps to use this grant.

Supporting the Password grant is very limiting, as there is no way to add multifactor authorization to this flow, and your options for detecting brute force attacks are more limited. This flow should not be used in practice.

The latest <a href="https://oauth.net/2/oauth-best-practice/">OAuth 2.0 Security Best Current Practice</a> spec actually recommends against using the Password grant entirely, and it is being removed in the OAuth 2.1 update.

<h3 id="parameters">Request Parameters</h3>

    <p>The access token request will contain the following parameters.</p>

    <ul>
      <li><code>grant_type</code> (required) - The <code>grant_type</code> parameter must be set to "password".</li>
      <li><code>username</code> (required) - The user's username.</li>
      <li><code>password</code> (required) - The user's password.</li>
      <li><code>scope</code> (optional) - The scope requested by the application.</li>
      <li>Client Authentication (required if the client was issued a secret)</li>
    </ul>

    <p>If the client was issued a secret, then the client must authenticate this request. Typically the service will allow either additional request parameters <code>client_id</code> and <code>client_secret</code>, or accept the client ID and secret in the HTTP Basic Auth header.</p>

<h3 id="example">Example</h3>
The following is an example password grant the service would receive.

[text]POST /oauth/token HTTP/1.1
Host: authorization-server.com

grant_type=password
&amp;username=user@example.com
&amp;password=1234luggage
&amp;client_id=xxxxxxxxxx
&amp;client_secret=xxxxxxxxxx[/text]

See <a href="/oauth2-servers/access-tokens/access-token-response/">Access Token Response</a> for details on the parameters to return when generating an access token or responding to errors.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:17:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:17:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:10:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:10:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[password-grant]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Password Grant]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"0ei8405","cols":[{"element_id":"qeh3405","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Client Credentials]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/</link>
		<pubDate>Wed, 17 Aug 2016 18:18:17 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=200</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The Client Credentials grant is used when applications request an access token to access their own resources, not on behalf of a user.</p>

<h2 id="parameters">Request Parameters</h2>

<h4><code>grant_type</code> (required)</h4>

<p>The <code>grant_type</code> parameter must be set to <code>client_credentials</code>.</p>

<h4><code>scope</code> (optional)</h4>

<p>Your service can support different scopes for the client credentials grant. In practice, not many services actually support this.</p>

<h4>Client Authentication (required)</h4>

<p>The client needs to authenticate themselves for this request. Typically the service will allow either additional request parameters <code>client_id</code> and <code>client_secret</code>, or accept the client ID and secret in the HTTP Basic auth header.</p>


<h3 id="example">Example</h3>

<p>The following is an example authorization code grant the service would receive.</p>

[text]POST /token HTTP/1.1
Host: authorization-server.com

grant_type=client_credentials
&amp;client_id=xxxxxxxxxx
&amp;client_secret=xxxxxxxxxx[/text]

<p>See <a href="/oauth2-servers/access-tokens/access-token-response/">Access Token Response</a> for details on the parameters to return when generating an access token or responding to errors.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:18:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:51:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:51:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[client-credentials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Client Credentials]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Access Token Response]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/access-token-response/</link>
		<pubDate>Wed, 17 Aug 2016 18:18:52 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=202</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Successful Response</h2>

<p>If the request for an access token is valid, the authorization server needs to generate an access token (and optional refresh token) and return these to the client, typically along with some additional properties about the authorization.</p>

<p>The response with an access token should contain the following properties:</p>

<ul>
  <li><code>access_token</code> (required) The access token string as issued by the authorization server.</li>
  <li><code>token_type</code> (required) The type of token this is, typically just the string "Bearer".</li>
  <li><code>expires_in</code> (recommended) If the access token expires, the server should reply with the duration of time the access token is granted for.</li>
  <li><code>refresh_token</code> (optional) If the access token will expire, then it is useful to return a refresh token which applications can use to obtain another access token. However, tokens issued with the implicit grant cannot be issued a refresh token.</li>
  <li><code>scope</code> (optional) If the scope the user granted is identical to the scope the app requested, this parameter is optional. If the granted scope is different from the requested scope, such as if the user modified the scope, then this parameter is required.</li>
</ul>

<p>When responding with an access token, the server must also include the additional <code>Cache-Control: no-store</code> HTTP header to ensure clients do not cache this request.</p>

<p>For example, a successful token response may look like the following:</p>
[text]
   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-store

   {
     &quot;access_token&quot;:&quot;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3&quot;,
     &quot;token_type&quot;:&quot;Bearer&quot;,
     &quot;expires_in&quot;:3600,
     &quot;refresh_token&quot;:&quot;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk&quot;,
     &quot;scope&quot;:&quot;create&quot;
   }[/text]

<h3 id="token">Access Tokens</h3>

<p>The format for OAuth 2.0 Bearer tokens is actually described in a separate spec, <a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>. There is no defined structure for the token required by the spec, so you can generate a string and implement tokens however you want. The valid characters in a bearer token are alphanumeric, and the following punctuation characters:</p>

[text]-._~+/[/text]

<p>A simple implementation of Bearer Tokens is to generate a random string and store it in a database along with the associated user and scope information, or more advanced systems may use <a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/">self-encoded tokens</a> where the token string itself contains all the necessary info.</p>



<h2 id="error">Unsuccessful Response</h2>

<p>If the access token request is invalid, such as the redirect URL didn't match the one used during authorization, then the server needs to return an error response.</p>

<p>Error responses are returned with an HTTP 400 status code (unless specified otherwise), with <code>error</code> and <code>error_description</code> parameters. The <code>error</code> parameter will always be one of the values listed below.</p>

<p>
  <ul>
    <li><code>invalid_request</code> - The request is missing a parameter so the server can't proceed with the request. This may also be returned if the request includes an unsupported parameter or repeats a parameter.</li>
    <li><code>invalid_client</code> - Client authentication failed, such as if the request contains an invalid client ID or secret. Send an HTTP 401 response in this case.</li>
    <li><code>invalid_grant</code> - The authorization code (or user's password for the password grant type) is invalid or expired. This is also the error you would return if the redirect URL given in the authorization grant does not match the URL provided in this access token request.</li>
    <li><code>invalid_scope</code> - For access token requests that include a scope (password or client_credentials grants), this error indicates an invalid scope value in the request.</li>
    <li><code>unauthorized_client</code> - This client is not authorized to use the requested grant type. For example, if you restrict which applications can use the Implicit grant, you would return this error for the other apps.</li>
    <li><code>unsupported_grant_type</code> - If a grant type is requested that the authorization server doesn't recognize, use this code. Note that unknown grant types also use this specific error code rather than using the <code>invalid_request</code> above.</li>
  </ul>
</p>

<p>There are two optional parameters when returning an error response, <code>error_description</code> and <code>error_uri</code>. These are meant to give developers more information about the error, not intended to be shown to end users. However, keep in mind that many developers will pass this error text straight on to end users no matter how much you warn them, so it is a good idea to make sure it is at least somewhat helpful to end users as well.</p>

<p>The <code>error_description</code> parameter can only include ASCII characters, and should be a sentence or two at most describing the circumstance of the error. The <code>error_uri</code> is a great place to link to your API documentation for information about how to correct the specific error that was encountered.</p>

<p>The entire error response is returned as a JSON string, similar to the successful response. Below is an example of an error response.</p>

[text]
HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  &quot;error&quot;: &quot;invalid_request&quot;,
  &quot;error_description&quot;: &quot;Request was missing the 'redirect_uri' parameter.&quot;,
  &quot;error_uri&quot;: &quot;See the full API docs at https://authorization-server.com/docs/access_token&quot;
}[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:18:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:18:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:30:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:30:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[access-token-response]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Access Token Response]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"6j20296","cols":[{"element_id":"vevr296","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Self-Encoded Access Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/self-encoded-access-tokens/</link>
		<pubDate>Wed, 17 Aug 2016 18:28:32 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=204</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Self-encoded tokens provide a way to avoid storing tokens in a database by encoding all of the necessary information in the token string itself. The main benefit of this is that API servers are able to verify access tokens without doing a database lookup on every API request, making the API much more easily scalable.</p>

<p>The benefit of OAuth 2.0 Bearer Tokens is that applications don't need to be aware of how you've decided to implement access tokens in your service. This means it's possible to change your implementation later without affecting clients.</p>

<p>If you already have a distributed database system that is horizontally scalable, then you may not gain any benefits by using self-encoded tokens. In fact, using self-encoded tokens if you've already solved the distributed database problem will only introduce new issues, as invalidating self-encoded tokens becomes an additional hurdle.</p>

<p>There are many ways to self-encode tokens. The actual method you choose is only important to your implementation, since the token information is not exposed to external developers.</p>

The most common way to implement self-encoded tokens is to use the JWS spec, creating a JSON-serialized representation of all the data you want to include in the token, and signing the resulting string with a private key known only to your authorization server.

<p><a href="https://datatracker.ietf.org/doc/html/rfc9068" class="external">RFC 9068</a> defines a standard way to use JWTs as access tokens, based on the real-world deployment experience of a number of large OAuth providers. This spec defines a data structure to use when including claims about authentication, authorization, and identity. See <a href="https://oauth.net/2/jwt-access-tokens/">https://oauth.net/2/jwt-access-tokens/</a> for further details.</p>


<h3 id="encoding">JWT Access Token Encoding</h3>

<p>The code below is written in PHP and uses the <a href="https://github.com/firebase/php-jwt">Firebase PHP-JWT</a> library to encode and verify tokens. You'll need to include that library in order to run the sample code</p>

<p>In practice, the authorization server will have a private key it uses for signing tokens, and the resource server would fetch the public key from the authorization server metadata to use to validate the tokens. In this example we generate a new private key each time and validate tokens in the same script. In reality you'd need to store the private key somewhere to use the same key to sign tokens consistently.</p>

[php]
&lt;?php
use \Firebase\JWT\JWT;

# Generate a private key to sign the token.
# The public key would need to be published at the authorization
# server if a separate resource server needs to validate the JWT

$private_key = openssl_pkey_new([
  'digest_alg' =&gt; 'sha256',
  'private_key_bits' =&gt; 1024,
  'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA
]);

# Set the user ID of the user this token is for
$user_id = &quot;1000&quot;;

# Set the client ID of the app that is generating this token
$client_id = 'https://example-app.com';

# Provide the list of scopes this token is valid for
$scope = 'read write';

$token_data = array(

  # Issuer (the authorization server identifier)
  'iss' =&gt; 'https://' . $_SERVER['PHP_SELF'],

  # Expires At
  'exp' =&gt; time()+7200, // Valid for 2 hours

  # Audience (The identifier of the resource server)
  'aud' =&gt; 'api://default',

  # Subject (The user ID)
  'sub' =&gt; $user_id,

  # Client ID
  'client_id' =&gt; $client_id,

  # Issued At
  'iat' =&gt; time(),

  # Identifier of this token
  'jti' =&gt; microtime(true).'.'.bin2hex(random_bytes(10)),

  # The list of OAuth scopes this token includes
  'scope' =&gt; $scope
);
$token_string = JWT::encode($token_data, $private_key, 'RS256');[/php]

This will result in a string such as:

[text]eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodH
RwczovL2F1dGhvcml6YXRpb24tc2VydmVyLmNvbS8iLCJleHAiO
jE2MzczNDQ1NzIsImF1ZCI6ImFwaTovL2RlZmF1bHQiLCJzdWIi
OiIxMDAwIiwiY2xpZW50X2lkIjoiaHR0cHM6Ly9leGFtcGxlLWF
wcC5jb20iLCJpYXQiOjE2MzczMzczNzIsImp0aSI6IjE2MzczMz
czNzIuMjA1MS42MjBmNWEzZGMwZWJhYTA5NzMxMiIsInNjb3BlI
joicmVhZCB3cml0ZSJ9.SKDO_Gu96WeHkR_Tv0d8gFQN1SEdpN8
S_h0IJQyl_5syvpIRA5wno0VDFi34k5jbnaY5WHn6Y912IOmg6t
MO91KlYOU1MNdVhHUoPoNUzYtl_nNab7Ywe29kxgrekm-67ZInD
I8RHbSkL7Z_N9eZz_J8c3EolcsoIf-Dd5n9y_Y[/text]

<p>This token is made up of three components, separated by periods. The first part describes the signature method used. The second part contains the token data. The third part is the signature.</p>

<p>For example, this token's first component is this JSON object:
[javascript]{
   &quot;typ&quot;:&quot;JWT&quot;,
   &quot;alg&quot;:&quot;RS256&quot;
 }[/javascript]
</p>

<p>The second component contains the actual data the API endpoint needs in order to process the request, such as user identification and scope access.
[javascript]{
  &quot;iss&quot;: &quot;https://authorization-server.com/&quot;,
  &quot;exp&quot;: 1637344572,
  &quot;aud&quot;: &quot;api://default&quot;,
  &quot;sub&quot;: &quot;1000&quot;,
  &quot;client_id&quot;: &quot;https://example-app.com&quot;,
  &quot;iat&quot;: 1637337372,
  &quot;jti&quot;: &quot;1637337372.2051.620f5a3dc0ebaa097312&quot;,
  &quot;scope&quot;: &quot;read write&quot;
}[/javascript]
</p>

<p>The two components are then base64-encoded, and the JWT library calculates the RS256 signature of the two strings, then joins all three parts with a period.</p>

<h3 id="decoding">Decoding</h3>

<p>Verifying the access token can be done by using the same JWT library. The library will decode and verify the signature at the same time, and throws an exception if the signature was invalid, or if the expiration date of the token has already passed.</p>

<p>You'll need the public key corresponding to the private key that signed the token. Typically you can fetch this from the authorization server's metadata document, but in this example we will derive the public key from the private key generated earlier.</p>

<div class="note">Note: Anyone can read the token information by base64-decoding the middle section of the token string. For this reason, it's important that you do not store private information or information you do not want a user or developer to see in the token. If you want to hide the token information, you can use the <a href="https://tools.ietf.org/html/rfc7516">JSON Web Encryption</a> spec to encrypt the data in the token.</div>

[php]
$public_key = openssl_pkey_get_details($private_key)['key'];

try {
  # Note: You must provide the list of supported algorithms in order to prevent 
  # an attacker from bypassing the signature verification. See:
  # https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
  $token = JWT::decode($token_string, $jwt_key, ['RS256']);
  $error = false;
} catch(\Firebase\JWT\ExpiredException $e) {
  $token = false;
  $error = 'expired';
  $error_description = 'The token has expired';
} catch(\Firebase\JWT\SignatureInvalidException $e) {
  $token = false;
  $error = 'invalid';
  $error_description = 'The token provided was malformed';
} catch(Exception $e) {
  $token = false;
  $error = 'unauthorized';
  $error_description = $e-&gt;getMessage();
}

if($error) {
  header('HTTP/1.1 401 Unauthorized');
  echo json_encode(array(
    'error'=&gt;$error, 
    'error_description'=&gt;$error_description
  ));
  die();
} else {
  // Now $token has all the data that we encoded in it originally
  print_r($token);
}
[/php]
<p>At this point, the service has all the information it needs such as the user ID, scope, etc, available to it, and didn't have to do a database lookup. Next it can check to make sure the access token hasn't expired, can verify the scope is sufficient to perform the requested operation, and can then process the request.</p>
</section>

<h3 id="invalidating">Invalidating</h3>

<p>Because the token can be verified without doing a database lookup, there is no way to invalidate a token until it expires. You'll need to take additional steps to invalidate tokens that are self-encoded, such as temporarily storing a list of revoked tokens, which is one use of the <code>jti</code> claim in the token. See <a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">Refreshing Access Tokens</a> for more information.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:28:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:28:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-04-03 13:32:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-04-03 20:32:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[self-encoded-access-tokens]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Self-Encoded Access Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"o5ri970","cols":[{"element_id":"004k970","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Access Token Lifetime]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/access-token-lifetime/</link>
		<pubDate>Wed, 17 Aug 2016 18:28:54 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=206</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When your service issues access tokens, you'll need to make some decisions as to how long you want the tokens to last. Unfortunately there is no blanket solution for every service. There are various tradeoffs that come with the different options, so you should choose the option (or combination of options) that best suit your application's need.</p>

<h2 id="short-token-long-refresh">Short-lived access tokens and long-lived refresh tokens</h2>

<p>A common method of granting tokens is to use a combination of access tokens and refresh tokens for maximum security and flexibility. The OAuth 2.0 spec recommends this option, and several of the larger implementations have gone with this approach.</p>

<p>Typically services using this method will issue access tokens that last anywhere from several hours to a couple weeks. When the service issues the access token, it also generates a refresh token that never expires and returns that <a href="/oauth2-servers/access-tokens/access-token-response/">in the response</a> as well. (Note that refresh tokens can't be issued using the Implicit grant.)</p>

<p>When the access token expires, the application can use the refresh token to <a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">obtain a new access token</a>. It can do this behind the scenes, and without the user's involvement, so that it's a seamless process to the user.</p>

<p>The main benefit of this approach is that the service can use <a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/">self-encoded access tokens</a> which can be verified without a database lookup. However, this means there is no way to expire those tokens directly, so instead, the tokens are issued with a short expiration time so that the application is forced to continually refresh them, giving the service a chance to <a href="/oauth2-servers/listing-authorizations/revoking-access/">revoke an application's access</a> if needed.</p>

<p>From the third-party developer's perspective, it is often frustrating to have to deal with refresh tokens. Developers strongly prefer access tokens that don't expire, since it's much less code to deal with. In order to help mitigate these concerns, services will often build the token refreshing logic into their SDK, so that the process is transparent to developers.</p>

<p>In summary, use short-lived access tokens and long-lived refresh tokens when:
  <ul>
    <li>you want to use <a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/">self-encoded access tokens</a></li>
    <li>you want to limit the risk of leaked access tokens</li>
    <li>you will be providing SDKs that can handle the <a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">refresh</a> logic transparently to developers</li>
  </ul>
</p>

<h2 id="short-token-no-refresh">Short-lived access tokens and no refresh tokens</h2>

<p>If you want to ensure users are aware of applications that are accessing their account, the service can issue relatively short-lived access tokens without refresh tokens. The access tokens may last anywhere from the current application session to a couple weeks. When the access token expires, the application will be forced to make the user sign in again, so that you as the service know the user is continually involved in re-authorizing the application.</p>

<p>Typically this option is used by services where there is a high risk of damage if a third-party application were to accidentally or maliciously leak access tokens. By requiring that users are constantly re-authorizing the application, the service can ensure that potential damage is limited if an attacker were to steal access tokens from the service.</p>

<p>By not issuing refresh tokens, this makes it impossible to applications to use the access token on an ongoing basis without the user in front of the screen. Applications that need access in order to continually sync data will be unable to do so under this method.</p>

<p>From the user's perspective, this is the option most likely to frustrate people, since it will look like the user has to continually re-authorize the application.</p>

<p>In summary, use short-lived access tokens with no refresh tokens when:
  <ul>
    <li>you want to the most protection against the risk of leaked access tokens</li>
    <li>you want to force users to be aware of third-party access they are granting</li>
    <li>you don't want third-party apps to have offline access to users' data</li>
  </ul>
</p>


<h2 id="non-expiring">Non-expiring access tokens</h2>

<p>Non-expiring access tokens are the easiest method for developers. If you choose this option, it is important to consider the trade-offs you are making.</p>

<p>It isn't practical to use self-encoded tokens if you want to be able to revoke them arbitrarily. As such, you'll need to store these tokens in some sort of database, so they can be deleted or marked as invalid as needed.</p>

<p>Note that even if the service intends on issuing non-expiring access tokens for normal use, you'll still need to provide a mechanism to expire them under exceptional circumstances, such as if the user explicitly wants to revoke an application's access, or if a user account is deleted.</p>

<p>Non-expiring access tokens are much easier for developers testing their own applications. You can even pre-generate one or more non-expiring access tokens for developers and show it to them on the application details screen. This way they can immediately start making API requests with the token, and not worry about setting up an OAuth flow in order to start testing your API.</p>

<p>In summary, use non-expiring access tokens when:
  <ul>
    <li>you have a mechanism to <a href="/oauth2-servers/listing-authorizations/revoking-access/">revoke access tokens</a> arbitrarily</li>
    <li>you don't have a huge risk if tokens are leaked</li>
    <li>you want to provide an easy authentication mechanism to your developers</li>
    <li>you want third-party applications to have offline access to users' data</li>
  </ul>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:28:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:28:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:44:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:44:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[access-token-lifetime]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Access Token Lifetime]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Refreshing Access Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/access-tokens/refreshing-access-tokens/</link>
		<pubDate>Wed, 17 Aug 2016 18:29:15 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=208</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This section describes how to allow your developers to use refresh tokens to obtain new access tokens. If your service <a href="/oauth2-servers/access-tokens/access-token-response/">issues refresh tokens</a> along with the access token, then you'll need to implement the Refresh grant type described here.</p>

<h2 id="parameters">Request Parameters</h2>

<p>The access token request will contain the following parameters.</p>

<h4><code>grant_type</code> (required)</h4>

<p>The <code>grant_type</code> parameter must be set to "refresh_token".</p>

<h4><code>refresh_token</code> (required)</h4>

<p>The refresh token previously issued to the client.</p>

<h4><code>scope</code> (optional)</h4>

<p>The requested scope must not include additional scopes that were not issued in the original access token. Typically this will not be included in the request, and if omitted, the service should issue an access token with the same scope as was previously issued.</p>

<h4>Client Authentication (required if the client was issued a secret)</h4>

<p>Typically, refresh tokens are only used with confidential clients. However, since it is possible to use the authorization code flow without a client secret, the refresh grant may also be used by clients that don't have a secret. If the client was issued a secret, then the client must authenticate this request. Typically the service will allow either additional request parameters <code>client_id</code> and <code>client_secret</code>, or accept the client ID and secret in the HTTP Basic auth header. If the client does not have a secret, then no client authentication will be present in this request.</p>


<h3 id="verifying">Verifying the refresh token grant</h3>

<p>After checking for all required parameters, and authenticating the client if the client was issued a secret, the authorization server can continue verifying the other parts of the request.</p>

<p>The server then checks whether the refresh token is valid, and has not expired. If the refresh token was issued to a confidential client, the service must ensure the refresh token in the request was issued to the authenticated client.</p>

<p>If everything checks out, the service can <a href="/oauth2-servers/access-tokens/access-token-response/">generate an access token</a> and respond. The server may issue a new refresh token in the response, but if the response does not include a new refresh token, the client assumes the existing refresh token will still be valid.</p>



<h3 id="example">Example</h3>

<p>The following is an example refresh grant the service would receive.</p>
[text]POST /oauth/token HTTP/1.1
Host: authorization-server.com

grant_type=refresh_token
&amp;refresh_token=xxxxxxxxxxx
&amp;client_id=xxxxxxxxxx
&amp;client_secret=xxxxxxxxxx[/text]

<h3 id="response">Response</h3>

<p>The response to the refresh token grant is the same as when <a href="/oauth2-servers/access-tokens/access-token-response/">issuing an access token</a>. You can optionally issue a new refresh token in the response, or if you don't include a new refresh token, the client assumes the current refresh token will continue to be valid.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:29:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:29:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:43:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:43:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[refreshing-access-tokens]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[12.7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Refreshing Access Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Listing Authorizations]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/</link>
		<pubDate>Wed, 17 Aug 2016 18:40:14 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=210</guid>
		<description></description>
		<content:encoded><![CDATA[Once users have begun to authorize multiple applications, giving many apps access to their account, it becomes necessary to provide a way to allow the user to manage the apps that have access. This is usually presented to the user in an account settings page or an account privacy page.

There is nothing in the OAuth 2.0 spec that requires users be able to revoke accesss or even suggests how to do this, so instead we'll look at several major API providers for inspiration on how to accomplish this.

Most providers have a page which lists all applications the user has authorized to their account. Usually there is some information displayed about the application, and information meant to give context to the user about when and why this application has access.

<h2 id="google">Google</h2>
Google provides a list of applications you've authorized on your account at <a href="https://security.google.com/settings/security/permissions">https://security.google.com/settings/security/permissions</a>.


[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2016/08/google-authorization-list.png" alt="" width="650" height="532" /> List of applications you've authorized to access your Google account[/caption]

The list shows the application icon, name, and a summary of the scope that the application is granted. Clicking on one of them expands that section to show more details.


[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2016/08/google-authorization-details.png" alt="" width="650" height="630" /> Details of one application authorized to access your Google account[/caption]

This view provides a more detailed list of scopes that have been granted, as well as the date that you authorized the application.

<h2 id="twitter">Twitter</h2>
Twitter provides a list of applications you've authorized at <a href="https://twitter.com/settings/applications">https://twitter.com/settings/applications</a>.

[caption id="" align="aligncenter" width="650"]<img src="/wp-content/uploads/2018/07/twitter-authorization-list-1024x719.png" alt="" width="650" height="371" /> List of applications you've authorized to access your Twitter account[/caption]

Twitter shows the scope that was granted (read-only, read/write, read/write/direct messasges), as well as whether the app can see your email address. The list includes the date you authorized the application. This makes it easy for users to revoke credentials from apps they haven't used in a while.

<h2 id="github">GitHub</h2>
GitHub provides a list of applications you've authorized at <a href="https://github.com/settings/applications">https://github.com/settings/applications</a>.

[caption id="" align="aligncenter" width="799"]<img src="/wp-content/uploads/2018/07/github-authorization-list-1024x462.png" alt="" width="799" height="330" /> List of applications you've authorized to access your GitHub account[/caption]

The list that GitHub provides includes a description of the last time the application was used, to give you an idea of whether you can safely revoke an application's credentials if it hasn't been used in a while.

Clicking on an application provides more details about that application's access.

[caption id="" align="aligncenter" width="651"]<img src="/wp-content/uploads/2018/07/github-authorization-details.png" alt="" width="651" height="393" /> Details of one application authorized to access your GitHub account[/caption]

Here you can see the permissions (scope) the application has on your account.

You can find links to <a href="https://indieweb.org/appaccess">other services' authorization pages here</a>.

<h2 id="revoking-access">Revoking Access</h2>

All of these services provide a way for the user to revoke a particular application's access to their account. The next section covers <a href="/oauth2-servers/listing-authorizations/revoking-access/">revoking access</a> in more detail.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:40:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:40:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:37:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:37:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[listing-authorizations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Listing Authorizations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Revoking Access]]></title>
		<link>https://www.oauth.com/oauth2-servers/listing-authorizations/revoking-access/</link>
		<pubDate>Wed, 17 Aug 2016 18:40:37 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=212</guid>
		<description></description>
		<content:encoded><![CDATA[<p>There are a few reasons you might need to revoke an application's access to a user's account.</p>

<ul>
  <li>The user explicitly wishes to revoke the application's access, such as if they've found an application they no longer want to use listed on their <a href="/oauth2-servers/listing-authorizations/">authorizations page</a></li>
  <li>The developer wants to revoke all user tokens for their application</li>
  <li>The developer <a href="/oauth2-servers/client-registration/deleting-applications-revoking-secrets/">deleted their application</a></li>
  <li>You as the service provider have determined an application is compromised or malicious, and want to disable it</li>
</ul>

<p>Depending on how you've implemented generating access tokens, revoking them will work in different ways.</p>

<h3 id="token-database">Token Database</h3>

<p>If you store access tokens in a database, then it is relatively easy to revoke all tokens that belong to a particular user. You can easily write a query that finds and deletes tokens belonging to the user, such as looking in the token table for their <code>user_id</code>. Assuming your <a href="/oauth2-servers/the-resource-server/">resource server</a> validates access tokens by looking them up in the database, then the next time the revoked client makes a request, their token will fail to validate.</p>


<h3 id="self-encoded">Self-Encoded Tokens</h3>

    <p>If you have a truly stateless mechanism of verifying tokens, and your resource server is validating tokens without sharing information with another system, then the only option is to wait for all outstanding tokens to expire, and prevent the application from being able to generate new tokens for that user by blocking any refresh token requests from that client ID. This is the primary reason to use extremely short-lived tokens when you are using self-encoded tokens.</p>

    <p>If you can afford some level of statefulness, you could push a revocation list of token identifiers to your resource servers, and your resource servers can check that list when validating a token. The access token can contain a unique ID (e.g. the <code>jti</code> claim) which can be used to keep track of individual tokens. If you want to revoke a particular token, you would need to put that token's <code>jti</code> into a list somewhere that can be checked by your resource servers. Of course this means your resource servers are no longer doing a purely stateless check, so this may not be an option available for every situation.</p>

    <p>You will also need to invalidate the application's refresh tokens that were issued along with an access token. Revoking the refresh token means the next time the application attempts to refresh the access token, the request for a new access token will be denied.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:40:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:40:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:38:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:38:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[revoking-access]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[13.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Revoking Access]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"6njx191","cols":[{"element_id":"18gv192","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Token Introspection Endpoint]]></title>
		<link>https://www.oauth.com/oauth2-servers/token-introspection-endpoint/</link>
		<pubDate>Wed, 17 Aug 2016 18:41:06 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=214</guid>
		<description></description>
		<content:encoded><![CDATA[<p>When an OAuth 2.0 client makes a request to the resource server, the resource server needs some way to verify the access token. The OAuth 2.0 core spec doesn't define a specific method of how the resource server should verify access tokens, just mentions that it requires coordination between the resource and authorization servers. In some cases, especially with small services, both endpoints are part of the same system, and can share token information internally such as in a database. In larger systems where the two endpoints are on different servers, this has led to proprietary and non-standard protocols for communicating between the two servers.</p>

<p>The <a href="https://datatracker.ietf.org/doc/html/rfc7662">OAuth 2.0 Token Introspection extension</a> defines a protocol that returns information about an access token, intended to be used by resource servers or other internal servers.</p>

    <p>An alternative to token introspection is to use a structured token format that is recognized by both the authorization server and resource server. The <a href="https://datatracker.ietf.org/doc/html/rfc9068" class="external">JWT Profile for OAuth 2.0 Access Tokens</a> is a recent RFC that describes a standardized format for access tokens using JWTs. This enables a resource server to validate access tokens without a network call, by validating the signature and parsing the claims within the structured token itself.</p>

<h2 id="endpoint">Introspection Endpoint</h2>

<p>The token introspection endpoint needs to be able to return information about a token, so you will most likely build it in the same place that the token endpoint lives. The two endpoints need to either share a database, or if you have implemented self-encoded tokens, they will need to share the secret.</p>

<section>
<h2 id="request">Token Information Request</h2>

<p>The request will be a POST request containing just a parameter named "token". It is expected that this endpoint is not made publicly available to developers. Applications should not be allowed to use this endpoint since the response may contain privileged information that developers should not have access to. One way to protect the endpoint is to put it on an internal server that is not accessible from the outside world, or it could be protected with HTTP basic auth.</p>

[text]POST /token_info HTTP/1.1
Host: authorization-server.com
Authorization: Basic Y4NmE4MzFhZGFkNzU2YWRhN

token=c1MGYwNDJiYmYxNDFkZjVkOGI0MSAgLQ[/text]
</section>

<section>
<h2 id="response">Token Information Response</h2>

<p>The Token Introspection Endpoint should respond with a JSON object with the properties listed below. Only the "active" property is required, the rest are optional. Some of the properties in the Introspection spec are specifically for JWT tokens, so we will only cover the basic ones here. You can also add additional properties in the response if you have additional information about a token that may be useful.</p>

<h4><code>active</code></h4>

<p>Required. This is a boolean value of whether or not the presented token is currently active. The value should be "true" if the token has been issued by this authorization server, has not been revoked by the user, and has not expired.</p>

<h4><code>scope</code></h4>

<p>A JSON string containing a space-separated list of scopes associated with this token.</p>

<h4><code>client_id</code></h4>

<p>The client identifier for the OAuth 2.0 client that the token was issued to.</p>

<h4><code>username</code></h4>

<p>A human-readable identifier for the user who authorized this token.</p>

<h4><code>exp</code></h4>

<p>The unix timestamp (integer timestamp, number of seconds since January 1, 1970 UTC) indicating when this token will expire.</p>

<h3>Example Response</h3>

<p>Below is an example of the response that the introspection endpoint would return.</p>
[text]HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{
  &quot;active&quot;: true,
  &quot;scope&quot;: &quot;read write email&quot;,
  &quot;client_id&quot;: &quot;J8NFmU4tJVgDxKaJFmXTWvaHO&quot;,
  &quot;username&quot;: &quot;aaronpk&quot;,
  &quot;exp&quot;: 1437275311
}[/text]
</section>

<section>
<h2 id="error">Error Response</h2>

<p>If the introspection endpoint is publicly accessible, the endpoint must first validate the authentication. If the authentication is invalid, the endpoint should respond with an HTTP 401 status code and an <code>invalid_client</code> response.</p>

[text]HTTP/1.1 401 Unauthorized
Content-Type: application/json; charset=utf-8

{
  &quot;error&quot;: &quot;invalid_client&quot;,
  &quot;error_description&quot;: &quot;The client authentication was invalid&quot;
}[/text]

<p>Any other error is considered an "inactive" token.</p>

<ul>
  <li>The token requested does not exist or is invalid</li>
  <li>The token expired</li>
  <li>The token was issued to a different client than is making this request</li>
</ul>

<p>In any of these cases, it is not considered an error response, and the endpoint returns simply an inactive flag.</p>

[text]HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{
  &quot;active&quot;: false
}[/text]

</section>

<section>
<h2 id="security">Security Considerations</h2>

<p>Using a token introspection endpoint means that any resource server will be relying on the endpoint to determine whether an access token is currently active or not. This means the introspection endpoint is solely responsible for deciding whether API requests will succeed. As such, the endpoint must perform all applicable checks against a token's state, such as checking whether the token has expired, verifying signatures, etc.</p>

<h3>Token Fishing</h3>

<p>If the introspection endpoint is left open and un-throttled, it presents a means for an attacker to poll the endpoint fishing for a valid token. To prevent this, the server must either require authentication of the clients using the endpoint, or only make the endpoint available to internal servers through other means such as a firewall.</p>

<p>Note that the resources servers are also a potential target of a fishing attack, and should take countermeasures such as rate limiting to prevent this.</p>

<h3>Caching</h3>

<p>Consumers of the introspection endpoint may wish to cache the response of the endpoint for performance reasons. As such, it is important to consider the performance and security trade-offs when deciding to cache the values. For example, shorter cache expiration times will result in higher security since the resource servers will have to query the introspection endpoint more frequently, but will result in an increased load on the endpoint. Longer expiration times leave a window open where a token may actually be expired or revoked, but still be able to be used at a resource server for the remaining duration of the cache time.</p>

<p>One way to mitigate this problem is for consumers to never cache the value beyond the expiration time of the token, which would have been returned in the "exp" parameter of the introspection response.</p>

<h3>Limiting Information</h3>

<p>The introspection endpoint does not necessarily need to return the same information for all queries of the same token. For example, two different resource servers (if they authenticate themselves when making the introspection request) may get different views of the state of the token. This can be used to limit the information about the token that is returned to a particular resource server. This makes it possible to have tokens that can be used at multiple resource servers without other servers ever knowing it is possible to be used at any other server.</p>

</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:41:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:41:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:59:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:59:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[token-introspection-endpoint]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Token Introspection Endpoint]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"hoq7730","cols":[{"element_id":"p96y731","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[The Resource Server]]></title>
		<link>https://www.oauth.com/oauth2-servers/the-resource-server/</link>
		<pubDate>Wed, 17 Aug 2016 18:41:38 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=216</guid>
		<description></description>
		<content:encoded><![CDATA[The resource server is the OAuth 2.0 term for your API server. The resource server handles authenticated requests after the application has obtained an access token.

Large scale deployments may have more than one resource server. Google's services, for example, have dozens of resource servers, such as the Google Cloud platform, Google Maps, Google Drive, Youtube, Google+, and many others. Each of these resource servers are distinctly separate, but they all share the same authorization server.

[caption id="" align="aligncenter" width="897"]<img src="/wp-content/uploads/2016/08/google-apis.png" alt="" width="897" height="479" /> Some of Google's APIs[/caption]

Smaller deployments typically have only one resource server, and is often built as part of the same code base or same deployment as the authorization server.

<h2>Verifying Access Tokens</h2>

The resource server will be getting requests from applications with an HTTP <code>Authorization</code> header containing an access token. The resource server needs to be able to verify the access token to determine whether to process the request, and find the associated user account, etc.

If you're using <a href="/oauth2-servers/access-tokens/self-encoded-access-tokens/">self-encoded access tokens</a>, then verifying the tokens can be done entirely in the resource server without interacting with a database or external servers.

If your tokens are stored in a database, then verifying the token is simply a database lookup on the token table.

Another option is to use the <a href="/oauth2-servers/token-introspection-endpoint/">Token Introspection</a> spec to build an API to verify access tokens. This is a good way to handle verifying access tokens across a large number of resource servers, since it means you can encapsulate all of the logic of access tokens in a single server, exposing the information via an API to other parts of the system. The token introspection endpoint is intended to be used only internally, so you will want to protect it with some internal authorization, or only enable it on a server within the firewall of the system.

<h2>Verifying Scope</h2>

The resource server needs to know the list of scopes that are associated with the access token. The server is responsible for denying the request if the scopes in the access token do not include the required scope to perform the designated action.

The OAuth 2.0 spec does not define any scopes itself, nor is there a central registry of scopes. The list of scopes is up to the service to decide for itself. See <a href="/oauth2-servers/scope/">Scope</a> for more information.

    <h2>Expired Tokens</h2>

    <p>If your service uses short-lived access tokens with long-lived refresh tokens, then you'll need to make sure to return the proper error response when an application makes a request with an expired token.</p>

    <p>Return an HTTP 401 response with a <code>WWW-Authenticate</code> header as described below. If your API typically returns JSON responses, then you can also return a JSON body with the same error information.</p>

[text]HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error=&quot;invalid_token&quot;
                  error_description=&quot;The access token expired&quot;
Content-type: application/json

{
  &quot;error&quot;: &quot;invalid_token&quot;,
  &quot;error_description&quot;: &quot;The access token expired&quot;
}[/text]

    <p>This will indicate to clients that their existing access token expired and that they should try to get a new one using their refresh token.</p>


<h2>Error Codes and Unauthorized Access</h2>
If the access token does not allow access to the requested resource, or if there is no access token in the request, then the server must reply with an HTTP 401 response and include a <code>WWW-Authenticate</code> header in the response.

The minimum <code>WWW-Authenticate</code> header includes the string <code>Bearer</code>, indicating that a bearer token is required. The header can also indicate additional information such as a "realm" and "scope". The "realm" value is used in the traditional <a href="https://tools.ietf.org/html/rfc2617">HTTP authentication</a> sense. The "scope" value allows the resource server to indicate the list of scopes required to access the resource, so the application can request the appropriate scope from the user when starting the authorization flow. The response should also include an appropriate "error" value depending on the type of error that occurred.
<ul>
 	<li><code>invalid_request</code> (HTTP 400) - The request is missing a parameter, or is otherwise malformed.</li>
 	<li><code>invalid_token</code> (HTTP 401) - The access token is expired, revoked, malformed, or invalid for other reasons. The client can obtain a new access token and try again.</li>
 	<li><code>insufficient_scope</code> (HTTP 403) - The access token</li>
</ul>

For example:

[text]
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm=&quot;example&quot;,
                  scope=&quot;delete&quot;,
                  error=&quot;insufficient_scope&quot;
[/text]

If the request does not have authentication, then no error code or other error information is necessary.

[text]
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm=&quot;example&quot;
[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:41:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:41:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:43:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:43:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[the-resource-server]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Resource Server]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"yk8m184","cols":[{"element_id":"07s5184","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Creating Documentation]]></title>
		<link>https://www.oauth.com/oauth2-servers/creating-documentation/</link>
		<pubDate>Wed, 17 Aug 2016 18:42:45 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=220</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As you may have noticed after reading through this far, there are many places in the OAuth 2.0 spec where decisions are left up to the implementation. Many of these things were left under-specified in order to allow different implementations to make different decisions based on their own security requirements. The end result is that most OAuth 2.0 implementations are not interoperable, although in practice, many of the implementations have made the same decisions anyway, and are very similar.</p>

<p>Since there are many ways in which implementations can differ, as well as some parts of the process such as registering applications that have to happen manually, building good documentation for your service is essential.</p>

<p>This section covers the things you will need to document in order for a developer to be able to use your API. Some of these items can be documented inline in the appropriate interface (such as the interface developers use for client registration), and some are more appropriate to document in an "overview" section of your API docs.</p>


<h3 id="client-registration">Client Registration</h3>

<p>How do developers register a new client application to obtain a client ID and optionally a secret?</p>

<ul>
  <li>On a web page? Provide a link to the registration page.</li>
  <li>Programmatically? Your service may implement the <a href="https://tools.ietf.org/html/rfc7591">Dynamic Client Registration</a> spec, or have a proprietary API for registering applications</li>
  <li>Do you provide other mechanisms for developers to register applications? You will need to describe other ways to register apps if so.</li>
</ul>

<p>Your service should at a minimum ask developers whether their application is a confidential or public client, and provide a way to register redirect URIs. Aside from those, you should document other information you collect about an application, and indicate which pieces of information are shown to the end-user during the authorization request.</p>

<ul>
  <li>Application name</li>
  <li>Web page about the application</li>
  <li>Description</li>
  <li>Logo or other images</li>
  <li>Web page about the application's terms of use</li>
  <li>Other information?</li>
</ul>


<h3 id="endpoints">Endpoints</h3>

<p>There are two primary endpoints developers will be using during the OAuth process. Your <b><a href="/oauth2-servers/authorization/the-authorization-request/">authorization endpoint</a></b> is where the users will be directed to begin the authorization flow. After the application obtains an authorization code, it will exchange that code for an access token at the <b><a href="/oauth2-servers/access-tokens/authorization-code-request/">token endpoint</a></b>. The token endpoint is also responsible for issuing access tokens for <a href="/oauth2-servers/access-tokens/">other grant types</a>.</p>

<p>You need to let developers know the URLs for these two endpoints they will be using.</p>


<h3 id="client-authentication">Client Authentication</h3>

<p>When client authentication is required in a request, such as in the <a href="/oauth2-servers/access-tokens/authorization-code-request/">Authorization Code grant</a>, there are two ways your service can accept the client ID and secret in the request. Your service can accept the authentication in an HTTP Basic Auth header using the client ID as the username and secret as the password, or by accepting the strings in the post body as <code>client_id</code> and <code>client_secret</code>. It is up to your service whether you want to accept either or both of these methods, so you need to tell your developers how you expect them to include this authentication in requests.</p>

<p>Additionally, your service may support other forms of client authentication, such as a public/private key pair. This is relatively uncommon in currently deployed OAuth 2.0 implementations, but the spec leaves that open as a possibility.</p>

<p>There are no requirements on the maximum or minimum length of client IDs and secrets issued to applications, so it's usually a good idea to let your developers know how big to expect these strings to be, so that they can store them appropriately.</p>


<h3 id="sizes-of-strings">Sizes of Strings</h3>

<p>Since developers won't see an authorization code or access token likely until they've started writing code, you should document the maximum sizes of strings they will be encountering.</p>

<ul>
  <li>Client ID</li>
  <li>Client Secret</li>
  <li>Authorization Code</li>
  <li>Access Token</li>
</ul>


<h3 id="response-types">Response Types</h3>

<p>Which response types does your service support? Typically services will support just the "code" response type for web-based and native apps, but you should make sure to point out whether your service requires PKCE for public clients.</p>


<h3 id="redirect-uris">Redirect URL Restrictions</h3>

<p>Your service may place restrictions on <a href="/oauth2-servers/redirect-uris/redirect-uri-registration/">registered redirect URLs</a> that developers can use. For example, it is common that a service will disallow developers to use non-TLS http endpoints, or restrict those to be used by non-production applications. While supporting custom schemes is important for <a href="/oauth2-servers/redirect-uris/redirect-uris-native-apps/">supporting native apps</a>, some services disallow these as well. You should document any requirements you place on registering redirect URLs.</p>


<h3 id="authorization">Default Scopes</h3>

<p>If the developer does not specify a scope during the authorization request, the service may assume a default scope for that request. If that is the case, you should document what the default scope is.</p>

<p>The authorization server may ignore the scope that the developer requests, or add additional scopes beyond what is requested. The server may also allow the user to <a href="/oauth2-servers/scope/checkboxes/">change the scope</a> from what is requested. If any of these are possible, the service should clearly point that out to developers so that they can account for the access token possibly having different scopes than they had requested.</p>

<p>The service should also document the lifetime of the authorization codes issued, so developers know approximately how long they can expect the codes to last between being issued and being used. The authorization server may also prevent a code from being used more than once, and should document this if so.</p>


<h3 id="access-token-response">Access Token Response</h3>

<p>When you issue an access token, the <a href="/oauth2-servers/access-tokens/access-token-response/">access token response</a> lists a number of parameters that are optional. You should document which of these your service supports, so developers know what to expect.</p>

<p>When does the response include an <code>expires_in</code> parameter? Your service may always include it if the token expires, or your service can document a default expiration developers should expect if this value is not in the response.</p>

<p>Does the response always include the scope of the access token that is granted? It's usually a good idea to return this in the response, but many services leave it out if the granted scope matches the requested scope. Either way, you should document the way your server behaves for this parameter.</p>


<h3 id="refresh-tokens">Refresh Tokens</h3>

<p>One of the more confusing or frustrating aspects for developers of OAuth 2.0 APIs is around <a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">refresh tokens</a>. It's important to make it very clear how your service deals with refresh tokens if at all.</p>

<p>If your access tokens expire, you likely want to support refresh tokens so developers can build applications that continue to have access to users' accounts without the user continually re-authorizing the application.</p>

<p>You should clearly document which of the supported grant types include a refresh token in the response, and under what circumstances.</p>

<p>When your service issues a new access token in response to a refresh token grant, it is possible for your service to issue a new refresh token simultaneously, and expire the previous one. This means refresh tokens rotate out frequently, which may be desirable for your application. If this is the case, ensure developers know this will happen so they don't mistakenly assume the first refresh token they obtain will continue to work indefinitely.</p>


<h3 id="extension-grants">Extension Grants</h3>

<p>In addition to the four basic grant types, <a href="/oauth2-servers/access-tokens/authorization-code-request/">Authorization Code</a>, <a href="/oauth2-servers/access-tokens/password-grant/">Password</a>, <a href="/oauth2-servers/access-tokens/client-credentials/">Client Credentials</a> and <a href="/oauth2-servers/authorization/the-authorization-response/#implicit-grant">Implicit</a>, your service may support additional grant types.</p>

<p>Some grant types are standardized as extensions to OAuth 2.0, such as the <a href="/oauth2-servers/device-flow/">Device Flow</a> and <a href="https://tools.ietf.org/html/draft-campbell-oauth-saml-01">SAML</a>. Some services also implement their own custom grant types, such as when migrating a legacy API to OAuth 2.0. It's important to document the additional grant types your service supports, and provide documentation for how to use them.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:42:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:42:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:01:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:01:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-documentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Creating Documentation]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"izpj154","cols":[{"element_id":"c4i5154","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authentication and Signatures]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/authentication-and-signatures/</link>
		<pubDate>Wed, 17 Aug 2016 18:47:37 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=225</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The majority of failed OAuth 1.0 implementation attempts were unsuccessful due to the cryptographic requirements of the protocol. The complexity of OAuth 1.0 signatures was a major pain point for anyone coming from the simplicity of username/password authentication.</p>

<p>Developers used to be able to quickly write Twitter scripts to do useful things by using just their username and password. With the move to OAuth 1.0, these developers were forced to find, install, and configure libraries in order to make requests to the Twitter API since it requires cryptographic signing of each request.</p>

<p>With the introduction of OAuth 2.0 Bearer tokens, it is again possible to quickly make API calls from a cURL command. The access token is used instead of a username and password.</p>

<p>For example, before OAuth, you may have seen examples in API docs such as:</p>

[shell]curl --user bob:pa55 https://api.example.com/profile[/shell]

<p>With OAuth 1 APIs, it become no longer possible to hard-code an example like this, since the request must be signed with the application's secret. Some services such as Twitter started providing "signature generator" tools in their developer websites so that you could generate a curl command from the website without using a library. For example, the tool on Twitter generates a curl command such as:</p>

[shell]curl --get 'https://api.twitter.com/1.1/statuses/show.json' \
--data 'id=210462857140252672' \
--header 'Authorization: OAuth oauth_consumer_key=&quot;xRhHSKcKLl9VF7fbyP2eEw&quot;, oauth_nonce=&quot;33ec5af28add281c63db55d1839d90f1&quot;, oauth_signature=&quot;oBO19fJO8imCAMvRxmQJsA6idXk%3D&quot;, oauth_signature_method=&quot;HMAC-SHA1&quot;, oauth_timestamp=&quot;1471026075&quot;, oauth_token=&quot;12341234-ZgJYZOh5Z3ldYXH2sm5voEs0pPXOPv8vC0mFjMFtG&quot;, oauth_version=&quot;1.0&quot;'[/shell]

<p>With OAuth 2.0 Bearer Tokens, only the token itself is needed in the request, so the examples again become very simple:</p>

[shell]curl https://api.example.com/profile -H &quot;Authorization: Bearer XXXXXXXXXXX&quot;[/shell]

<p>This provides a good balance between ease of use of APIs and good security practices.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:47:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:47:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:33:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:33:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authentication-and-signatures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authentication and Signatures]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[User Experience and Alternative Token Issuance Options]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/user-experience-alternative-token-issuance-options/</link>
		<pubDate>Wed, 17 Aug 2016 18:48:12 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=227</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>There are two main parts to OAuth 2.0: obtaining authorization by the user (the end result being the application has an access token for that user), and using the access token to make requests on behalf of the user. The methods for obtaining an access token are called <b>flows</b>.</p>

    <p>OAuth 1.0 started out with 3 flows, for web-based applications, desktop clients, and mobile or "limited" devices. However, as the specification evolved, the three flows were merged into one which, in theory, enabled all three client types. In practice, the flow worked fine for web-based applications but provided an inferior experience elsewhere.</p>

    <p>As more sites started using OAuth, especially Twitter, developers realized that the single flow offered by OAuth was very limited and often produced poor user experiences. On the other hand, Facebook Connect offered a richer set of flows suitable for web applications, mobile devices, and game consoles.</p>

    <p>OAuth 2.0 addresses this by defining multiple flows again, called "grant types," with flexibility to support a wide range of application types. There is also a mechanism to develop extensions to handle use cases not previously thought of.</p>

    <p>Server-side apps use the "Authorization Code" grant type with a client secret, which prompts the user to authorize the application, and generates an authorization code that is handed back to the app. The app's server then exchanges the authorization code for an access token. The security of this flow is obtained by the fact that the server-side app uses its secret to exchange the authorization code for an access token.</p>

    <p>Single-page or mobile apps use the same grant type, but don't use the client secret. Instead, the security is in verifying the redirect URL as well as the optional PKCE extension.</p>

    <p>OAuth 2.0 officially defines a "Password" grant type, allowing applications to collect the user's username and password and exchange them for an access token. While this is part of the spec, it is intended to only be used by trusted clients, such as a service's own first-party application. It should not be used by third-party apps as that would allow the third-party app to have access to the username and password of the user.</p>

    <p>The "Client Credentials" grant is used when an application is access its own resources. This grant type is simply exchanging the <code>client_id</code> and <code>client_secret</code> for an access token.</p>

    <p>OAuth 2.0 also supports extension grant types allowing organizations to define their own custom grant types to support additional client types or to provide a bridge between OAuth and existing systems.</p>

<p>One such extension is the <a href="/oauth2-servers/device-flow/">Device Flow</a> for authorizing apps on devices that don't have a web browser.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:48:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:48:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:32:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:32:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-experience-alternative-token-issuance-options]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[User Experience and Alternative Token Issuance Options]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Performance at Scale]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/performance-at-scale/</link>
		<pubDate>Wed, 17 Aug 2016 18:51:36 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=229</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>As larger providers started using OAuth 1.0, the community realized that the protocol had several limitations that made it difficult to scale to large systems. OAuth 1.0 requires state management across different steps and often across different servers. It requires generating temporary credentials which are often discarded unused, and typically requires issuing long lasting credentials which are less secure and harder to manage.</p>

    <p>In addition, OAuth 1.0 requires that the protected resources endpoints have access to the client credentials in order to validate the request. This breaks the typical architecture of most large providers in which a centralized authorization server is used for issuing credentials, and a separate server is used for handling API calls. Because OAuth 1.0 requires the use of the client credentials to verify the signatures, it makes this separation very hard.</p>

    <p>OAuth 2.0 addresses this by using the client credentials only when the application obtains authorization from the user. After the credentials are used in the authorization step, only the resulting access token is used when making API calls. This means the API servers do not need to know about the client credentials since they can validate access tokens themselves.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:51:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:51:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:32:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:32:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[performance-at-scale]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Performance at Scale]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Bearer Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/bearer-tokens/</link>
		<pubDate>Wed, 17 Aug 2016 18:52:09 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=231</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>In OAuth 1, there are two components to the access token, a public and private string. The private string is used when signing the request, and never sent across the wire.</p>

    <p>The most common way of accessing OAuth 2.0 APIs is using a "Bearer Token". This is a single string which acts as the authentication of the API request, sent in an HTTP "Authorization" header. The string is meaningless to clients using it, and may be of varying lengths.</p>

    <p>Bearer tokens are a much simpler way of making API requests, since they don't require cryptographic signing of each request. The tradeoff is that all API requests must be made over an HTTPS connection, since the request contains a plaintext token that could be used by anyone if it were intercepted. The advantage is that it doesn't require complex libraries to make requests and is much simpler for both clients and servers to implement.</p>

    <p>The downside to Bearer tokens is that there is nothing preventing other apps from using a Bearer token if it can get access to it. This is a common criticism of OAuth 2.0, although most providers only use Bearer tokens anyway. Under normal circumstances, when applications properly protect the access tokens under their control, this is not a problem, although technically it is less secure. If your service requires a more secure approach, you can a different access token type that may meet your security requirements.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:52:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:52:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:31:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:31:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bearer-tokens]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Bearer Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Short-lived tokens with Long-lived authorizations]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/short-lived-tokens-long-lived-authorizations/</link>
		<pubDate>Wed, 17 Aug 2016 18:52:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=233</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>OAuth 1.0 APIs typically issued extremely long-lasting access tokens. These tokens could last indefinitely, or on the order of a year. While convenient for developers, this proved limiting to some service providers in certain situations.</p>

    <p>Responsible API providers should allow users to see which third-party apps they have authorized to use their account, and should be able to revoke apps if desired. If a user revokes an app, the API should stop accepting the access tokens issued to that app as soon as possible. Depending on how the API was implemented, this could be challenging or require additional ties between internal parts of the system.</p>

    <p>With OAuth 2.0, the authorization server can issue a short-lived access token and a long-lived refresh token. This allows apps to obtain new access tokens without involving the user again, but also adds the ability for servers to revoke tokens easier. This feature was adopted from Yahoo!'s BBAuth protocol and later its OAuth 1.0 Session Extension.</p>

<p>See <a href="/oauth2-servers/access-tokens/refreshing-access-tokens/">Refreshing Access Tokens</a> for more information.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:52:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:52:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:31:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:31:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[short-lived-tokens-long-lived-authorizations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Short-lived tokens with Long-lived authorizations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Separation of Roles]]></title>
		<link>https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/separation-of-roles/</link>
		<pubDate>Wed, 17 Aug 2016 18:53:06 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=235</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>One of the design decisions that went into OAuth 2.0 was to explicitly separate the roles of the authorization server from the API server. This means you can build out the authorization server as a standalone component which is only responsible for obtaining authorization from users and issuing tokens to clients. The two roles can be on physically separate servers, and even be on different domain names, allowing each part of the system to be scaled independently. Some providers have many resource servers and each is on a different subdomain.</p>

    <p>The authorization server needs to know about the app's <code>client_id</code> and <code>client_secret</code>, but the API server will only ever need to accept access tokens. By building the authorization server as a standalone component, you can avoid sharing a database with the API servers, making it easier to scale API servers independently of the authorization server since they don't need to share a common data store.</p>

    <p>For example, Google's OAuth 2.0 implementation uses a server at "accounts.google.com" for authorization requests, but uses "www.gooogleapis.com" when making requests to the Google+ API.</p>

    <p>The benefit to service providers is that the development of these systems can happen completely independently, by different teams and on different timelines. Since they are completely separate, they can be scaled independently, or upgraded or replaced without concerning the other parts of the systems.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2016-08-17 11:53:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-17 18:53:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:30:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:30:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[separation-of-roles]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>136</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[body_background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[background_repeat]]></wp:meta_key>
		<wp:meta_value><![CDATA[fullcover]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[portfolio_display_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[content]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[builder_switch_frontend]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21.6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Separation of Roles]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OAuth for Native Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/oauth-native-apps/</link>
		<pubDate>Wed, 09 Aug 2017 23:20:01 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=608</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>This chapter describes some special considerations to keep in mind when supporting OAuth for native apps. Like browser-based apps, native apps can't use a client secret, as that would require that the developer ship the secret in their binary distribution of the application. It has been proven to be relatively easy to decompile and extract the secret. As such, native apps must use an OAuth flow that does not require a preregistered client secret.</p>

    <p>The current industry best practice is to use the Authorization Flow along with the PKCE extension, omitting the client secret from the request, and to use an external user agent to complete the flow. An external user agent is typically the device's native browser, (with a separate security domain from the native app) so that the app cannot access the cookie storage or inspect or modify the page content inside the browser. Since the app can't reach inside the browser being used in this case, this provides the opportunity for the device to keep users signed in while authorizing different applications, so that they don't have to enter their credentials each time they authorize a new application.</p>
    
    <p>In recent years, both iOS and Android have been working to further improve the user experience of OAuth for native apps by providing a native user agent that can be launched from within the application, while still being isolated from the application launching it. The result is that the user no longer needs to leave the application in order to launch a native browser that shares the system cookies. This was first added as <code>SFSafariViewController</code> in iOS 9, and later evolved to <code>SFAuthenticationSession</code> in iOS 11, and <code>ASWebAuthenticationSession</code> in iOS 12.</p>

      <p>These recommendations for native apps are published as an <a href="https://datatracker.ietf.org/doc/html/rfc8252" class="external">RFC 8252</a>, where these concepts are described in more explicit detail.</p>

<ul>
  <li><a href="/oauth2-servers/oauth-native-apps/use-system-browser/">Use a System Browser</a></li>
  <li><a href="/oauth2-servers/oauth-native-apps/redirect-urls-for-native-apps/">Redirect URLs for Native Apps</a></li>
  <li><a href="/oauth2-servers/oauth-native-apps/pkce/">PKCE Extension</a></li>
  <li><a href="/oauth2-servers/oauth-native-apps/checklist/">Checklist for Server Support for Native Apps</a></li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>608</wp:post_id>
		<wp:post_date><![CDATA[2017-08-09 16:20:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-09 23:20:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:47:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:47:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[oauth-native-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[OAuth for Native Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"5jx3146","cols":[{"element_id":"ddh4146","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Use a System Browser]]></title>
		<link>https://www.oauth.com/oauth2-servers/oauth-native-apps/use-system-browser/</link>
		<pubDate>Wed, 09 Aug 2017 23:27:13 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=614</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>It used to be common practice for native apps to embed the OAuth interface in a web view inside the app. This approach has multiple problems, including that the client app can potentially eavesdrop on the user entering their credentials when signing in, or even present a false authorization page. Mobile operating system security is typically implemented in a way where the embedded web view doesn't share cookies with the system's native browser, so users have a worse experience because they need to enter their credentials each time as well.</p>

        <p>The more secure and trusted way to accomplish the authorization flow is by launching a system browser. However, up until the addition of the specialized device APIs, this had the drawback of the user being popped out of the app and launching their browser, then redirecting back to the app, which is also not an ideal user experience.</p>

        <p>Thankfully, the mobile platforms have been addressing the issue. There are now APIs available on iOS and Android for apps to launch a system browser but stay within the context of the application. The API does not not allow the client app to peek inside the browser, getting the security benefits of using an external browser and the user experience benefits of staying within the application the whole time.</p>

        <p>Native app developers are strongly encouraged to use these special-purpose APIs, but if they can't for some reason, fall back to launching an external browser instead of an embedded web view.</p>

        <p>Authorization servers should enforce this behavior by attempting to detect whether the authorization URL was launched inside an embedded web view and reject the request if so. The particular techniques for detecting whether the page is being visited in an embedded web view vs the system browser will depend on the platform, but usually involve inspecting the user agent header.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date><![CDATA[2017-08-09 16:27:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-09 23:27:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:47:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:47:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[use-system-browser]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[15.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Use a System Browser]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"hl19585","cols":[{"element_id":"yvxg585","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redirect URLs for Native Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/oauth-native-apps/redirect-urls-for-native-apps/</link>
		<pubDate>Thu, 10 Aug 2017 16:33:13 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=620</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>In order to support a wide range of types of native apps, your server will need to support registering three types of redirect URLs, each to support a slightly different use case.</p>

        <h3>HTTPS URL Matching</h3>

        <p>Both iOS and Android allow apps to register URL patterns that indicate the app should be launched whenver a system browser visits a URL that matches the registered pattern. This is commonly used by apps to "deep link" into the native app, such as the Yelp app opening to the restaurant's page when a Yelp URL is viewed in the browser.</p>

        <p>This technique can also be used by apps to register URL a pattern that will launch the app when an authorization server redirects back to the app. If a platform provides this feature, this is the recommended choice for native apps, as this provides the most integrity that the app belongs to the URL it's matching. This also provides a reasonable fallback in the case that the platform doesn't support app-claimed URLs.</p>

        <h3>Custom URL Scheme</h3>

        <p>Some platforms allow apps to register a custom URL scheme which will launch the app whenever a URL with that scheme is opened in a browser or another app. Supporting redirect URLs with a custom URL scheme allows clients to launch an external browser to complete the authorization flow, and then be redirected back to the application after the authorization is complete. However this method is less secure than the HTTPS URL matching method, as there is no global registry of custom URL schemes to avoid conflicts between developers.</p>

        <p>App developers should choose a URL scheme that is likely to be globally unique, and one which they can assert control over. Since operating systems typically do not have a registry of whether a particular app has claimed a URL scheme, it is theoretically possible for two apps to independently choose the same scheme, such as <code>myapp://</code>. If you want to help prevent collisions by app developers using custom schemes, you should recommend (or even enforce) that they use a scheme that is the reverse domain name pattern of a domain they control. At the very least, you can require that the redirect URL contains at least one <code>.</code> so as not to conflict with other system schemes such as <code>mailto</code> or <code>ftp</code>.</p>

        <p>For example, if an app has a corresponding website called <code>photoprintr.example.org</code>, the reverse domain name that can be used as their URL scheme would be <code>org.example.photoprintr</code>. The redirect URL that the developer would register would then begin with <code>org.example.photoprintr://</code>. By enforcing this, you can help encourage developers to choose explicit URL schemes that won't conflict with other installed applications.</p>

        <p>Apps that use a custom URL scheme will start the authorization request as normal, described in <a href="/oauth2-servers/authorization/the-authorization-request/" class="section">Authorization Request</a>, but will provide a redirect URL that has their custom URL scheme. The authorization server should still verify that this URL was previously registered as an allowed redirect URL, and can treat it like any other redirect URL registered by web apps.</p>

        <p>When the authorization server redirects the native app to the URL with the custom scheme, the operating system will launch the app and make the whole redirect URL accessible to the original app. The app can extract the authorization code just like a regular OAuth 2.0 client would.</p>

        <h3>Loopback URLs</h3>

        <p>Another technique native applications may use for supporting seamless redirects is opening a new HTTP server on a random port of the loopback interface. This is typically only done on desktop operating systems or for command line applications, as mobile operating systems typically do not provide this functionality to app developers.</p>

        <p>This approach works well for command line apps as well as desktop GUI apps. The app will start an HTTP server and then begin the authorization request, setting the redirect URL to a loopback address such as <code>http://127.0.0.1:49152/redirect</code> and launching a browser. When the authorization server redirects the browser back to the loopback address, the application can grab the authorization code from the request.</p>

        <p>In order to suppor this use case, the authorization server will have to support registering redirect URLs beginning with <code>http://127.0.0.1:[port]/</code> and <code>http://::1:[port]/</code>, and <code>http://localhost:[port]/</code>. The authorization server should allow an arbitrary path component as well as arbitrary port numbers. Note that in this case it is acceptable to use the HTTP scheme rather than HTTPS, as the request never leaves the device.</p>

        <h3>Registration</h3>

        <p>As with server-side apps, native apps must also register their redirect URL(s) with the authorization server. This means the authorization server will need to allow registered redirect URLs that match all the patterns described above, in addition to traditional HTTPS URLs for server-side apps.</p>

        <p>When the authorization request is initiated at the authorization server, the server will validate all the request parameters, including the redirect URL given. The authorization should reject unrecognized URLs in the request, to help avoid an authorization code interception attack.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 09:33:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 16:33:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:48:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:48:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-urls-for-native-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[15.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Redirect URLs for Native Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"7wx9513","cols":[{"element_id":"2ois513","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PKCE Extension]]></title>
		<link>https://www.oauth.com/oauth2-servers/oauth-native-apps/pkce/</link>
		<pubDate>Thu, 10 Aug 2017 16:34:04 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=626</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Since redirect URLs on native platforms have limited ability to be enforced, there is another technique for gaining additional security called Proof Key for Code Exchange, or PKCE for short, pronounced "pixie".</p>

        <p>This technique involves the native app creating an initial random secret, and using that secret again when exchanging the authorization code for an access token. This way, if another app intercepts the authorization code, it will be unusable without the original secret.</p>

        <p>Note that PKCE doesn't prevent app impersonation, it only prevents authorization codes from being used by a different app than the one that started the flow.</p>

        <p>See <a href="/oauth2-servers/pkce/">Proof Key for Code Exchange</a> for details.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>626</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 09:34:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 16:34:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:48:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:48:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pkce]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[15.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[PKCE Extension]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"hic9714","cols":[{"element_id":"w56n715","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Checklist for Server Support for Native Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/oauth-native-apps/checklist-server-support-native-apps/</link>
		<pubDate>Thu, 10 Aug 2017 16:34:29 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=627</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>To summarize this chapter, your authorization server should support the following in order to fully support secure authorization for native apps.</p>

        <ul>
          <li>Allow clients to register custom URL schemes for their redirect URLs.</li>
          <li>Support loopback IP redirect URLs with arbitrary port numbers in order to support desktop apps.</li>
          <li>Don't assume native apps can keep a secret. Require all apps to declare whether they are public or confidential, and only issue client secrets to confidential apps.</li>
          <li>Support the PKCE extension, and require that public clients use it.</li>
          <li>Attempt to detect when the authorization interface is embedded in a native app's web view, instead of launched in a system browser, and reject those requests.</li>
        </ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>627</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 09:34:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 16:34:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:21:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:21:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[checklist-server-support-native-apps]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>608</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[15.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Checklist for Server Support for Native Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OAuth for Browserless and Input-Constrained Devices]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/</link>
		<pubDate>Thu, 10 Aug 2017 16:56:43 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=640</guid>
		<description></description>
		<content:encoded><![CDATA[The OAuth 2.0 "Device Flow" extension enables OAuth on devices that have an Internet connection but don't have a browser or an easy way to enter text. If you've ever signed in to your YouTube account on a device such as the Apple TV, you've encountered this workflow already. Google was involved in the development of this extension, and has been an early implementer of it in production as well.

This flow is also seen on devices such as smart TVs, media consoles, picture frames, printers, or hardware video encoders. In this flow, the device instructs the user to open a URL on a secondary device such as a smartphone or computer in order to complete the authorization. There is no communication channel required between the user's two devices.

<ul>
  <li><a href="/oauth2-servers/device-flow/user-flow/">User Flow</a></li>
  <li><a href="/oauth2-servers/device-flow/authorization-request/">Authorization Request</a></li>
  <li><a href="/oauth2-servers/device-flow/token-request/">Token Request</a></li>
  <li><a href="/oauth2-servers/device-flow/authorization-server-requirements/">Authorization Server Requirements</a></li>
  <li><a href="/oauth2-servers/device-flow/security-considerations/">Security Considerations</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 09:56:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 16:56:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:19:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:19:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[device-flow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[If you've ever signed in to your YouTube account on a device such as the Apple TV, you've encountered this workflow already.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[OAuth for Browserless and Input-Constrained Devices]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[User Flow]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/user-flow/</link>
		<pubDate>Thu, 10 Aug 2017 17:24:37 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=643</guid>
		<description></description>
		<content:encoded><![CDATA[When you begin signing in on the device, such as this hardware video encoder, the device talks to Google to get a device code, shown below.

<figure>[caption id="attachment_645" align="alignnone" width="1024"]<img src="/wp-content/uploads/2017/08/getting-device-code-1024x275.jpg" alt="" width="1024" height="275" class="size-large wp-image-645" /> The device making an API request to obtain a device code[/caption]</figure>

Next, we see that the device then shows you the code, along with a URL.

<figure>[caption id="attachment_644" align="alignnone" width="1024"]<img src="/wp-content/uploads/2017/08/device-code-display-1024x275.jpg" alt="" width="1024" height="275" class="size-large wp-image-644" /> The device displays the device code and URL[/caption]</figure>

Visiting that URL after you've signed in to your Google account shows an interface that prompts you to enter the code that's displayed on the device.

<figure>[caption id="attachment_646" align="alignnone" width="806"]<img src="/wp-content/uploads/2017/08/google-1-enter-the-code.png" alt="" width="806" height="697" class="size-full wp-image-646" /> Google prompts the user to enter the code[/caption]</figure>

Once you enter the code and click "Next", you then see the standard OAuth authorization prompt that describes what scopes the application is requesting, as seen below.

<figure>[caption id="attachment_647" align="alignnone" width="884"]<img src="/wp-content/uploads/2017/08/google-2-scope.png" alt="" width="884" height="485" class="size-full wp-image-647" /> Google displays the scopes the application is requesting[/caption]</figure>

Once you allow the request, Google shows a message that says to return to your device, shown below.

<figure>[caption id="attachment_648" align="alignnone" width="781"]<img src="/wp-content/uploads/2017/08/google-3-return-to-device.png" alt="" width="781" height="683" class="size-full wp-image-648" /> Google instructs the user to return to the device[/caption]</figure>

A few seconds later, the device finishes up and you're signed in.

Overall this is a pretty painless experience. Since you get to use whatever device you want to open the URL, you can use your primary computer or phone where you're likely already signed in to the authorization server. This also works with no data entry required on the device! No typing passwords or codes on what is likely a cumbersome tiny keyboard.

Let's walk through what's required by the device to make this work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:24:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:24:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:49:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:49:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-flow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[User Flow]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"s40y376","cols":[{"element_id":"u57p376","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/authorization-request/</link>
		<pubDate>Thu, 10 Aug 2017 17:27:26 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=656</guid>
		<description></description>
		<content:encoded><![CDATA[First, the device makes a request to the authorization server to request the device code, identifying itself with its client ID, and requesting one or more scopes if it needs to.

[text]POST /token HTTP/1.1
Host: authorization-server.com
Content-type: application/x-www-form-urlencoded

client_id=a17c21ed[/text]

The authorization server responds with a JSON payload containing the device code, the code the user will enter, the URL the user should visit, and a polling interval.

[text]HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
{
    &quot;device_code&quot;: &quot;NGU5OWFiNjQ5YmQwNGY3YTdmZTEyNzQ3YzQ1YSA&quot;,
    &quot;user_code&quot;: &quot;BDWP-HQPK&quot;,
    &quot;verification_uri&quot;: &quot;https://authorization-server.com/device&quot;,
    &quot;interval&quot;: 5,
    &quot;expires_in&quot;: 1800
}[/text]

The device shows the <code>verification_uri</code> and <code>user_code</code> to the user
on its display, directing the user to enter the code at that URL.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>656</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:27:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:27:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:50:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:50:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"v6c3258","cols":[{"element_id":"1dcz258","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Token Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/token-request/</link>
		<pubDate>Thu, 10 Aug 2017 17:29:32 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=660</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>While the device is waiting for the user to complete the authorization flow on their own computer or phone, the device meanwhile begins polling the token endpoint to request an access token.</p>

      <p>The device makes a POST request with the <code>device_code</code> at the rate specified by <code>interval</code>. The device should continue requesting an access token until a response other than <code>authorization_pending</code> is returned, either the user grants or denies the request or the device code expires.</p>

[text]POST /token HTTP/1.1
Host: authorization-server.com
Content-type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:device_code&amp;
client_id=a17c21ed&amp;
device_code=NGU5OWFiNjQ5YmQwNGY3YTdmZTEyNzQ3YzQ1YSA[/text]

      <p>The authorization server will reply with either an error or an access token. The Device Flow spec defines two additional error codes beyond what is defined in OAuth 2.0 core, <code>authorization_pending</code> and <code>slow_down</code>.</p>

      <p>If the device is polling too frequently, the authorization server will return the <code>slow_down</code> error.</p>

[text]HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  &quot;error&quot;: &quot;slow_down&quot;
}[/text]

      <p>If the user has not either allowed or denied the request yet, the authorization server will return the <code>authorization_pending</code> error.</p>

[text]HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  &quot;error&quot;: &quot;authorization_pending&quot;
}[/text]

      <p>If the user denies the request, the authorization server will return the <code>access_denied</code> error.</p>

[text]HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  &quot;error&quot;: &quot;access_denied&quot;
}[/text]

      <p>If the device code has expired, the authorization server will return the <code>expired_token</code> error. The device can immediately make a request for a new device code.</p>

[text]HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store

{
  &quot;error&quot;: &quot;expired_token&quot;
}[/text]

      <p>Finally, if the user allows the request, then the authorization server issues an access token like normal and returns the standard access token response.</p>

[text]HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  &quot;access_token&quot;: &quot;AYjcyMzY3ZDhiNmJkNTY&quot;,
  &quot;refresh_token&quot;: &quot;RjY2NjM5NzA2OWJjuE7c&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;expires&quot;: 3600,
  &quot;scope&quot;: &quot;create&quot;
}[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>660</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:29:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:29:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:51:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:51:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[token-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Token Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"ts8a855","cols":[{"element_id":"7x3u856","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Server Requirements]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/authorization-server-requirements/</link>
		<pubDate>Thu, 10 Aug 2017 17:35:06 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=662</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>Supporting the Device Flow is not a huge amount of additional work for an authorization server. Here are a few things to keep in mind as you're adding support for the Device Flow to an existing authorization server.</p>

      <h3>Device Code Request</h3>

      <p>The device will make a request to the authorization server to obtain the set of verification codes needed for the flow. The following parameters are part of the request.</p>

      <ul>
        <li><b><code>client_id</code></b> - Required, the client identifier as described in <a href="#client_registration" class="chapter end">Client Registration</a>.</li>
        <li><b><code>scope</code></b> - Optional, the scope of the request as described in <a href="#scope" class="chapter end">Scope</a>.</li>
      </ul>

      <p>After validating the client ID and scopes, the authorization server returns the response with the verification URL, device code and user code. There are a few optional parameters that the authorization server can return in addition to the example given above.</p>

      <ul>
        <li><b><code>device_code</code></b> - Required, the verification code generated by the authorization server.</li>
        <li><b><code>user_code</code></b> - Required, the code the user will enter on the device screen, should be relatively short. Typically 6-8 numbers and letters are used.</li>
        <li><b><code>verification_uri</code></b> - Required, the URL on the authorization server that the user should visit to begin authorization. The user is expected to hand-enter this URL on their computer or mobile phone.</li>
        <li><b><code>expires_in</code></b> - Optional, the lifetime in seconds of the device code and user code.</li>
        <li><b><code>interval</code></b> - Optional, the minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.</li>
      </ul>


      <h3>User Code</h3>

      <p>In many situations, the user's nearest device will be their mobile phone. Typically these interfaces are more limited than a full computer keyboard, like how the iPhone requires an additional tap to change the key case or switch to numeric entry. To help reduce data entry errors, and to speed up entry of the code, the character set of the user code should take into account these limitations, such as using only capital letters.</p>

      <p>A reasonable character set to use for the device code is case insensitive A-Z characters, without vowels so as to avoid accidentally spelling words. This results in the base-20 character set <code>BCDFGHJKLMNPQRSTVWXZ</code>. When comparing the entered code, it is best to ignore any characters such as punctuation that are not in the character set. An example code following this guideline with an entropy of 20^8 is <code>BDWP-HQPK</code>. The authorization server should compare the entered string case-insensitively ignoring punctuation, so should allow the following as a match: <code>bdwphqpk</code>.</p>


      <h3>Verification URL</h3>

      <p>The verification URL that the device will display should be as short as possible, and easy to remember. It will be displayed on potentially very small screens, and users will have to type it in manually on their computer or phone.</p>

      <p>Note that the server should return a full URL including the URL scheme, although some devices may choose to trim that when displaying the URL. As such, the server should be configured to redirect http to https, and to serve on both the plain domain and with a www prefix in case the user mis-enters or the device omits that part of the URL.</p>

      <p>Google's authorization server is a great example of a short URL that is easy to enter. The response from the code request is <code>https://www.google.com/device</code> but all the device needs to display is <code>google.com/device</code> and Google will redirect appropriately.</p>


      <h3>Optimization for Non-Textual Interfaces</h3>

      <p>Clients without a display, or with a non-textual display, obviously have no way to show a URL to the user. As such, there are some additional methods that could be used to communicate the verification URL and user code to the user.</p>

      <p>The device may be able to broadcast the verification URL via NFC, or Bluetooth, or even by displaying a QR code. In these cases, the device may include the user code as part of the verification URL using the parameter <code>user_code</code>. For example:</p>

[text]https://authorization-server.com/device?user_code=BDWP-HQPK[/text]

      <p>This way, when the user launches the URL, the user code can be pre-filled in the verification interface. It is recommended that the authorization server still require the user confirm the code rather than proceed automatically.</p>

      <p>If the device has the ability to display the code, even if it cannot display a URL, then additional security is gained by prompting the user to confirm that the code on the verification interface matches the code displayed on their device. If that is not an option, then the authorization server can at least ask the user to confirm that they just requested to authorize a device.</p> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>662</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:35:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:35:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:53:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:53:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-server-requirements]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Server Requirements]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"ymwg150","cols":[{"element_id":"puwm151","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Considerations]]></title>
		<link>https://www.oauth.com/oauth2-servers/device-flow/security-considerations/</link>
		<pubDate>Thu, 10 Aug 2017 17:36:55 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=666</guid>
		<description></description>
		<content:encoded><![CDATA[      <h3>User Code Brute Forcing</h3>

      <p>Since the user code is hand-entered by the user into an interface that does not yet know about the device being authorized, precautions should be taken to avoid the possibility of a brute force attack against the user code.</p>

      <p>Typically a short code with much less entropy than used by authorization codes is used in order to be easily entered by hand. Because of this, it is recommended that the authorization server rate-limit the endpoint used to verify user codes.</p>

      <p>The rate limit should be based on the entropy of the user code in order to make a brute force attack infeasible. For example, with 8 characters out of the 20-character set described above, that provides approximately 34 bits of entropy. <code>log<sub>2</sub>(20<sup>8</sup>) = 34.57</code> You can use this formula to calculate the bits of entropy when choosing an acceptable rate limit.</p>

      <h3>Remote Phishing</h3>

      <p>It is possible for the device flow to be initiated on a device in the attacker's possession, in order to trick the user into authorizing the attacker's device. For example, the attacker might send an SMS instructing the user to visit a URL and enter the user code.</p>

      <p>To mitigate this risk, it is recommended that the authorization interface make it very clear to the user that they are authorizing a physical device to access their account, in addition to the standard information included in the authorization interface described in <a href="/oauth2-servers/scope/user-interface/">User Interface</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>666</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:36:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:36:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 11:11:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 18:11:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-considerations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>640</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[16.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Security Considerations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Protecting Apps with PKCE]]></title>
		<link>https://www.oauth.com/oauth2-servers/pkce/</link>
		<pubDate>Thu, 10 Aug 2017 17:39:45 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=668</guid>
		<description></description>
		<content:encoded><![CDATA[Proof Key for Code Exchange (abbreviated PKCE, pronounced "pixie") is an extension to the authorization code flow to prevent CSRF and authorization code injection attacks. The technique involves the client first creating a secret on each authorization request, and then using that secret again when exchanging the authorization code for an access token. This way if the code is intercepted, it will not be useful since the token request relies on the initial secret.

PKCE was originally designed to protect the authorization code flow in mobile apps, and was later recommended to be used by single-page apps as well. In later years, it was recognized that its ability to prevent authorization code injection makes it useful for every type of OAuth client, even apps running on a web server that use a client secret. Because of its history in the use of mobile apps and single-page apps, it is sometimes incorrectly thought that PKCE is an alternative to a client secret. However PKCE is not a replacement for a client secret, and PKCE is recommended even if a client is using a client secret, since apps with a client secret are still susceptible to authorization code injection attacks.

The full spec is available as <a href="https://datatracker.ietf.org/doc/html/rfc7636">RFC7636</a>. We'll cover a summary of the protocol below.

<ul>
  <li><a href="/oauth2-servers/pkce/authorization-request/">Authorization Request</a></li>
  <li><a href="/oauth2-servers/pkce/authorization-code-exchange/">Authorization Code Exchange</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>668</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:39:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:39:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:54:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:54:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pkce]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Protecting Apps with PKCE]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"bmo3219","cols":[{"element_id":"iyko219","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/pkce/authorization-request/</link>
		<pubDate>Thu, 10 Aug 2017 17:40:33 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=670</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>When the native app begins the authorization request, instead of immediately launching a browser, the client first creates what is known as a "<i>code verifier</i>". This is a cryptographically random string using the characters <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, and the punctuation characters <code>-._~</code> (hyphen, period, underscore, and tilde), between 43 and 128 characters long.</p>

      <p>Once the app has generated the code verifier, it uses that to derive the <i>code challenge</i>. For devices that can perform a SHA256 hash, the code challenge is a Base64-URL-encoded string of the SHA256 hash of the code verifier. Clients that do not have the ability to perform a SHA256 hash are permitted to use the plain code verifier string as the challenge, although that provides less security benefits so should really only be used if absolutely necessary.</p>

Base64-URL-encoding is a minor variation on the typical Base64 encoding method. It starts with the same Base64-encoding method available in most programming languages, but uses URL-safe characters instead. You can implement a Base64-URL-encoding method by taking a Base64-encoded string and making the following modifications to the string: Take the Base64-encoded string, and change <code>+</code> to <code>-</code>, and <code>/</code> to <code>_</code>, then trim the trailing <code>=</code> from the end.

<b>PHP</b>

[php]function base64_urlencode($str) {
  return rtrim(strtr(base64_encode($hash), '+/', '-_'), '=');
}[/php]

<b>JavaScript</b>

[javascript]function base64_urlencode(str) {
  return btoa(String.fromCharCode.apply(null, 
    new Uint8Array(str)))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
}[/javascript]

      <p>Now that the client has a <i>code challenge</i> string, it includes that and a parameter that indicates which method was used to generate the challenge (plain or S256) along with the standard parameters of the authorization request. This means a complete authorization request will include the following parameters.</p>

        <ul>
          <li><b>response_type=code</b> - indicates that your server expects to receive an authorization code</li>
          <li><b>client_id=</b> - The client ID you received when you first created the application</li>
          <li><b>redirect_uri=</b> - Indicates the URL to return the user to after authorization is complete, such as org.example.app://redirect</li>
          <li><b>state=1234zyx</b> - A random string generated by your application, which you'll verify later</li>
          <li><b>code_challenge=XXXXXXXXX</b> - The code challenge generated as previously described</li>
          <li><b>code_challenge_method=S256</b> - either <code>plain</code> or <code>S256</code>, depending on whether the challenge is the plain verifier string or the SHA256 hash of the string.</li>
        </ul>


      <p>The authorization server should recognize the <code>code_challenge</code> parameter in the request, and associate that with the authorization code it generates. Either store this in the database along with the authorization code, or if you're using self-encoded authorization codes then it can be included in the code itself. (See <a href="/oauth2-servers/authorization/the-authorization-response/" class="section">The Authorization Response</a> for details.) The server returns the authorization code as normal, and does not include the challenge in the data returned.</p>

      <h3>Error Response</h3>

      <p>The authorization server can require that public clients must use the PKCE extension. This is really the only way to allow native apps to have a secure authorization flow without using the client secret, especially without the redirect URI security that's available with web-based clients. Since the authorization server should know that a specific client ID corresponds to a public client, it can deny authorization requests for public clients that do not contain a code challenge.</p>

      <p>If the authorization server requires public clients to use PKCE, and the authorization request is missing the code challenge, then the server should return the error response with <code>error=invalid_request</code> and the <code>error_description</code> or <code>error_uri</code> should explain the nature of the error.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>670</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 10:40:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 17:40:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:56:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:56:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>668</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[17.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"mpm5862","cols":[{"element_id":"myee862","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Code Exchange]]></title>
		<link>https://www.oauth.com/oauth2-servers/pkce/authorization-code-exchange/</link>
		<pubDate>Thu, 10 Aug 2017 18:05:19 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=673</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>The application will then exchange the authorization code for an access token. In addition to the parameters defined in Authorization Code Request <a href="#authorization_code_request" class="pageref"></a>, the client will also send the <code>code_verifier</code> parameter. A complete access token request will include the following parameters:</p>

      <p>
        <ul>
          <li><b>grant_type=authorization_code</b> - Indicates the grant type of this token request</li>
          <li><b>code</b> - The client will send the authorization code it obtained in the redirect</li>
          <li><b>redirect_uri</b> - The redirect URL that was used in the initial authorization request</li>
          <li><b>client_id</b> - The application's registered client ID</li>
          <li><b>client_secret</b> (optional) - The application's registered client secret if it was issued a secret</li>
          <li><b>code_verifier</b> - The code verifier for the PKCE request, that the app originally generated before the authorization request.</li>
        </ul>
      </p>

      <p>Since the <code>code_challenge</code> and <code>code_challenge_method</code> were associated with the authorization code initially, the server should already know which method to use to verify the <code>code_verifier</code>.</p>

      <p>If the method is <code>plain</code>, then the authorization server needs only to check that the provided <code>code_verifier</code> matches the expected <code>code_challenge</code> string. If the method is <code>S256</code>, then the authorization server should take the provided <code>code_verifier</code> and transform it using the same hash method, then comparing it to the stored <code>code_challenge</code> string.</p>

      <p>If the verifier matches the expected value, then the server can continue on as normal, issuing an access token and responding appropriately. If there is a problem, then the server responds with an <code>invalid_grant</code> error.</p>

      <p>The PKCE extension does not add any new responses, so clients can always use the PKCE extension even if an authorization server does not support it.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>673</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:05:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:05:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 15:57:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 22:57:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-code-exchange]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>668</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[17.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Code Exchange]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"9fqo231","cols":[{"element_id":"emxe231","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OpenID Connect]]></title>
		<link>https://www.oauth.com/oauth2-servers/openid-connect/</link>
		<pubDate>Thu, 10 Aug 2017 18:08:06 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=676</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>The OAuth 2.0 framework explicitly does not provide any information about the user that has authorized an application. OAuth 2.0 is a <i>delegation</i> framework, allowing third-party applications to act on behalf of a user, without the application needing to know the identity of the user.</p>

    <p>OpenID Connect takes the OAuth 2.0 framework and adds an identity layer on top. It provides information about the user, as well as enables clients to establish login sessions. While this chapter is not meant to be a complete guide to OpenID Connect, it is meant to clarify how OAuth 2.0 and OpenID Connect relate to each other.</p>

<ul>
  <li><a href="/oauth2-servers/openid-connect/authorization-vs-authentication/">Authorization vs Authentication</a></li>
  <li><a href="/oauth2-servers/openid-connect/building-an-authentication-framework/">Building an Authentication Framework</a></li>
  <li><a href="/oauth2-servers/openid-connect/id-tokens/">ID Tokens</a></li>
  <li><a href="/oauth2-servers/openid-connect/summary/">Summary</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>676</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:08:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:08:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:30:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:30:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[openid-connect]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>22</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[OpenID Connect]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization vs Authentication]]></title>
		<link>https://www.oauth.com/oauth2-servers/openid-connect/authorization-vs-authentication/</link>
		<pubDate>Thu, 10 Aug 2017 18:09:10 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=678</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>OAuth 2.0 is called an authorization "framework" rather than a "protocol" since the core spec actually leaves quite a lot of room for various implementations to do things differently depending on their use cases. Specifically, OAuth 2.0 does not provide a mechanism to say who a user is or how they authenticated, it just says that a user delegated an application to act on their behalf. The OAuth 2.0 framework provides this delegation in the form of an access token, which the application can use to act on behalf of the user. The access token is presented to the API (the "resource server"), which knows how to validate whether the access token is active. From the application's perspective, it is an opaque string.</p>

      <p>When you check in to a hotel, you get a key card which you can use to enter your assigned room. You can think of the key card as an access token. The key card says nothing about who you are, or how you were authenticated at the front desk, but you can use the card to access your hotel room for the duration of your stay. Similarly, an OAuth 2.0 access token doesn't indicate who a user is, it just is the thing you can use to access data, and it may expire at some point in the future.</p>

      <p>OAuth 2.0 was intentionally designed to provide authorization without providing user identity and authentication, as those problems have very different security considerations that don't necessarily overlap with those of an authorization protocol. Treating authentication and identity separately allows the OAuth 2.0 framework to be used as part of building an authentication protocol.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:09:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:09:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:29:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:29:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-vs-authentication]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>676</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[22.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization vs Authentication]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Building an Authentication Framework]]></title>
		<link>https://www.oauth.com/oauth2-servers/openid-connect/building-an-authentication-framework/</link>
		<pubDate>Thu, 10 Aug 2017 18:13:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=680</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>It is quite possible to use the OAuth 2.0 framework as the basis for building an authentication and identity protocol.</p>
      <p>To use OAuth 2.0 as the basis of an authentication protocol, you will need to do at least a few things.</p>

      <ul>
        <li>Define an endpoint to return attributes about a user</li>
        <li>Define one or more scopes that the third-party applications can use to request identity information from the user</li>
        <li>Define additional error codes and the necessary extension parameters for the scenarios you'll encounter when dealing with authentication and identity, such as when to re-prompt for the user's credentials based on session timeouts, or how to allow the user to select a new account when signing in to an application</li>
      </ul>

      <p>Typically when a single provider attempts to add things to OAuth 2.0 to create an authentication and identity protocol, this results in another snowflake API with varying degrees of security. OpenID Connect takes the shared knowledge gained from many different implementations and standardizes it into a protocol suitable for enterprise grade implementations.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:13:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:13:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:29:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:29:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[building-an-authentication-framework]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>676</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[22.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Building an Authentication Framework]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ID Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/openid-connect/id-tokens/</link>
		<pubDate>Thu, 10 Aug 2017 18:13:57 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=682</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>The core of OpenID Connect is based on a concept called "ID Tokens." This is a new token type that the authorization server will return which encodes the user's authentication information. In contrast to access tokens, which are only intended to be understood by the resource server, ID tokens are intended to be understood by the OAuth client. When the client makes an OpenID Connect request, it can request an ID token along with an access token.</p>
      <p>OpenID Connect's ID Tokens take the form of a JWT (JSON Web Token), which is a JSON payload that is signed with the private key of the issuer, and can be parsed and verified by the application.</p>
      <p>Inside the JWT are a handful of defined property names that provide information to the application. They are represented with shorthand names to keep the overall size of the JWT small. This includes a unique identifier for the user (<code>sub</code>, short for "subject"), the identifier for the server that issued the token (<code>iss</code>), the identifier for the client that requested this token (<code>aud</code>, short for "audience"), along with a handful of properties such as the lifetime of the token, and how long ago the user was presented with a primary authentication prompt.</p>

[text]{
  &quot;iss&quot;: &quot;https://server.example.com&quot;,
  &quot;sub&quot;: &quot;24400320&quot;,
  &quot;aud&quot;: &quot;s6BhdRkqt3&quot;,
  &quot;nonce&quot;: &quot;n-0S6_WzA2Mj&quot;,
  &quot;exp&quot;: 1311281970,
  &quot;iat&quot;: 1311280970,
  &quot;auth_time&quot;: 1311280969
}[/text]
      <p>Standardizing the endpoints, names, and metadata helps reduce implementation errors, and allows shared knowledge to be passed around about the security considerations of each.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>682</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:13:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:13:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:04:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:04:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[id-tokens]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>676</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[22.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[ID Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"pbly295","cols":[{"element_id":"zv4g295","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Summary]]></title>
		<link>https://www.oauth.com/oauth2-servers/openid-connect/summary/</link>
		<pubDate>Thu, 10 Aug 2017 18:20:47 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=684</guid>
		<description></description>
		<content:encoded><![CDATA[      <p>OpenID Connect provides user identity and authentication on top of the OAuth 2.0 framework. You can use OpenID Connect to establish a login session, and use OAuth to access protected resources.</p>
      <p>You can request both an ID token and access token in the same flow in order to both authenticate the user as well as obtain authorization to access a protected resource.</p>
      <p>OpenID Connect is maintained by the <a href="https://openid.net" class="external">OpenID Foundation</a>. The core OpenID Connect spec, as well as many extensions, can be read in full on <a href="https://openid.net/connect/" class="url">https://openid.net/connect/</a>.</p>
      <p>The <a href="https://oidcdebugger.com/" class="external">OpenID Connect Debugger</a> is a fantastic resource to help you build OpenID Connect requests and walk through the flows. Additionally, the <a href="https://www.oauth.com/playground/" class="external">OAuth 2.0 Playground</a> provides a walkthrough of the OpenID Connect flow against a live server.</p>
      <p>In <a href="/oauth2-servers/oauth2-clients/signing-in-with-google/" class="chapter">Signing in with Google</a> we walk through building a sample app using OpenID Connect.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>684</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:20:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:20:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 10:27:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 17:27:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[summary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>676</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[22.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Summary]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IndieAuth]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/</link>
		<pubDate>Thu, 10 Aug 2017 18:30:28 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=686</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>IndieAuth is a decentralized identity protocol built on OAuth 2.0, which works using URLs to identify users and applications. It allows people to use a domain under their control as their identity while signing in and authorizing applications using that identity. The spec can be found at <a href="https://www.w3.org/TR/indieauth/" class="url">https://www.w3.org/TR/indieauth/</a>.</p>

    <p>All user IDs are URLs, and apps are also identified by their URLs instead of by pre-registered client IDs. This makes it work great for situations where you don't want to require that developers sign up for an account at each authorization server, such as writing apps that authenticate users at arbitrary WordPress installations.</p>

IndieAuth can be used as an authentication mechanism when an application just needs to identify users for login, or it can be used by an application to obtain an access token to use against the user's website.

For example, IndieAuth is used by <a href="https://www.w3.org/TR/micropub/" class="external">Micropub clients</a> to obtain an access token that is then used to create content on the user's website.

    <p>IndieAuth builds upon the OAuth 2.0 framework as follows:</p>

    <ul>
      <li>Specifies a mechanism and format for identifying users (a resolvable URL)</li>
      <li>Specifies a method of discovering the authorization and token endpoints given a profile URL</li>
      <li>Specifies a format for the Client ID (also as resolvable URL)</li>
      <li>All clients are public clients, as client secrets are not used</li>
      <li>Client registration is not necessary, since all clients must use a resolvable URL as their Client ID</li>
      <li>Redirect URI registration is accomplished by the application publicizing their valid redirect URLs on their website</li>
    </ul>

    <p>More information and the spec can be found at <a href="https://indieauth.net" class="url">indieauth.net</a>. A brief overview of the two workflows follows.</p>

<ul>
  <li><a href="/oauth2-servers/indieauth/discovery/">Discovery</a></li>
  <li><a href="/oauth2-servers/indieauth/sign-in/">Sign-In Workflow</a></li>
  <li><a href="/oauth2-servers/indieauth/authorization/">Authorization Workflow</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>686</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:30:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:30:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:06:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:06:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[indieauth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>23</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[IndieAuth]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"k3av458","cols":[{"element_id":"tcga458","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IndieAuth Sign-In Workflow]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/sign-in/</link>
		<pubDate>Thu, 10 Aug 2017 18:32:47 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=688</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>The basic flow for a user signing in to an application is as follows.</p>
        <ul>
          <li>The user enters their personal URL in the sign-in form of the application.</li>
          <li><b>Discovery:</b> The application fetches the URL and finds the user's authorization endpoint.</li>
          <li><b>Authorization Request:</b> The application directs the user's browser to the authorization endpoint discovered, as a standard OAuth 2.0 Authorization Grant along with the user's URL entered in the first step.</li>
          <li><b>Authentication/Approval:</b> The user authenticates at their authorization endpoint and approves the login request. The authorization server generates an authorization code and redirects back to the application's redirect URL.</li>
          <li><b>Verification:</b> The application checks the code at the authorization endpoint, similar to exchanging the code for an access token, except no access token is returned since this is just a check for authentication. The authorization endpoint responds with the full URL of the user who authenticated.</li>
        </ul>

        <h3>Authentication Request</h3>

        <p>When the application builds the URL to authenticate the user, the request looks very similar to the OAuth authorization request, except no pre-registration of the client is necessary, and the request will also include the user's profile URL. The URL will look like the below.</p>

        [text]https://user.example.net/auth?
    me=https://user.example.net/
    &amp;redirect_uri=https://example-app.com/redirect
    &amp;client_id=https://example-app.com/
    &amp;state=1234567890
    &amp;code_challenge=XXXXXXXXX
    &amp;code_challenge_method=S256[/text]

        <p>The authorization server will then ask the user to log in, as normally happens with OAuth flows, and then ask the user if they would like to continue signing into the app, as shown below.</p>

<img src="https://www.oauth.com/wp-content/uploads/2018/07/indieauth-login-prompt-1024x436.png" alt="" width="1024" height="436" class="alignnone size-large wp-image-732" />

        <p>If the user approves, they will be redirected back to the application with an authorization code (and the app's state value) in the query string.</p>

        <p>The app will then take the authorization code and verify it with the authorization endpoint, in order to confirm the identity of the user that signed in. The app makes a POST request to the authorization endpoint with the <code>code</code>, <code>client_id</code> and <code>redirect_uri</code>, like a typical authorization code exchange.</p>

        [text]POST /auth
Host: user.example.net
Content-type: application/x-www-form-urlencoded

code=xxxxxxxx
&amp;client_id=https://example-app.com/
&amp;redirect_uri=https://example-app.com/redirect
&amp;code_verifier=XXXXXXXXX[/text]

        <p>The response will be a simple JSON object with the user's full profile URL.</p>

        [text]HTTP/1.1 200 OK
Content-Type: application/json

{
  &quot;me&quot;: &quot;https://user.example.net/&quot;
}[/text]

        <p>See <a href="https://indieauth.spec.indieweb.org/#redeeming-the-authorization-code" class="url">https://indieauth.spec.indieweb.org/#redeeming-the-authorization-code</a> for more details about handling the request and response.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:32:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:32:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:20:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:20:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sign-in]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>686</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[23.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[IndieAuth Sign-In Workflow]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"a3ey726","cols":[{"element_id":"qyfz726","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[IndieAuth Authorization Workflow]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/authorization/</link>
		<pubDate>Thu, 10 Aug 2017 18:34:40 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=690</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>When an application is trying to obtain an access token for a user in order to modify or access a user's data, the authorization workflow is used instead. This is analogous to the OAuth 2.0 Authorization Code workflow described in <a href="/oauth2-servers/oauth2-clients/accessing-data/">Accessing Data</a>, except without pre-registration of clients since URLs are used instead.</p>

        <p>The basic flow for a user authorizing an application follows:</p>

        <ul>
          <li>The user enters their personal URL in the sign-in form of the application.</li>
          <li><b>Discovery:</b> The application fetches the URL and finds the user's authorization and token endpoints.</li>
          <li><b>Authorization Request:</b> The application directs the user's browser to the authorization endpoint discovered, as a standard OAuth 2.0 Authorization Grant and requested scopes, along with the user's URL entered in the first step.</li>
          <li><b>Authentication/Approval:</b> The user authenticates at their authorization endpoint, sees the requested scopes, and approves the request. The authorization server generates an authorization code and redirects back to the application's redirect URL.</li>
          <li><b>Token Exchange:</b> The application makes a request to the token endpoint to exchange the authorization code for an access token. The token endpoint responds with an access token and the full URL of the user who authenticated.</li>
        </ul>


        <h3>Authorization Request</h3>

        <p>When the application builds the URL to authenticate the user, the request looks very similar to the OAuth authorization request, except no pre-registration of the client is necessary, and the request will also include the user's profile URL. The URL will look like the below.</p>

        [text]https://user.example.net/auth?
    me=https://user.example.net/
    &amp;response_type=code
    &amp;redirect_uri=https://example-app.com/redirect
    &amp;client_id=https://example-app.com/
    &amp;state=1234567890
    &amp;code_challenge=XXXXXXXXXXXXXXXX
    &amp;code_challenge_method=S256
    &amp;scope=create+update[/text]

        <p>Note that unlike in the authentication request above, this request includes <code>response_type=code</code> and a list of requested scopes the app is requesting.</p>

        <p>The authorization server will ask the user to log in, then present them with an authorization prompt.</p>

        <p>Different IndieAuth servers may present this prompt differently, as shown in the screenshots from my website's authorization server and the WordPress IndieAuth plugin shown below.</p>

<img src="/wp-content/uploads/2018/07/indieauth-authorization-prompt-aaronpk-1024x969.png" alt="" width="1024" height="969" class="alignnone size-large wp-image-730" />

<img src="/wp-content/uploads/2018/07/indieauth-authorization-prompt-wordpress.png" alt="" width="409" height="639" class="alignnone size-large wp-image-731" />

        <p>When the user approves the request, the server redirects the user back to the application with an authorization code in the query string.</p>

        <p>To obtain an access token, the application makes a POST request to the user's token endpoint (the endpoint was discovered in the first discovery step) with the authorization code and other required data.</p>

        [text]POST /token
Host: user.example.net
Content-type: application/x-www-form-urlencoded

grant_type=authorization_code
&amp;code=xxxxxxxx
&amp;client_id=https://example-app.com/
&amp;redirect_uri=https://example-app.com/redirect
&amp;code_verifier=XXXXXXXXXXXXXX[/text]


        <p>The token endpoint will generate an access token for the user, and respond with a normal OAuth 2.0 token response with the addition of the profile URL of the user who authorized the app.</p>

        [text]HTTP/1.1 200 OK
Content-Type: application/json

{
  &quot;me&quot;: &quot;https://user.example.net/&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;access_token&quot;: &quot;XXXXXX&quot;,
  &quot;scope&quot;: &quot;create update&quot;
}[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>690</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:34:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:34:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:11:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:11:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>686</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[23.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[IndieAuth Authorization Workflow]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"h9dk379","cols":[{"element_id":"o918380","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Map of OAuth 2.0 Specs]]></title>
		<link>https://www.oauth.com/oauth2-servers/map-oauth-2-0-specs/</link>
		<pubDate>Thu, 10 Aug 2017 18:37:50 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=693</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The OAuth 2.0 Core Framework (RFC 6749) defines roles and a base level of functionality, but leaves a lot of implementation details unspecified. Since the publication of the RFC, the OAuth Working Group has published many additional specs built on top of this framework to fill in the missing pieces. Looking at the <a href="https://oauth.net/2/" class="external">full list of specs</a> the group is working on can be somewhat overwhelming. This chapter lays out how the various specs relate to each other.</p>


<h2 id="core-specs">Core Specs</h2>

        <h3>OAuth 2.0 Core (RFC 6749)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc6749" class="url">https://datatracker.ietf.org/doc/html/rfc6749</a></p>

        <p>RFC 6749 is the core OAuth 2.0 framework. This describes the roles (resource owner, client, authorization server, etc, described in more detail in <a href="/oauth2-servers/definitions/">Terminology Reference</a>, several authorization flows, and several error definitions. It is important to remember that this is a "framework," as there are many aspects left unspecified that you'll need to fill out when building a complete implementation. Much of these details have been documented as extension specs.</p>

        <h3>Bearer Token Usage (RFC 6750)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc6750">https://datatracker.ietf.org/doc/html/rfc6750</a></p>

        <p>Access token usage is defined in RFC 6750, although the format of access tokens isn't defined here. This spec defines "Bearer Tokens", which just means that it's a type of token that can be used by whoever has the token with no additional information. The particular format access tokens take (random strings, JWTs, etc) is not relevant to OAuth clients so isn't included in this spec. Only the Authorization Server and Resource Server need to coordinate on access token formats, so that is left up to the particular implementation or a future spec.</p>

        <h3>PKCE: Proof Key for Code Exchange (RFC 7636)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7636" class="url">https://datatracker.ietf.org/doc/html/rfc7636</a></p>

        <p>PKCE is an extension to the Authorization Code flow that adds a secure link between starting and completing the flow to prevent authorization codes from being used if intercepted.</p>
        <p>PKCE works by the app first generating a new secret each time it starts the Authorization Code flow, and it sends a hash of the secret in the initial authorization request. The original secret is then required in order to exchange the authorization code for an access token, ensuring that even if an attacker can steal the authorization code, they would be unable to use it.</p>
        <p>At the time of publication, PKCE was recommended for mobile apps, but it has proven to be useful even for JavaScript apps, and now the latest Security Best Current Practice recommends using it for all types of apps, even apps with a client secret.</p>

        <h3>Threat Model and Security Considerations (RFC 6819)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc6819" class="url">https://datatracker.ietf.org/doc/html/rfc6819</a></p>

        <p>The Threat Model and Security Considerations document was written to provide additional guidance beyond what is described in the core RFC. Much of this document was added after major providers had real implementation experience. The document describes many known attacks, either theoretical attacks or ones that have been demonstrated in the wild. It describes countermeasures for each.</p>

        <p>Everyone implementing an OAuth 2.0 server should read this document to avoid falling into traps that have already been explored and solved.</p>

        <h3>OAuth 2.0 Security Best Current Practice (Security BCP)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics" class="url">https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics</a></p>

        <p>OAuth 2.0 Security Best Current Practice describes security requirements and other recommendations for clients and servers implementing OAuth 2.0. This is a new Best Current Practice around OAuth security, intended to capture experience gained from live deployments in the years since the first Security Considerations RFC was published in 2013.</p>
        <p>This spec is also still in draft form, so will likely go through a few more changes before it is finalized as an RFC.</p>
        <p>Some of the concrete recommendations in this draft are deprecating the Implicit flow and Password grant, and recommending that a new refresh token is issued every time one is used.</p>



<h2 id="tokens">Tokens</h2>

        <h3>Token Revocation (RFC 7009)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7009" class="url">https://datatracker.ietf.org/doc/html/rfc7009</a></p>

        <p>Token Revocation describes a new endpoint on the authorization server that clients can use to notify the server that an access token or refresh token is no longer needed. This is used to enable a "log out" feature in clients, allowing the authorization server to clean up any tokens or other data associated with that session.</p>

        <h3>Token Introspection (RFC 7662)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7662" class="url">https://datatracker.ietf.org/doc/html/rfc7662</a></p>

        <p>The Token Introspection spec defines a mechanism for resource servers to obtain information about access tokens. Without this spec, resource servers have to have a bespoke way of checking whether access tokens are valid, and finding out user data about them, etc. This typically occurs by either a custom API endpoint, or because the resource server and authorization server share a database or some other common storage.</p>

        <p>With this spec, resource servers can check the validity of access tokens and find out other information with an HTTP API call, leading to better separation of concerns between the authorization server and any resource servers.</p>

        <h3>JWT Profile for OAuth Access Tokens (RFC 9068)</h3>
        <p><a href="https://datatracker.ietf.org/doc/html/rfc9068" class="url" style="font-size: 0.95em">https://datatracker.ietf.org/doc/html/rfc9068</a></p>
        <p>The JWT Profile defines a JWT-based format and vocabulary for access tokens based on the collective experience learned from several large deployments.</p>


<h2 id="mobile">Mobile and Other Devices</h2>

      <p>These specs are written to enable support of OAuth on a wider variety of devices.</p>

        <h3>OAuth 2.0 for Native Apps (RFC 8252)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc8252" class="url">https://datatracker.ietf.org/doc/html/rfc8252</a></p>

        <p>The intended audience for this spec is implementers of mobile apps or apps running on desktop devices, where interactions between the app and the browser are not as straightforward as in a browser-only environment.</p>
        <p>In this document you'll find security recommendations unique to the native application environment. It describes things like not allowing the third-party application to open an embedded web view which is more susceptible to phishing attacks, as well as platform-specific recommendations on how to do so. It also recommends using the PKCE extension.</p>


        <h3>Browser-Based Apps</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps" class="url">datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps</a></p>

        <p>OAuth 2.0 for Browser-Based Apps describes security requirements and other recommendations for JavaScript apps (commonly known as Single-Page Apps) using OAuth.</p>
        <p>As of this publication, this document is still in draft form and is not yet an RFC. It is likely to go through some more changes before it is finalized. It has been adopted by the working group, which means people broadly recognize the need for this kind of guidance, although the specific recommendations inside have not necessarily yet been fully agreed upon yet.</p>
        <p>This document is intended to complement the Native App Best Current Practice, addressing the specifics of a browser-based environment instead.</p>
        <p>It recommends using the Authorization Code flow with PKCE instead of using the Implicit flow, and disallowing the Password grant by browser apps. It also provides a few different architectural patterns available to these apps.</p>


        <h3>Device Authorization Grant (RFC 8628)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc8628" class="url">https://datatracker.ietf.org/doc/html/rfc8628</a></p>

        <p>The Device Authorization Grant is an extension that enables devices with no browser or limited input capability to use OAuth. You'll typically see this on devices like the Apple TV where there is no web browser, or streaming video encoders where there is no keyboard.</p>

        <p>The flow works by having users visit a URL on a secondary device like a smartphone and entering a code that is shown on the device.</p>

        <p>The Device Flow is described in more detail in <a href="/oauth2-servers/device-flow/">OAuth for Browserless and Input-Constrained Devices</a>.</p>



<h2 id="authentication-and-session">Authentication and Identification</h2>

      <p>These specs are used to provide applications with a user's identity, which is not provided by the core OAuth spec.</p>

        <h3>OpenID Connect</h3>

        <p><a href="https://openid.net/connect/" class="url">https://openid.net/connect/</a></p>
        <p>Since the OAuth framework only describes an authorization method and does not provide any details about the user, OpenID Connect fills this gap by describing an authentication and session management mechanism.</p>

        <p>We cover a brief overview of how OpenID Connect relates to OAuth 2.0 in <a href="/oauth2-servers/openid-connect/">OpenID Connect</a>.</p>

        <h3>IndieAuth</h3>

        <p><a href="https://indieauth.spec.indieweb.org/" class="url">https://indieauth.spec.indieweb.org/</a></p>

        <p>IndieAuth is a decentralized identity protocol built on OAuth 2.0, using URLs to identify users and applications. This avoids the need for prior registration of clients, since all clients have a built-in client ID: the application's URL.</p>

        <p>We cover a brief overview of the authentication and authorization workflows of IndieAuth in <a href="/oauth2-servers/indieauth/">IndieAuth</a>.</p>



<h2 id="interop">Interop</h2>

      <p>In order to support creating completely generic clients that can work with any OAuth 2.0 server, things such as discovery and client registration need to be standardized, since they are out of scope of the core spec.</p>

        <h3>Authorization Server Metadata (RFC 8414)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc8414" class="url">https://datatracker.ietf.org/doc/html/rfc8414</a></p>

        <p>The Authorization Server Metadata spec (also known as Discovery) defines a format for clients to use to look up the information needed to interact with a particular OAuth server. This includes things like finding the authorization endpoint, and listing the supported scopes.</p>

        <h3>Dynamic Client Registration (RFC 7591)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7591" class="url">https://datatracker.ietf.org/doc/html/rfc7591</a></p>

        <p>Typically developers will manually register an application at a service to obtain a Client ID and provide information about the application that will be used on the authorization interface. This spec provides a mechanism for dynamically or programmatically registering clients. This spec was derived from the OpenID Connect Dynamic Client Registration spec and is still compatible with OpenID Connect servers.</p>

        <h3>Dynamic Client Management (RFC 7592)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7592" class="url">https://datatracker.ietf.org/doc/html/rfc7592</a></p>

        <p>In the case that client information needs to be updated, this spec provides a mechanism for doing so programmatically. This spec extends the Dynamic Registration RFC 7591, but is considered experimental still.</p>

<h2 id="high-security">High Security</h2>

      <p>There are a few extensions to OAuth that provide higher levels of security compared to the base profile. Some of these are part of the Financial-Grade API work being done in OpenID Connect as well.</p>

      <h3>Pushed Authorization Requests (RFC 9126)</h3>
      <p><a href="https://datatracker.ietf.org/doc/html/rfc9126" class="url">https://datatracker.ietf.org/doc/html/rfc9126</a></p>
      <p>Pushed Authorization Requests is a significant change to the OAuth flow to rely less on the front channel, by moving the start of the authorization code flow to the back channel instead.</p>

      <h3>JWT Authorization Request (RFC 9101)</h3>
      <p><a href="https://datatracker.ietf.org/doc/html/rfc9101" class="url">https://datatracker.ietf.org/doc/html/rfc9101</a></p>
      <p>JWT Authorization Request describes a way to encode and sign the authorization request parameters as a JWT instead of using plain query string components. This lets the authorization server be sure that a particular OAuth application initiated the authorziation request and the request has not been forged or tampered with.</p>

      <h3>Mutual TLS Bound Access Tokens (RFC 8705)</h3>
      <p><a href="https://datatracker.ietf.org/doc/html/rfc8705" class="url">https://datatracker.ietf.org/doc/html/rfc8705</a></p>
      <p>Mutual TLS Certificate-Bound Access Tokens describes a way to use TLS certificates for client authentication as well as issuing certificate-bound access tokens. This is one way implementers are improving the security of bearer tokens.</p>


<h2 id="experimental">Experimental Specs</h2>

      <p>These are early drafts of some new specs that may end up becoming part of OAuth 2.0. These specs enable additional use cases, or provide better security. These are all still early drafts, so they may change significantly by the time you're reading this, or may have been dropped entirely. These are some things to keep an eye on if you're interested in keeping up to date with the latest developments in the space.</p>

      <h3>Rich Authorization Requests</h3>
      <p><a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar" class="url">https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar</a></p>
      <p>Rich Authorization Requests describes way for apps to request permissions more fine-grained than the current OAuth "scope" mechanism can provide. This could be used, for example, to authorize a particular bank transfer.</p>

      <h3>DPoP</h3>
      <p><a href="https://datatracker.ietf.org/doc/html/draft-fett-oauth-dpop" class="url">https://datatracker.ietf.org/doc/html/draft-fett-oauth-dpop</a></p>
      <p>DPoP describes an alternative to Mutual TLS for issuing access tokens that are bound to a particular client. This version accomplishes that in the application layer rather than transport layer.</p>

<h2 id="enterprise">Enterprise</h2>

      <p>These specs support more advanced enterprise use cases.</p>

        <h3>Assertion Framework (RFC 7521)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7521" class="url">https://datatracker.ietf.org/doc/html/rfc7521</a></p>

        <p>This spec provides a framework for using assertions with OAuth 2.0. It defines a new client authentication mechanism and a new authorization grant type. As this spec is also a framework, it is only useful with one of the specific assertion types described below.</p>

        <h3>JWT Profile for Client Authentication (RFC 7523)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7523" class="url">https://datatracker.ietf.org/doc/html/rfc7523</a></p>

        <p>This spec describes how a JWT can be used for client authentication in place of a client secret. This method is more secure than using a shared client secret as the private key never needs to leave the client, and is instead used to sign a JWT.</p>

        <h3>SAML Assertions (RFC 7522)</h3>

        <p><a href="https://datatracker.ietf.org/doc/html/rfc7522" class="url">https://datatracker.ietf.org/doc/html/rfc7522</a></p>

        <p>This spec describes how a SAML Assertion can be used to request an access token when there is an existing trust relationship with the client. This can be used, for example, to integrate legacy SAML workflows with new OAuth 2.0 systems.</p>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>693</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:37:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:37:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:35:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:35:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[map-oauth-2-0-specs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>24</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Map of OAuth 2.0 Specs]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"zpxy734","cols":[{"element_id":"bj4p735","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Tools and Libraries]]></title>
		<link>https://www.oauth.com/oauth2-servers/tools-and-libraries/</link>
		<pubDate>Thu, 10 Aug 2017 18:56:41 +0000</pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=697</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 id="tools-and-libraries">Tools and Libraries</h2>

  <h3>OAuth 2.0 Playground</h3>

  <p><a href="https://www.oauth.com/playground/" class="url">https://www.oauth.com/playground/</a></p>

<img src="https://www.oauth.com/wp-content/uploads/2018/07/oauth-playground-1024x752.png" alt="" width="1024" height="752" class="alignnone size-large wp-image-719" />

  <p>The OAuth 2.0 Playground walks you through the various OAuth flows by interacting with a real OAuth 2.0 authorization server.</p>

  <p>It has examples of the Authorization Code flow, PKCE, the Device flow, as well as a simple example of OpenID Connect.</p>


    <h2>Example OAuth Client</h2>

    <p><a href="https://example-app.com/client" class="url">https://example-app.com/client</a></p>

    <p>This is an example OAuth client that you can configure using your own OAuth server's authorization endpoint and token endpoint, provide a client ID and optional secret, and step through the OAuth flow with the live server. The tool will show you each redirect or request before it's made so you can see the exact steps in the process.</p>


    <h2>OpenID Connect Debugger</h2>

    <p><a href="https://oidcdebugger.com/" class="url">https://oidcdebugger.com</a></p>

    <p>The OpenID Connect Debugger allows you to test OpenID Connect requests and debug responses from the servers. You can configure the tool to work with any OpenID server such as Google's.</p>


    <h3>Directory of Server and Client Libraries</h3>

    <p><a href="https://oauth.net/code/" class="url">https://oauth.net/code/</a></p>

    <p>The oauth.net website contains a directory of servers, clients and services that support OAuth 2.0. You can find anything from complete OAuth 2.0 server implementations to libraries that facilitate each step of the process, as well as client libraries and proxy services.</p>

    <p>If you have any libraries or services to contribute, you can add them to the directory as well.</p>



  <h3>jwt.io</h3>

  <p><a href="https://jwt.io/" class="url">https://jwt.io</a></p>

[caption id="attachment_1133" align="alignnone" width="1024"]<img src="/wp-content/uploads/2021/12/jwt-io-1024x792.png" alt="jwt.io" width="1024" height="792" class="size-large wp-image-1133" /> jwt.io[/caption]

    <p><a href="https://jwt.io/" class="url">JWT.io</a> is a tool for debugging JSON Web Tokens. It allows you to paste a JWT and it will decode it and show the individual components. It can also verify the signature if you provide it with the secret that was used to sign the JWT.</p>


    <h2>Videos about OAuth</h2>

    <p><a href="https://oauth.net/videos/" class="url">https://oauth.net/videos/</a></p>

    <p>There is a great collection of videos about various OAuth topics at <a href="https://oauth.net/videos/" class="url">oauth.net/videos</a>. Feel free to add yours as well by following the link at the bottom of the website!</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>697</wp:post_id>
		<wp:post_date><![CDATA[2017-08-10 11:56:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-08-10 18:56:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:37:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:37:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tools-and-libraries]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>25</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tools and Libraries]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"b0cj677","cols":[{"element_id":"rokv677","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Appendix]]></title>
		<link>https://www.oauth.com/oauth2-servers/appendix/</link>
		<pubDate>Thu, 12 Jul 2018 16:37:50 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=715</guid>
		<description></description>
		<content:encoded><![CDATA[  <h2>Specifications</h2>

  <ul>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc6749" class="external">OAuth 2.0 (RFC 6749)</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc6750" class="external">Bearer Token Usage (RFC 6750)</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc6819" class="external">OAuth 2.0 Threat Model and Security Considerations</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc7636" class="external">Proof Key for Code Exchange (RFC 7636)</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc8252" class="external">OAuth 2.0 for Native Apps</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc8628" class="external">OAuth 2.0 Device Flow</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc9068" class="external">JWT Profile for OAuth 2.0 Access Tokens</a></li>
      <li><a href="https://datatracker.ietf.org/doc/html/rfc7009" class="external">OAuth 2.0 Token Revocation</a></li>
      <li><a href="https://openid.net/connect/" class="external">OpenID Connect</a></li>
      <li><a href="https://indieauth.spec.indieweb.org/" class="external">IndieAuth</a></li>
      <li><a href="https://tools.ietf.org/wg/oauth/" class="external">All OAuth Working Group Specs</a></li>

  </ul>

  <h2>Vendor Documentation</h2>

  <ul>
      <li><a href="https://developers.google.com/identity/protocols/OAuth2" class="external">Google OAuth 2.0</a></li>
      <li><a href="https://developers.facebook.com/" class="external">Facebook Developers</a></li>
      <li><a href="https://developer.github.com/apps/" class="external">GitHub Documentation</a></li>
      <li><a href="https://developer.foursquare.com/overview/auth" class="external">Foursquare Documentation</a></li>
      <li><a href="https://dev.fitbit.com/build/reference/web-api/oauth2/" class="external">FitBit Documentation</a></li>

  </ul>

  <h2>Community Resources</h2>

  <ul>
      <li><a href="https://aaronparecki.com/articles?tag=oauth" class="external">OAuth articles by Aaron Parecki</a></li>
      <li><a href="https://alexbilbie.com/tag/oauth/" class="external">OAuth articles by Alex Bilbie</a></li>
      <li><a href="https://oauth.net/articles/authentication/" class="external">User Authentication with OAuth 2.0</a></li>
      <li><a href="https://www.ietf.org/mailman/listinfo/oauth" class="external">OAuth IETF Mailing List</a></li>
  </ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>715</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 09:37:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 16:37:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:38:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:38:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[appendix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>26</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Appendix]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"pez366","cols":[{"element_id":"omxn66","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Discovery]]></title>
		<link>https://www.oauth.com/oauth2-servers/indieauth/discovery/</link>
		<pubDate>Thu, 12 Jul 2018 17:25:15 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=738</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Before the app can redirect to the authorization server, the app needs to know <i>which</i> authorization server to direct the user to! This is because each user is identified by a URL, and the user's URL indicates where its authorization server lives.</p>

        <p>The app first needs to prompt the user to enter their URL, or obtain their URL some other way. Typically apps will include a single URL field for the user to enter their URL.</p>

        <p>The app will make an HTTP GET request to the user's profile URL, looking for either an HTTP <code>Link</code> header or an HTML <code>&lt;link&gt;</code> tag with a <code>rel</code> value of <code>authorization_endpoint</code>. In the case that the client is also trying to obtain an access token for the user, it will also look for a <code>rel</code> value of <code>token_endpoint</code>.</p>

        <p>For example, a GET request to <code>https://aaronparecki.com/</code> may return the following, shown as an abbreviated HTTP request.</p>

[text]HTTP/2 200
content-type: text/html; charset=UTF-8
link: &lt;https://aaronparecki.com/auth&gt;; rel=&quot;authorization_endpoint&quot;
link: &lt;https://aaronparecki.com/token&gt;; rel=&quot;token_endpoint&quot;
link: &lt;https://aaronparecki.com/micropub&gt;; rel=&quot;micropub&quot;

&lt;!doctype html&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Aaron Parecki&lt;/title&gt;
&lt;link rel=&quot;authorization_endpoint&quot; href=&quot;/auth&quot;&gt;
&lt;link rel=&quot;token_endpoint&quot; href=&quot;/token&quot;&gt;
&lt;link rel=&quot;micropub&quot; href=&quot;/micropub&quot;&gt;[/text]

        <p>Note that the endpoint URLs may be relative or absolute URLs, and may be on the same domain or on a different domain than the user's endpoint. This allows the user to use hosted services for any component.</p>

        <p>More details on discovery can be found at<br/><a href="https://indieauth.spec.indieweb.org/#discovery-by-clients" class="url">https://indieauth.spec.indieweb.org/#discovery-by-clients</a>.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>738</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 10:25:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 17:25:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 16:07:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 23:07:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[discovery]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>686</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[23.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Discovery]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"aa0d800","cols":[{"element_id":"mslw801","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Refresh Tokens]]></title>
		<link>https://www.oauth.com/oauth2-servers/making-authenticated-requests/refreshing-an-access-token/</link>
		<pubDate>Thu, 12 Jul 2018 20:52:02 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=833</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>When you initially received the access token, it may have included a refresh token as well as an expiration time like in the example below.</p>

[text]{
  &quot;access_token&quot;: &quot;AYjcyMzY3ZDhiNmJkNTY&quot;,
  &quot;refresh_token&quot;: &quot;RjY2NjM5NzA2OWJjuE7c&quot;,
  &quot;token_type&quot;: &quot;bearer&quot;,
  &quot;expires&quot;: 3600
}[/text]

        <p>The presence of the refresh token means that the access token will expire and you'll be able to get a new one without the user's interaction.</p>

        <p>The "expires_in" value is the number of seconds that the access token will be valid. It's up to the service you're using to decide how long access tokens will be valid, and may depend on the application or the organization's own policies. You could use this timestamp to preemptively refresh your access tokens instead of waiting for a request with an expired token to fail. Some people like to get a new access token shortly before the current one will expire in order to save an HTTP request of an API call failing. While that is a perfectly fine optimization, it doesn't stop you from still needing to handle the case where an API call fails if an access token expires before the expected time. Access tokens can expire for many reasons, such as the user revoking an app, or if the authorization server expires all tokens when a user changes their password.</p>

        <p>If you make an API request and the token has expired already, you'll get back a response indicating as such. You can check for this specific error message, and then refresh the token and try the request again.</p>

        <p>If you're using a JSON-based API, then it will likely return a JSON error response with the <code>invalid_token</code> error. In any case, the <code>WWW-Authenticate</code> header will also have the <code>invalid_token</code> error code.</p>

        [text]HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error=&quot;invalid_token&quot;
  error_description=&quot;The access token expired&quot;
Content-type: application/json

{
  &quot;error&quot;: &quot;invalid_token&quot;,
  &quot;error_description&quot;: &quot;The access token expired&quot;
}[/text]

        <p>When your application recognizes this specific error, it can then make a request to the token endpoint using the refresh token it previously received, and will get back a new access token it can use to retry the original request.</p>

        <p>To use the refresh token, make a POST request to the service's token endpoint with <code>grant_type=refresh_token</code>, and include the refresh token as well as the client credentials if required.</p>

        [text]POST /oauth/token HTTP/1.1
Host: authorization-server.com

grant_type=refresh_token
&amp;refresh_token=xxxxxxxxxxx
&amp;client_id=xxxxxxxxxx
&amp;client_secret=xxxxxxxxxx[/text]

        <p>The response will be a new access token, and optionally a new refresh token, just like you received when exchanging the authorization code for an access token.</p>

        [text]{
  &quot;access_token&quot;: &quot;BWjcyMzY3ZDhiNmJkNTY&quot;,
  &quot;refresh_token&quot;: &quot;Srq2NjM5NzA2OWJjuE7c&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;expires&quot;: 3600
}[/text]

        <p>If you do not get back a new refresh token, then it means your existing refresh token will continue to work when the new access token expires.</p>

        <p>The most secure option is for the authorization server to issue a new refresh token each time one is used. This is the recommendation in the latest <a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics" class="external url">Security Best Current Practice</a> which enables authorization servers to detect if a refresh token is stolen. This is especially important for clients that don't have a client secret, since the refresh token becomes the only thing needed to get new access tokens.</p>

        <p>When the refresh token changes after each use, if the authorization server ever detects a refresh token was used twice, it means it has likely been copied and is being used by an attacker, and the authorization server can revoke all access tokens and refresh tokens associated with it immediately.</p>

        <p>Keep in mind that at any point the user can revoke an application <a href="#revoking_access" class="pageref"></a>, so your application needs to be able to handle the case when using the refresh token also fails. At that point, you will need to prompt the user for authorization again, beginning a new OAuth flow from scratch.</p>

        <p>You might notice that the "expires_in" property refers to the access token, not the refresh token. The expiration time of the refresh token is intentionally never communicated to the client. This is because the client has no actionable steps it can take even if it were able to know when the refresh token would expire. There are also many reasons refresh tokens may expire prior to any expected lifetime of them as well.</p>

        <p>If a refresh token expires for any reason, then the only action the application can take is to ask the user to log in again, starting a new OAuth flow from scratch, which will issue a new access token and refresh token to the application. That's the reason it doesn't matter whether the application knows the expected lifetime of the refresh token, because regardless of the reason it expires the outcome is always the same.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>833</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 13:52:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 20:52:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:35:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:35:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[refreshing-an-access-token]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>138</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[7.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Refresh Tokens]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"warh989","cols":[{"element_id":"yhr8989","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization]]></title>
		<link>https://www.oauth.com/oauth2-servers/mobile-and-native-apps/authorization/</link>
		<pubDate>Thu, 12 Jul 2018 21:02:20 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=838</guid>
		<description></description>
		<content:encoded><![CDATA[Create a "Log in" button that will open a secure web browser within the app (<code>ASWebAuthenticationSession</code> or <code>SFSafariViewController</code> on iOS, and "Custom Tabs" on Android). You'll use the same parameters for the authorization request as described in <a href="/oauth2-servers/server-side-apps/" class="section">Server-Side Apps</a> including the PKCE parameters.

The resulting redirect will include the temporary authorization code which the app will exchange for an access token from its native code.

<h3>Example</h3>
In this example we will walk through a simple iPhone application that obtains authorization to access a fictional API.

<h3>Initiate the authorization request</h3>
To begin the authorization process, the app should have a "sign in" button. The link should be constructed as a full URL to the service's authorization endpoint.

The client first creates what is known as a PKCE "<i>code verifier</i>". This is a cryptographically random string using the characters <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, and the punctuation characters <code>-._~</code> (hyphen, period, underscore, and tilde), between 43 and 128 characters long.

Once the app has generated the code verifier, it uses that to create the <i>code challenge</i>. The code challenge is a Base64-URL-encoded string of the SHA256 hash of the code verifier. This hashed value is sent in the authorization request, so that the original random string is never exposed to anything outside the app.

The authorization request parameters are used to create the authorization URL, such as:

[text]https://authorization-server.com/authorize
?client_id=eKNjzFFjH9A1ysYd
&amp;response_type=code
&amp;redirect_uri=com.example.app://auth
&amp;state=1234zyx
&amp;scope=photos
&amp;code_challenge=hKpKupTM381pE10yfQiorMxXarRKAHRhTfH_xkGf7U4
&amp;code_challenge_method=S256[/text]

Note in this case the custom scheme of the redirect URL. Both iOS and Android provide the ability for apps to register custom URL schemes which can be used as the redirect URL. This is also sometimes called "deep linking" in the platform's documentation. Both platforms also allow the app to register itself to be launched when a matching URL pattern is visited ("Universal Links" on iOS and "App Links" on Android). Both methods provide approximately the same experience when using an app, but the "Universal/App Links" method provides better fallback behavior when the URL is visited if the user doesn't have the app installed. The "Universal Links" and "App Links" methods are generally considered more modern and are probably what you should use going forward.

When the user taps the "Sign In" button, the app should open the authorization URL in a secure in-app browser (<code>ASWebAuthenticationSession</code> on iOS, or a "Custom Tab" on Android). Using an embedded <code>WebView</code> window within the app is considered extremely dangerous, as this provides the user no guarantee they are looking at the service's own website and so is an easy source of a phishing attack. The embedded web view also provides a worse user experience since it does not share system cookies and the user will always have to enter their credentials. By using the platform's secure browser APIs which share cookies with the system browser, you have the advantage of the user potentially already being signed in to the service as well and not needing to enter their credentials every time.

<h3>The user approves the request</h3>
Upon being directed to the auth server, the user sees an authorization request shown below.

[caption id="" align="aligncenter" width="400"]<img class="" src="/wp-content/uploads/2017/08/sfsafariviewcontroller-example.png" alt="" width="400" /> An embedded <code>ASWebAuthenticationSession</code>. The "Done" button in the top right corner collapses the view and returns the user to the app.[/caption]

<h3>The service redirects the user back to the app</h3>
When the user finishes signing in, the service will redirect back to your app's redirect URL which will cause the secure browser API to send the resulting URL to your app. The <code>Location</code> header from the redirect will look something like the following, which will be passed to your app.

[text]com.example.app://auth://auth?state=1234zyx
&amp;code=lS0KgilpRsT07qT_iMOg9bBSaWqODC1g061nSLsa8gV2GYtyynB6A[/text]

Your app should then parse out the state value and authorization code from the URL, verify the state matches the value it set, and then exchange the authorization code for an access token.

<h4>Exchange the authorization code for an access token</h4>

        <p>To exchange the authorization code for an access token, the app makes a POST request to the service's token endpoint. This happens from the app's native code rather than from within the browser, since that's where the PKCE code_verifier was stored. The request will have the following parameters.</p>

        <h5><code>grant_type</code> (required)</h5>

        <p>The <code>grant_type</code> parameter must be set to "<code>authorization_code</code>".</p>

        <h5><code>code</code> (required)</h5>

        <p>This parameter is for the authorization code received from the authorization server which will be in the query string parameter "code" in this request.</p>

        <h5><code>redirect_uri</code> (possibly required)</h5>

        <p>If the redirect URL was included in the initial authorization request, it must be included in the token request as well, and must be identical. Some services support registering multiple redirect URLs, and some require the redirect URL to be specified on each request. Check the service's documentation for the specifics.</p>

        <h5><code>code_verifier</code> (required)</h5>

        <p>Since the client included a <code>code_challenge</code> parameter in the initial request, it must now prove it has the secret used to generate the hash by sending it in the POST request. This is the plaintext string that was used to calculate the hash that was previously sent in the <code>code_challenge</code> parameter.</p>

        <h5>Client Identification (required)</h5>

        <p>Despite the client secret not being used in this flow, the request requires sending the client ID to identify the application making the request. This means the client must include the client ID as a POST body parameter rather than using HTTP Basic Authentication like it can when including the client secret as well.</p>

[text]POST /oauth/token HTTP/1.1
Host: authorization-endpoint.com

grant_type=code
&amp;code=Yzk5ZDczMzRlNDEwY
&amp;redirect_uri=com.example.app://auth
&amp;client_id=eKNjzFFjH9A1ysYd
&amp;code_verifier=Th7UHJdLswIYQxwSg29DbK1a_d9o41uNMTRmuH0PM8zyoMAQ[/text]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>838</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:02:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:02:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:22:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:22:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>33</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[6.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"rtbx628","cols":[{"element_id":"ar7k629","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Considerations]]></title>
		<link>https://www.oauth.com/oauth2-servers/mobile-and-native-apps/security-considerations/</link>
		<pubDate>Thu, 12 Jul 2018 21:04:45 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=841</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Always use the secure embedded browser APIs, or launch a native browser</h3>

It is critical that the application use the appropriate browser APIs on the platforms rather than use embedded web views. On iOS, this is either <code>ASWebAuthenticationSession</code> or <code>SFSafariViewController</code>, and on Android this is known as "Custom Tabs".

Using an embedded web view has many downsides, resulting in a higher likelihood of the user falling for a phishing attack since it provides no way for the user to verify the origin of the web page they're looking at. It would be trivial for an attacker to create a web page that looks just like the authorization web page and embed it in their own malicious app, giving them the ability to steal usernames and passwords.

On the user experience side, using an embedded web view also has the downside of the web view not sharing system cookies so the user will be forced to enter their credentials every time. Instead, using the appropriate secure browser APIs will provide the opportunity for the user to bypass entering their credentials in the app if they're already logged in to the authorization server in their browser.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:04:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:04:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:24:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:24:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-considerations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>33</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[6.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Security Considerations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"bmqz370","cols":[{"element_id":"llhq370","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Implicit Flow for Single-Page Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/implicit-flow/</link>
		<pubDate>Thu, 12 Jul 2018 21:27:12 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=847</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Some services have historically used the alternative Implicit Flow for single-page apps, rather than the current recommendation of using the Authorization Code with PKCE.</p>

        <p>The Implicit Flow bypasses the code exchange step, and instead the access token is returned in the query string fragment to the client immediately.</p>

        <p>There are a number of concerns with this approach, enough that many providers have opted to avoid implementing the Implicit flow completely.</p>

        <p>The Implicit flow in OAuth 2.0 was created over 10 years ago, when browsers worked very differently than they do today. The primary reason the Implicit flow was created was because of an old limitation in browsers. It used to be the case that JavaScript could only make requests to the same domain that the page was loaded from. However, the standard OAuth Authorization Code flow requires that a POST request is made to the OAuth server’s token endpoint, which is often on a different domain than the app. That meant there was previously no way to use this flow from JavaScript. The Implicit flow worked around this limitation by avoiding that POST request, and instead returning the access token immediately in the redirect.</p>

        <p>Today, Cross-Origin Resource Sharing (CORS) is universally adopted by browsers, removing the need for this compromise. CORS provides a way for JavaScript to make requests to servers on a different domain as long as the destination allows it. This opens up the possibility of using the Authorization Code flow in JavaScript.</p>

        <p>It's worth noting that the Implicit flow has always been seen as a compromise compared to the Authorization Code flow. For example, the spec provides no mechanism to return a refresh token in the Implicit flow, as it was seen as too insecure to allow that. The spec also recommends short lifetimes and limited scope for access tokens issued via the Implicit flow.</p>

        <p>In any case, with both the Implicit Flow as well as the Authorization Code Flow with PKCE, the server must require registration of the redirect URL in order to maintain the security of the flow.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:27:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:27:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:17:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:17:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[implicit-flow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[5.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"dkko331","cols":[{"element_id":"i38e332","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Implicit Flow for Single-Page Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Example Flow]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/example-flow/</link>
		<pubDate>Thu, 12 Jul 2018 21:31:10 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=850</guid>
		<description></description>
		<content:encoded><![CDATA[/oauth2-servers/single-page-apps/#example]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>850</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:31:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:31:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 14:31:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 21:31:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example-flow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[template-redirect.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[5.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57b1f03d9957e]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Security Considerations for Single-Page Apps]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/security-considerations/</link>
		<pubDate>Thu, 12 Jul 2018 21:50:33 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=854</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>With browser-based apps there is always a risk of things like Cross-Site Scripting (XSS) attacks due to the increased attack surface and number of moving parts in websites. Additionally, browsers currently don't have a secure storage mechanism available to store things like the access token or refresh token. As such, browsers are always considered a higher risk in an OAuth deployment compared to other platforms, and the authorization server will usually have special policies around token lifetimes to mitigate that risk.</p>

        <h3>Refresh Tokens</h3>

        <p>Historically, with the Implicit flow, there was never any mechanism for returning refresh tokens to JavaScript applications. This made sense at the time, because it was well known that the Implicit flow was less secure, and without a client secret, a refresh token can be used to get new access tokens indefinitely, so this would be an even greater risk than a leaked access token. There was also little need for a refresh token since JavaScript apps would only be running when the user was actively using the browser, so they could redirect to the authorization server to get a new access token if needed.</p>

        <p>With the developments over the last few years of adopting PKCE for JavaScript apps, there is now the potential for refresh tokens to be issued to JavaScript apps as well. This ends up being a policy decision of the authorization server as to whether refresh tokens will be issued, depending on the level of risk the authorization server is willing to tolerate.</p>

        <p>Additionally, the additions of browser APIs such as <code>ServiceWorkers</code> means that now browser-based apps have the potential to run code when the user isn't actively using the browser, such as in response to a Background Sync event. This means there is now more potential use for refresh tokens in browser apps.</p>

        <p>If the authorization server wishes to allow JavaScript apps to use refresh tokens, then they must also follow the best practices outlined in "<a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics" class="external">OAuth 2.0 Security Best Current Practice</a>" and "<a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps" class="external">OAuth 2.0 for Browser-Based Apps</a>", two recent documents adopted by the OAuth Working Group. Specifically, refresh tokens must be valid for only one use, and the authorization server must issue a new refresh token each time a new access token is issued in response to a refresh token grant. This provides the authorization server a way to detect if a refresh token has been copied and used by an attacker, since in normal operation of an app a refresh token would be used only once.</p>

        <p>Refresh tokens must also either have a set maximum lifetime, or expire if they are not used within some amount of time. This is again another way to help mitigate the risks of a stolen refresh token.</p>


        <h3>Storing Tokens</h3>

        <p>The browser-based app will need to temporarily store some pieces of information during the authorization flow, and then permanently store the resulting access token and refresh token. This provides some challenges in the browser environment since there are currently no general-purpose secure storage mechanism in browsers.</p>

        <p>Generally, the browser's <code>LocalStorage</code> API is the best place to store this data as it provides the easiest API to store and retrieve data and is about as secure as you can get in a browser. The downside is that any scripts on the page, even from different domains such as your analytics or ad network, will be able to access the <code>LocalStorage</code> of your application. This means anything you store in <code>LocalStorage</code> is potentially visible to third-party scripts on your page.</p>

        <p>Because of the risks of data leakage from third-party scripts, it is extremely important to have a good Content-Security Policy configured for your app so that you can be more confident that arbitrary scripts aren't able to run in the application. A good document on configuring a Content Security Policy is available from OWASP at <a href="https://owasp.org/www-project-cheat-sheets/cheatsheets/Content_Security_Policy_Cheat_Sheet.html" class="url">https://owasp.org/www-project-cheat-sheets/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</a></p>


        <h3>Choosing an Alternative Architecture</h3>

        <p>Due to the inherent risks of performing an OAuth flow in a pure JavaScript environment, as well as the risks of storing tokens in a JavaScript app, it is also advisable to consider an alternative architecture where the OAuth flow is handled outside of the JavaScript code by a dynamic backend component. This is a relatively common architectural pattern where an application is served from a dynamic backend such as a .NET or Java app, but it uses a single-page app framework like React or Angular for its UI. If your app falls under this architectural pattern, then the best option is to move all of the OAuth flow to the server component, and keep the access tokens and refresh tokens out of the browser entirely. Note that in this case since your app has a dynamic backend, it is also considered a confidential client and can use a client secret to further protect the OAuth exchanges.</p>

        <p>This pattern is described in more detail in "<a href="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-browser-based-apps" class="external">OAuth 2.0 for Browser-Based Apps</a>".</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>854</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:50:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:50:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 13:16:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 20:16:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[security-considerations]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[5.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Security Considerations for Single-Page Apps]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"k67u187","cols":[{"element_id":"qaxf189","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization]]></title>
		<link>https://www.oauth.com/oauth2-servers/single-page-apps/authorization/</link>
		<pubDate>Thu, 12 Jul 2018 21:51:09 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=856</guid>
		<description></description>
		<content:encoded><![CDATA[/oauth2-servers/single-page-apps/#authorization]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>856</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 14:51:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 21:51:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 14:51:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 21:51:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[template-redirect.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[5.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57b1f03d9957e]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Code Grant]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/authorization-code/</link>
		<pubDate>Thu, 12 Jul 2018 22:04:03 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=865</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>The authorization code is a temporary code that the client will exchange for an access token. The code itself is obtained from the authorization server where the user gets a chance to see what the information the client is requesting, and approve or deny the request.</p>

        <p>The authorization code flow offers a few benefits over the other grant types. When the user authorizes the application, they are redirected back to the application with a temporary code in the URL. The application exchanges that code for the access token. When the application makes the request for the access token, that request can be authenticated with the client secret, which reduces the risk of an attacker intercepting the authorization code and using it themselves. This also means the access token is never visible to the user or their browser, so it is the most secure way to pass the token back to the application, reducing the risk of the token leaking to someone else.</p>

        <p>The first step of the web flow is to request authorization from the user. This is accomplished by creating an authorization request link for the user to click on.</p>

        <p>The authorization URL is usually in a format such as:</p>

        [text]https://authorization-server.com/oauth/authorize
?client_id=a17c21ed
&amp;response_type=code
&amp;state=5ca75bd30
&amp;redirect_uri=https%3A%2F%2Fexample-app.com%2Fauth
&amp;scope=photos[/text]

        <p>The exact URL endpoint will be specified by the service to which you are connecting, but the parameter names will always be the same.</p>

        <p>Note that you will most likely first need to register your redirect URL at the service before it will be accepted. This also means you can't change your redirect URL per request. Instead, you can use the <code>state</code> parameter to customize the request. See below for more information.</p>

        <p>After the user visits the authorization page, the service shows the user an explanation of the request, including application name, scope, etc. (See <a href="#clients-authorization-interface" class="section">"approves the request"</a> for an example screenshot.) If the user clicks "approve", the server will redirect back to the app, with a "code" and the same "state" parameter you provided in the query string parameter. It is important to note that this is not an access token. The only thing you can do with the authorization code is to make a request to get an access token.</p>

        <h4>OAuth Security</h4>
        <p>Up until 2019, the OAuth 2.0 spec only recommended using the <a href="/oauth2-servers/pkce/">PKCE</a> extension for mobile and JavaScript apps. The latest OAuth Security BCP now recommends using PKCE also for server-side apps, as it provides some additional benefits there as well. It is likely to take some time before common OAuth services adapt to this new recommendation, but if you're building a server from scratch you should definitely support PKCE for all types of clients.</p>

        <h4>Authorization Request Parameters</h4>

        <p>The following parameters are used to make the authorization request. You should build a query string with the below parameters, appending that to the application's authorization endpoint obtained from its documentation.</p>

        <h5><code>response_type=code</code></h5>

        <p><code>response_type</code> is set to <code>code</code> indicating that you want an authorization code as the response.</p>

        <h5><code>client_id</code></h5>

        <p>The <code>client_id</code> is the identifier for your app. You will have received a client_id when first registering your app with the service.</p>

        <h5><code>redirect_uri</code> (optional)</h5>

        <p>The <code>redirect_uri</code> may be optional depending on the API, but is highly recommended. This is the URL to which you want the user to be redirected after the authorization is complete. This must match the redirect URL that you have previously registered with the service.</p>

        <h5><code>scope</code> (optional)</h5>

        <p>Include one or more scope values (space-separated) to request additional levels of access. The values will depend on the particular service.</p>

        <h5><code>state</code></h5>

        <p>The <code>state</code> parameter serves two functions. When the user is redirected back to your app, whatever value you include as the state will also be included in the redirect. This gives your app a chance to persist data between the user being directed to the authorization server and back again, such as using the state parameter as a session key. This may be used to indicate what action in the app to perform after authorization is complete, for example, indicating which of your app's pages to redirect to after authorization.</p>

        <p>The state parameter also serves as a CSRF protection mechanism if it contains a random value per request. When the user is redirected back to your app, double check that the state value matches what you set it to originally.</p>

        <h5>PKCE</h5>

        <p>If the service supports PKCE for web server apps, include the PKCE challenge and challenge method here as well. This is described in a complete example in <a href="/oauth2-servers/single-page-apps/">Single-Page Apps</a> and <a href="/oauth2-servers/mobile-and-native-apps/" class="section">Mobile Apps</a>.</p>

        <p>Combine all of these query string parameters into the authorization URL, and direct the user's browser there. Typically apps will put these parameters into a login button, or will send this URL as an HTTP redirect from the app's own login URL.</p>

        <h4>The user approves the request</h4>

        <p>After the user is taken to the service and sees the request, they will either allow or deny the request. If they allow the request, they will be redirected back to the redirect URL specified along with an authorization code in the query string. The app then needs to exchange this authorization code for an access token.</p>

        <h4>Exchange the authorization code for an access token</h4>

        <p>To exchange the authorization code for an access token, the app makes a POST request to the service's token endpoint. The request will have the following parameters.</p>

        <h5><code>grant_type</code> (required)</h5>

        <p>The <code>grant_type</code> parameter must be set to "authorization_code".</p>

        <h5><code>code</code> (required)</h5>

        <p>This parameter is for the authorization code received from the authorization server which will be in the query string parameter "code" in this request.</p>

        <h5><code>redirect_uri</code> (possibly required)</h5>

        <p>If the redirect URL was included in the initial authorization request, it must be included in the token request as well, and must be identical. Some services support registering multiple redirect URLs, and some require the redirect URL to be specified on each request. Check the service's documentation for the specifics.</p>

        <h5>Client Authentication (required)</h5>

        <p>The service will require the client authenticate itself when making the request for an access token. Typically services support client authentication via HTTP Basic Auth with the client's <code>client_id</code> and <code>client_secret</code>. However, some services support authentication by accepting the <code>client_id</code> and <code>client_secret</code> as POST body parameters. Check the service's documentation to find out what the service expects, since the OAuth 2.0 spec leaves this decision up to the service.</p>
        <p>More advanced OAuth servers may also require other forms of client authentication such as mTLS or <code>private_key_jwt</code>. Refer to the service's own documentation for those examples.</p>

        <h5>PKCE Verifier</h5>

        <p>If the service supports PKCE for web server apps, then the client will need to include the followup PKCE parameter when exchanging the authorization code as well. Again, see <a href="/oauth2-servers/single-page-apps/">Single-Page Apps</a> and <a href="/oauth2-servers/mobile-and-native-apps/">Mobile Apps</a> for a complete example of using the PKCE extension.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>865</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:04:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:04:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:20:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:20:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Code Grant]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"rtop938","cols":[{"element_id":"0ane939","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Example Flow]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/example-flow/</link>
		<pubDate>Thu, 12 Jul 2018 22:08:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=869</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>The following step-by-step example illustrates using the authorization code flow with PKCE.</p>

        <h4>Step-by-step</h4>

        <p>The high level overview is this:</p>

         <ul>
          <li>Create a log-in link with the app's client ID, redirect URL, state, and PKCE code challenge parameters</li>
          <li>The user sees the authorization prompt and approves the request</li>
          <li>The user is redirected back to the app's server with an auth code</li>
          <li>The app exchanges the auth code for an access token</li>
         </ul>

        <h5>The app initiates the authorization request</h5>

        <p>The app initiates the flow by crafting a URL containing client ID, scope, state and PKCE code verifier. The app can put this into an <code>&lt;a href=""&gt;</code> tag.</p>

        [html]&lt;a href=&quot;https://authorization-server.com/oauth/authorize
?response_type=code&amp;client_id=mRkZGFjM&amp;state=5ca75bd30
&amp;scope=photos
&amp;code_challenge_method=S256
&amp;code_challenge=hKpKupTM391pE10xfQiorMxXarRKAHRhTfH_xkGf7U4&quot;&gt;
Connect Your Account&lt;/a&gt;[/html]

        <p>Note that this is not an HTTP call your application is making, instead this is a URL that the user will click on to redirect their browser to the OAuth server.</p>

        <h5 id="clients-authorization-interface">The user approves the request</h5>

        <p>Upon being directed to the authorization server, the user sees the authorization request shown in the illustration below. If the user approves the request, they will be redirected back to the app along with the auth code and state parameters.</p>

[caption id="attachment_510" align="aligncenter" width="650"]<img class="wp-image-510 " src="https://www.oauth.com/wp-content/uploads/2016/08/okta_oauth-diagrams_20170622-01-1.png" alt="" width="650" height="370" /> Example Authorization Request[/caption]

        <h5>The service redirects the user back to the app</h5>

        <p>The service sends a redirect header redirecting the user's browser back to the app that made the request. The redirect will include a "code" in the URL and the original "state".</p>

        [text]https://example-app.com/cb?code=Yzk5ZDczMzRlNDEwY&amp;state=5ca75bd30[/text]

        <p>(This will actually be sent back as an HTTP response from the authorization server to the user's browser, <i>not</i> to your application. The actual HTTP response isn't shown here because it is not significant to the code you write in your application.)</p>

        <h5>The app exchanges the auth code for an access token</h5>

        <p>Finally the application uses the authorization code to get an access token by making an HTTPS POST request to the authorization server's token endpoint.</p>

[text]POST /oauth/token HTTP/1.1
Host: authorization-server.com

code=Yzk5ZDczMzRlNDEwY
&amp;grant_type=code
&amp;redirect_uri=https://example-app.com/cb
&amp;client_id=mRkZGFjM
&amp;client_secret=ZGVmMjMz
&amp;code_verifier=Th7UHJdLswIYQxwSg29DbK1a_d9o41uNMTRmuH0PM8zyoMAQ[/text]

        <p>The authorization server validates the request and responds with an access token and optional refresh token if the access token will expire.</p>

        <p>Response:</p>

[javascript]{
  &quot;access_token&quot;: &quot;AYjcyMzY3ZDhiNmJkNTY&quot;,
  &quot;refresh_token&quot;: &quot;RjY2NjM5NzA2OWJjuE7c&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;expires&quot;: 3600
}[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>869</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:08:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:08:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:34:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:34:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example-flow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Example Flow]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"jpth477","cols":[{"element_id":"k9eq477","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Possible Errors]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/possible-errors/</link>
		<pubDate>Thu, 12 Jul 2018 22:09:35 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=872</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>There are several cases where you may get an error response during authorization.</p>

        <p>Errors are indicated by redirecting back to the provided redirect URL with additional parameters in the query string. There will always be an error parameter, and the redirect may also include <code>error_description</code> and <code>error_uri</code>.</p>

For example,

[text]https://example-app.com/cb?error=invalid_scope[/text]

<div data-type="note">

Despite the fact that servers return an <code>error_description</code> key, the error description is not intended to be displayed to the user. Instead, you should present the user with your own error message. This allows you to tell the user an appropriate action to take to correct the problem, and also gives you a chance to localize the error messages if you're building a multi-language website.

</div>

<h4>Invalid redirect URL</h4>
If the redirect URL provided is invalid, the authorization server will not redirect to it. Instead, it may display a message to the user describing the problem instead.
<h4>Unrecognized <code>client_id</code></h4>
If the client ID is not recognized, the authorization server will not redirect the user. Instead, it may display a message describing the problem.
<h4>The user denies the request</h4>
If the user denies the authorization request, the server will redirect the user back to the redirect URL with <code>error=access_denied</code> in the query string, and no code will be present. It is up to the app to decide what to display to the user at this point.
<h4>Invalid parameters</h4>
If one or more parameters are invalid, such as a required value is missing, or the <code>response_type</code> parameter is wrong, the server will redirect to the redirect URL and include query string parameters describing the problem. The other possible values for the error parameter are:

<code>invalid_request</code>: The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed.

<code>unauthorized_client</code>: The client is not authorized to request an authorization code using this method.

<code>unsupported_response_type</code>: The authorization server does not support obtaining an authorization code using this method.

<code>invalid_scope</code>: The requested scope is invalid, unknown, or malformed.

<code>server_error</code>: The authorization server encountered an unexpected condition which prevented it from fulfilling the request.

<code>temporarily_unavailable</code>: The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.

In addition, the server may include parameters <code>error_description</code> and <code>error_uri</code> with additional information about the error.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>872</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:09:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:09:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:35:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:35:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[possible-errors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Possible Errors]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"hf7s707","cols":[{"element_id":"lh97708","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[User Experience and Security Considerations]]></title>
		<link>https://www.oauth.com/oauth2-servers/server-side-apps/user-experience/</link>
		<pubDate>Thu, 12 Jul 2018 22:10:46 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=874</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>In order for the authorization code grant to be secure, the authorization page must appear in a web browser the user is familiar with, and must not be embedded in an iframe popup or an embedded browser in a mobile app. If it could be embedded in another website, the user would have no way of verifying it is the legitimate service and is not a phishing attempt.</p>

        <p>If an app wants to use the authorization code grant but can't protect its secret (i.e. native mobile apps or single-page JavaScript apps), then the client secret is not required when making a request to exchange the auth code for an access token, and PKCE must be used as well. However, some services still do not support PKCE, so it may not be possible to perform an authorization flow from the single-page app itself, and the client-side JavaScript code may need to have a companion server-side component that performs the OAuth flow instead.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>874</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:10:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:10:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:37:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:37:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[user-experience]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>95</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[User Experience Considerations]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"z76h546","cols":[{"element_id":"yn5l547","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Create an Application]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/create-an-application/</link>
		<pubDate>Thu, 12 Jul 2018 22:34:00 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=883</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Before we can begin, we'll need to create an application in the Google API Console in order to get a client ID and client secret, and register the redirect URL.</p>

        <p>Visit <a href="https://console.developers.google.com/" class="url">https://console.developers.google.com/</a> and create a new project. You'll also need to create OAuth 2.0 credentials for the project since Google does not do that automatically. From the sidebar, click the <b>Credentials</b> tab, then click <b>Create credentials</b> and choose <b>OAuth client ID</b> from the dropdown.</p>

[caption id="attachment_884" align="alignnone" width="1024"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/google-create-credentials-1024x716.png" alt="" width="1024" height="716" class="size-large wp-image-884" /> Create Credentials for your App on the Google API Console[/caption]

        <p>The Google Console will prompt for some information about your application such as the product name, a home page, and a logo. On the next page, select <b>Web application</b> type, and enter the redirect URL where the script we'll build next will live. You will then receive a client ID and secret.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>883</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:34:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:34:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:34:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:34:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[create-an-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Create an Application]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Setting up the Environment]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/setting-up-the-environment/</link>
		<pubDate>Thu, 12 Jul 2018 22:40:01 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=886</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>This example code is written in PHP with no external packages required and no framework needed. Hopefully this makes it easy to translate to other languages if desired. To follow along with this example code, you can place it all in a single PHP file.</p>

        <p>Create a new folder and create an empty file in that folder called <code>index.php</code>. From the command line, run <code>php -S localhost:8000</code> from inside that folder, and you'll be able to visit <a href="http://localhost:8000/" class="url">http://localhost:8000</a> in your browser to run your code. All the code in the examples below should be added to this <code>index.php</code> file.</p>

        <p>Let's set up a few variables we'll need for the OAuth process, adding the client ID and secret we got from Google when we created the application.</p>

[php]
// Fill these out with the values you got from Google
$googleClientID = '';
$googleClientSecret = '';

// This is the URL we'll send the user to first
// to get their authorization
$authorizeURL = 'https://accounts.google.com/o/oauth2/v2/auth';

// This is Google's OpenID Connect token endpoint
$tokenURL = 'https://www.googleapis.com/oauth2/v4/token';

// The URL for this script, used as the redirect URL
$baseURL = 'https://' . $_SERVER['SERVER_NAME']
    . $_SERVER['PHP_SELF'];

// Start a session so we have a place
// to store things between redirects
session_start();
[/php]

        <p>With those variables defined, and the session started, let's set up the logged in and logged out pages. We'll show a super simple page that just indicates whether the user is logged in or not, and has a link to log in or log out.</p>

[php]
// If there is a user ID in the session
// the user is already logged in
if(!isset($_GET['action'])) {
  if(!empty($_SESSION['user_id'])) {
    echo '&lt;h3&gt;Logged In&lt;/h3&gt;';
    echo '&lt;p&gt;User ID: '.$_SESSION['user_id'].'&lt;/p&gt;';
    echo '&lt;p&gt;Email: '.$_SESSION['email'].'&lt;/p&gt;';
    echo '&lt;p&gt;&lt;a href=&quot;?action=logout&quot;&gt;Log Out&lt;/a&gt;&lt;/p&gt;';

    // Fetch user info from Google's userinfo endpoint
    echo '&lt;h3&gt;User Info&lt;/h3&gt;';
    echo '&lt;pre&gt;';
    $ch = curl_init('https://www.googleapis.com/oauth2/v3/userinfo');
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'Authorization: Bearer '.$_SESSION['access_token']
    ]);
    curl_exec($ch);
    echo '&lt;/pre&gt;';

  } else {
    echo '&lt;h3&gt;Not logged in&lt;/h3&gt;';
    echo '&lt;p&gt;&lt;a href=&quot;?action=login&quot;&gt;Log In&lt;/a&gt;&lt;/p&gt;';
  }
  die();
}
[/php]

        <p>The logged-out view contains a link to our login URL which starts the flow.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>886</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:40:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:40:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:40:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:40:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[setting-up-the-environment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Setting up the Environment]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/authorization-request/</link>
		<pubDate>Thu, 12 Jul 2018 22:41:27 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=888</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Now that we have the necessary variables set up, let's start the OAuth process.</p>

        <p>The first thing we'll have people do is visit this page with <code>?action=login</code> in the query string to kick off the process.</p>

        <p>Note that scopes in this request are now OpenID Connect scopes, "openid email", indicating that we are not requesting access to the user's Google data, just wanting to know who they are.</p>

        <p>Also note that we are using the <code>response_type=code</code> parameter to indicate that we want Google to return an authorization code that we'll exchange for the <code>id_token</code> later.</p>

[php]
// Start the login process by sending the user
// to Google's authorization page
if(isset($_GET['action']) &amp;&amp; $_GET['action'] == 'login') {
  unset($_SESSION['user_id']);

  // Generate a random string and store in the session
  $_SESSION['state'] = bin2hex(random_bytes(16));

  $params = array(
    'response_type' =&gt; 'code',
    'client_id' =&gt; $googleClientID,
    'redirect_uri' =&gt; $baseURL,
    'scope' =&gt; 'openid email',
    'state' =&gt; $_SESSION['state']
  );

  // Redirect the user to Google's authorization page
  header('Location: '.$authorizeURL.'?'.http_build_query($params));
  die();
}
[/php]

        <p>It's important to generate a "state" parameter to use to protect the client from CSRF attacks. This is a random string that the client generates and stores in the session. Our app will verify that that state parameter in the redirect from Google matches the one that was created at the start of the flow.</p>

        <p>We build up an authorization URL and then send the user there. The URL contains our public client ID, the redirect URL which we previously registered with Google, the scope we're requesting, and the "state" parameter.</p>

[caption id="attachment_889" align="alignnone" width="879"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/google_oauth_prompt-879x1024.png" alt="" width="879" height="1024" class="size-large wp-image-889" /> Google's Authorization Request[/caption]

        <p>If the user is already logged in to Google, they'll see an account chooser screen as shown above asking them to choose an existing account or use a different account. Notice that this screen does not look like a typical OAuth screen, because the user isn't granting any permissions to the application, it's just trying to identify them.</p>

        <p>When the user selects an account, they will be redirected back to our page with <code>code</code> and <code>state</code> parameters in the request. The next step is to exchange the authorization code for an access token at the Google API.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>888</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:41:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:41:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:06:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:06:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"akg2510","cols":[{"element_id":"lbfo510","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Getting an ID Token]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/getting-an-id-token/</link>
		<pubDate>Thu, 12 Jul 2018 22:48:07 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=891</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>When the user is redirected back to our app, there will be a <code>code</code> and <code>state</code> parameter in the query string. The <code>state</code> parameter will be the same as the one we set in the initial authorization request, and is meant for our app to check that it matches before continuing. This helps protect our app from CSRF attacks.</p>

[php]
// When Google redirects the user back here, there will
// be a &quot;code&quot; and &quot;state&quot; parameter in the query string
if(isset($_GET['code'])) {
  // Verify the state matches our stored state
  if(!isset($_GET['state']) || $_SESSION['state'] != $_GET['state']) {
    header('Location: ' . $baseURL . '?error=invalid_state');
    die();
  }

  // Exchange the authorization code for an access token
  $ch = curl_init($tokenURL);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([
    'grant_type' =&gt; 'authorization_code',
    'client_id' =&gt; $googleClientID,
    'client_secret' =&gt; $googleClientSecret,
    'redirect_uri' =&gt; $baseURL,
    'code' =&gt; $_GET['code']
  ]));
  $response = json_decode(curl_exec($ch), true);

  // ... fill in from the code in the next section
}
[/php]

        <p>This code first checks that the "state" returned from Google matches the state we stored in our session.</p>

        <p>We build up a POST request to Google's token endpoint containing our app's client ID and secret, as well as the authorization code that Google sent back to us in the query string.</p>

        <p>Google will verify our request, and then respond with both an access token as well as an ID token. The response will look like the below.</p>

[text]{
  &quot;access_token&quot;: &quot;ya29.Glins-oLtuljNVfthQU2bpJVJPTu&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;expires_in&quot;: 3600,
  &quot;id_token&quot;: &quot;eyJhbGciOiJSUzI1NiIsImtpZCI6ImFmZmM2MjkwN
  2E0NDYxODJhZGMxZmE0ZTgxZmRiYTYzMTBkY2U2M2YifQ.eyJhenAi
  OiIyNzIxOTYwNjkxNzMtZm81ZWI0MXQzbmR1cTZ1ZXRkc2pkdWdzZX
  V0ZnBtc3QuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQi
  OiIyNzIxOTYwNjkxNzMtZm81ZWI0MXQzbmR1cTZ1ZXRkc2pkdWdzZX
  V0ZnBtc3QuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIi
  OiIxMTc4NDc5MTI4NzU5MTM5MDU0OTMiLCJlbWFpbCI6ImFhcm9uLn
  BhcmVja2lAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUs
  ImF0X2hhc2giOiJpRVljNDBUR0luUkhoVEJidWRncEpRIiwiZXhwIj
  oxNTI0NTk5MDU2LCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2ds
  ZS5jb20iLCJpYXQiOjE1MjQ1OTU0NTZ9.ho2czp_1JWsglJ9jN8gCg
  WfxDi2gY4X5-QcT56RUGkgh5BJaaWdlrRhhN_eNuJyN3HRPhvVA_KJ
  Vy1tMltTVd2OQ6VkxgBNfBsThG_zLPZriw7a1lANblarwxLZID4fXD
  YG-O8U-gw4xb-NIsOzx6xsxRBdfKKniavuEg56Sd3eKYyqrMA0DWnI
  agqLiKE6kpZkaGImIpLcIxJPF0-yeJTMt_p1NoJF7uguHHLYr6752h
  qppnBpMjFL2YMDVeg3jl1y5DeSKNPh6cZ8H2p4Xb2UIrJguGbQHVIJ
  vtm_AspRjrmaTUQKrzXDRCfDROSUU-h7XKIWRrEd2-W9UkV5oCg&quot;
}[/text]

        <p>The access token should be treated as an opaque string. It has no significant meaning to your app other than being able to use it to make API requests.</p>

        <p>The ID token has a specific structure that your app can parse to find out the user data of who signed in. The ID token is a JWT, explained in more detail in <a href="/oauth2-servers/openid-connect/" class="chapter">OpenID Connect</a>. You can paste the JWT from Google into a site like <a href="https://example-app.com/base64/" class="url">example-app.com/base64</a> to quickly show you the contents, or you can base64 decode the middle part between the two <code>.</code>'s to see the user data which we'll do next.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>891</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:48:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:48:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:07:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:07:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-an-id-token]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Getting an ID Token]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"pppk175","cols":[{"element_id":"j7tl175","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[OAuth for Native Apps]]></title>
		<link>https://www.oauth.com/?p=606</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[aaron@parecki.com]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?p=606</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>606</wp:post_id>
		<wp:post_date><![CDATA[2017-08-09 16:07:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-08-09 16:07:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-08-09 23:07:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Verifying the User Info]]></title>
		<link>https://www.oauth.com/oauth2-servers/signing-in-with-google/verifying-the-user-info/</link>
		<pubDate>Thu, 12 Jul 2018 22:50:38 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=893</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Normally, it's critical that you validate an ID token before trusting any of the information inside it. This is because in other OpenID Connect flows your app will get an ID token over an untrusted channel such as a browser redirect.</p>

        <p>In this case, you got the ID token from an HTTPS connection to Google using the client secret to authenticate the request, so you can be confident that the ID token you obtained did in fact come from the service and not an attacker. With this in mind, and I know it seems unsafe at first, it's okay to decode the ID token without validating it. Even Google says so. <a href="https://developers.google.com/identity/protocols/OpenIDConnect#obtainuserinfo" class="url">https://developers.google.com/identity/protocols/OpenIDConnect#obtainuserinfo</a>.</p>

        <p>Take a look at the JWT above. It's made up of three parts, each separated by a period. We can split the string on the dots, and take the middle piece. The middle piece is a base64-encoded JSON string containing the data about the user. Below is an example of the data in the JWT.</p>

[text]{
  &quot;azp&quot;: &quot;272196069173.apps.googleusercontent.com&quot;,
  &quot;aud&quot;: &quot;272196069173.apps.googleusercontent.com&quot;,
  &quot;sub&quot;: &quot;110248495921238986420&quot;,
  &quot;hd&quot;: &quot;okta.com&quot;,
  &quot;email&quot;: &quot;aaron.parecki@okta.com&quot;,
  &quot;email_verified&quot;: true,
  &quot;at_hash&quot;: &quot;0bzSP5g7IfV3HXoLwYS3Lg&quot;,
  &quot;exp&quot;: 1524601669,
  &quot;iss&quot;: &quot;https://accounts.google.com&quot;,
  &quot;iat&quot;: 1524598069
}[/text]

        <p>All we really care about for this demo are the two properties <code>sub</code> and <code>email</code>. The <code>sub</code> (subject) property contains the unique user identifier of the user who signed in. We'll extract that and store it in the session, which will indicate to our app that the user is signed in.</p>

        <p>We'll also store the ID token and access token in the session so we can use them later, to show an alternative way of getting the user info.</p>

[php]
  // ... continuing from the previous code sample, insert this

  // Split the JWT string into three parts
  $jwt = explode('.', $data['id_token']);

  // Extract the middle part, base64 decode, then json_decode it
  $userinfo = json_decode(base64_decode($jwt[1]), true);

  $_SESSION['user_id'] = $userinfo['sub'];
  $_SESSION['email'] = $userinfo['email'];

  // While we're at it, let's store the access token and id token
  // so we can use them later
  $_SESSION['access_token'] = $data['access_token'];
  $_SESSION['id_token'] = $data['id_token'];

  header('Location: ' . $baseURL);
  die();
}
[/php]

        <p>Now you'll be redirected back to the app's home page, where we'll show you the user ID and email using the code we created at the beginning.</p>

[php]
    echo '&lt;p&gt;User ID: '.$_SESSION['user_id'].'&lt;/p&gt;';
    echo '&lt;p&gt;Email: '.$_SESSION['email'].'&lt;/p&gt;';
[/php]

        <h3>Using the ID Token to Retrieve User Info</h3>

        <p>Google provides an additional API endpoint, called the tokeninfo endpoint, which you can use to look up the ID token details instead of parsing it yourself. This is not recommended for production applications, as it requires an additional HTTP round trip, but can be useful for testing and troubleshooting.</p>

        <p>Google's tokeninfo endpoint is at <code>https://www.googleapis.com/oauth2/v3/tokeninfo</code>, as found in their OpenID Connect discovery document at <code>https://accounts.google.com/.well-known/openid-configuration</code>. To look up the info for the ID token we received, make a GET request to the tokeninfo endpoint with the ID token in the query string.</p>

        <pre>https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=eyJ...</pre>

        <p>The response will be a JSON object with a similar list of properties that were included in the JWT itself.</p>

[text]{
 &quot;azp&quot;: &quot;272196069173.apps.googleusercontent.com&quot;,
 &quot;aud&quot;: &quot;272196069173.apps.googleusercontent.com&quot;,
 &quot;sub&quot;: &quot;110248495921238986420&quot;,
 &quot;hd&quot;: &quot;okta.com&quot;,
 &quot;email&quot;: &quot;aaron.parecki@okta.com&quot;,
 &quot;email_verified&quot;: &quot;true&quot;,
 &quot;at_hash&quot;: &quot;NUuq_yggZYi_2-13hJSOXw&quot;,
 &quot;exp&quot;: &quot;1524681857&quot;,
 &quot;iss&quot;: &quot;https://accounts.google.com&quot;,
 &quot;iat&quot;: &quot;1524678257&quot;,
 &quot;alg&quot;: &quot;RS256&quot;,
 &quot;kid&quot;: &quot;affc62907a446182adc1fa4e81fdba6310dce63f&quot;
}[/text]

        <h3>Using the Access Token to Retrieve User Info</h3>

        <p>As mentioned before, many OAuth 2.0 services also provide an endpoint to retrieve the user info of the user who logged in. This is part of the OpenID Connect standard, and the endpoint will be part of the service's OpenID Connect Discovery Document.</p>

        <p>Google's userinfo endpoint is <code>https://www.googleapis.com/oauth2/v3/userinfo</code>. In this case, you use the access token rather than the ID token to look up the user info. Make a GET request to that endpoint and pass the access token in the HTTP <code>Authorization</code> header like you normally would when making an OAuth 2.0 API request.</p>

        [text]GET /oauth2/v3/userinfo
Host: www.googleapis.com
Authorization: Bearer ya29.Gl-oBRPLiI9IrSRA70...[/text]

        <p>The response will be a JSON object with several properties about the user. The response will always include the <code>sub</code> key, which is the unique identifier for the user. Google also returns the user's profile information such as name (first and last), profile photo URL, gender, locale, profile URL, and email. The server can also add its own claims, such as Google's <code>hd</code> showing the "hosted domain" of the account when using a G Suite account.</p>

[text]{
 &quot;sub&quot;: &quot;110248495921238986420&quot;,
 &quot;name&quot;: &quot;Aaron Parecki&quot;,
 &quot;given_name&quot;: &quot;Aaron&quot;,
 &quot;family_name&quot;: &quot;Parecki&quot;,
 &quot;picture&quot;: &quot;https://lh4.googleusercontent.com/-kw-iMgD
   _j34/AAAAAAAAAAI/AAAAAAAAAAc/P1YY91tzesU/photo.jpg&quot;,
 &quot;email&quot;: &quot;aaron.parecki@okta.com&quot;,
 &quot;email_verified&quot;: true,
 &quot;locale&quot;: &quot;en&quot;,
 &quot;hd&quot;: &quot;okta.com&quot;
}[/text]

        <h3>Download the Sample Code</h3>

        <p>You can download the complete sample code used in this example from GitHub at <a href="https://github.com/aaronpk/sample-oauth2-client" class="url">https://github.com/aaronpk/sample-oauth2-client</a>.</p>

        <p>You've seen three different ways to get the user's profile info after the user signs in. So which one should you use and when?</p>

        <p>For performance-sensitive applications where you might be reading ID tokens on every request or using them to maintain a session, you should definitely validate the ID token locally rather than making a network request. <a href="https://developers.google.com/identity/protocols/OpenIDConnect#validatinganidtoken" class="external">Google's API docs</a> provide a good guide on the details of validating ID tokens offline.</p>

        <p>If all you're doing is trying to find the user's name and email after they sign in, then extracting the data from the ID token and storing it in your application session is the easiest and most straightforward option.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:50:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:50:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:14:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:14:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[verifying-the-user-info]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[3.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Verifying the User Info]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"vxfo607","cols":[{"element_id":"oioq608","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Accessing Data in an OAuth Server]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/</link>
		<pubDate>Thu, 12 Jul 2018 22:53:10 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=896</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>In this chapter, we'll walk through how to access your data at an existing OAuth 2.0 server. For this example, we'll use the GitHub API, and build a simple application that will list all repositories the logged-in user has created.</p>

<ul>
  <li><a href="/oauth2-servers/accessing-data/create-an-application/">Create an Application</a></li>
  <li><a href="/oauth2-servers/accessing-data/setting-up-the-environment/">Setting up the Environment</a></li>
  <li><a href="/oauth2-servers/accessing-data/authorization-request/">Authorization Request</a></li>
  <li><a href="/oauth2-servers/accessing-data/obtaining-an-access-token/">Obtaining an Access Token</a></li>
  <li><a href="/oauth2-servers/accessing-data/making-api-requests/">Making API Requests</a></li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>896</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:53:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:53:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 15:53:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 22:53:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[accessing-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Accessing Data in an OAuth Server]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Create an Application]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/create-an-application/</link>
		<pubDate>Thu, 12 Jul 2018 22:55:04 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=898</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Before we can begin, we'll need to create an application on GitHub in order to get a client ID and client secret.</p>

        <p>On GitHub.com, from the "Settings" page, click on the "Developer Settings" link in the sidebar. You will end up on <nobr><a href="https://github.com/settings/developers" class="url">https://github.com/settings/developers</a></nobr>. From there, click "New OAuth App" and you will be presented with a short form, as shown below.</p>

        <p>Fill out the required information, including the callback URL. If you are developing an application locally, you'll have to use a local address for the callback URL. Since GitHub allows only one registered callback URL per application, it is useful to create two applications, one for development, and a separate one for production.</p>

[caption id="attachment_899" align="alignnone" width="1024"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/github_create_new_application-1024x717.png" alt="" width="1024" height="717" class="size-large wp-image-899" /> Register a new OAuth application on GitHub[/caption]

        <p>After completing this form, you'll be taken to a page where you can see the client ID and secret issued to your application, shown below.</p>

        <p>The client ID is considered public information, and is used to build authorization URLs, or can be included in the JavaScript source code of a web page. The client secret <strong>must</strong> be kept confidential. Don't commit this to your git repository or include it in any JavaScript files!</p>

[caption id="attachment_900" align="alignnone" width="647"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/github_application_created-647x1024.png" alt="" width="647" height="1024" class="size-large wp-image-900" /> GitHub application has been created[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>898</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:55:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:55:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-10 22:02:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-11 05:02:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[create-an-application]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>896</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Create an Application]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Setting up the Environment]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/setting-up-the-environment/</link>
		<pubDate>Thu, 12 Jul 2018 22:58:08 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=903</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>This example code is written in PHP with no external packages required and no framework needed. Hopefully this makes it easy to translate to other languages if desired. To follow along with this example code, you can place it all in a single PHP file.</p>

        <p>Create a new folder and create an empty file in that folder called <code>index.php</code>. From the command line, run <code>php -S localhost:8000</code> from inside that folder, and you'll be able to visit <a href="http://localhost:8000/" class="url">http://localhost:8000</a> in your browser to run your code. All the code in the examples below should be added to this <code>index.php</code> file.</p>

        <p>To make things easier for us, let's define a method, <code>apiRequest()</code> which is a simple wrapper around cURL. This function will include the <code>Accept</code> and <code>User-Agent</code> headers that GitHub's API requires, and automatically decode the JSON response. If we have an access token in the session, it will send the proper OAuth header with the access token as well, in order to make authenticated requests.</p>

[php]
function apiRequest($url, $post=FALSE, $headers=array()) {
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

  if($post)
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));

  $headers = [
    'Accept: application/vnd.github.v3+json, application/json',
    'User-Agent: https://example-app.com/'
  ];

  if(isset($_SESSION['access_token']))
    $headers[] = 'Authorization: Bearer '.$_SESSION['access_token'];

  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $response = curl_exec($ch);
  return json_decode($response, true);
}
[/php]

        <p>Now let's set up a few variables we'll need for the OAuth process.</p>

[php]
// Fill these out with the values from GitHub
$githubClientID = '';
$githubClientSecret = '';

// This is the URL we'll send the user to first
// to get their authorization
$authorizeURL = 'https://github.com/login/oauth/authorize';

// This is the endpoint we'll request an access token from
$tokenURL = 'https://github.com/login/oauth/access_token';

// This is the GitHub base URL for API requests
$apiURLBase = 'https://api.github.com/';

// The URL for this script, used as the redirect URL
$baseURL = 'https://' . $_SERVER['SERVER_NAME']
    . $_SERVER['PHP_SELF'];

// Start a session so we have a place to
// store things between redirects
session_start();
[/php]

        <p>First, let's set up the "logged-in" and "logged-out" views. This will show a simple message indicating whether the user is logged in or logged out.</p>


[php]
// If there is an access token in the session
// the user is already logged in
if(!isset($_GET['action'])) {
  if(!empty($_SESSION['access_token'])) {
    echo '&lt;h3&gt;Logged In&lt;/h3&gt;';
    echo '&lt;p&gt;&lt;a href=&quot;?action=repos&quot;&gt;View Repos&lt;/a&gt;&lt;/p&gt;';
    echo '&lt;p&gt;&lt;a href=&quot;?action=logout&quot;&gt;Log Out&lt;/a&gt;&lt;/p&gt;';
  } else {
    echo '&lt;h3&gt;Not logged in&lt;/h3&gt;';
    echo '&lt;p&gt;&lt;a href=&quot;?action=login&quot;&gt;Log In&lt;/a&gt;&lt;/p&gt;';
  }
  die();
}
[/php]

        <p>The logged-out view contains a link to our login URL which starts the OAuth process.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>903</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:58:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:58:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-10 22:03:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-11 05:03:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[setting-up-the-environment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>896</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Setting up the Environment]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Authorization Request]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/authorization-request/</link>
		<pubDate>Thu, 12 Jul 2018 22:59:33 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=907</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Now that we have the necessary variables set up, let's start the OAuth process.</p>

        <p>The first thing we'll have people do is visit this page with <code>?action=login</code> in the query string to kick off the process.</p>

        <p>Note the scopes we are asking for in this request include <code>user</code> and <code>public_repo</code>. This means the app will be able to read the user profile information as well as have access to public repos.</p>
[php]
// Start the login process by sending the user
// to GitHub's authorization page
if(isset($_GET['action']) &amp;&amp; $_GET['action'] == 'login') {
  unset($_SESSION['access_token']);

  // Generate a random hash and store in the session
  $_SESSION['state'] = bin2hex(random_bytes(16));

  $params = array(
    'response_type' =&gt; 'code',
    'client_id' =&gt; $githubClientID,
    'redirect_uri' =&gt; $baseURL,
    'scope' =&gt; 'user public_repo',
    'state' =&gt; $_SESSION['state']
  );

  // Redirect the user to GitHub's authorization page
  header('Location: '.$authorizeURL.'?'.http_build_query($params));
  die();
}
[/php]

        <p>It's important to generate a "state" parameter to use to protect the client from CSRF attacks. This is a random string that the client generates and stores in the session. GitHub will redirect the user back here with the state in the query string, so we can verify it matches the state stored in the session before exchanging the authorization code for an access token.</p>

        <p>We build up the authorization URL and then send the user there. The URL contains our public client ID, the redirect URL which we previously registered with GitHub, the scope we're requesting, and the "state" parameter.</p>

[caption id="attachment_908" align="alignnone" width="688"]<img src="https://www.oauth.com/wp-content/uploads/2018/07/github_oauth_prompt-688x1024.png" alt="" width="688" height="1024" class="size-large wp-image-908" /> GitHub's Authorization Request[/caption]

        <p>At this point, the user will see GitHub's OAuth authorization prompt, illustrated above.</p>

        <p>When the user approves the request, they will be redirected back to our page with <code>code</code> and <code>state</code> parameters in the request. The next step is to exchange the authorization code for an access token.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>907</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 15:59:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 22:59:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:01:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:01:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authorization-request]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>896</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authorization Request]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"l704129","cols":[{"element_id":"c5tc129","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Obtaining an Access Token]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/obtaining-an-access-token/</link>
		<pubDate>Thu, 12 Jul 2018 23:00:46 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=910</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>When the user is redirected back to our app, there will be a <code>code</code> and <code>state</code> parameter in the query string. The <code>state</code> parameter will be the same as the one we set in the initial authorization request, and is meant for our app to check that it matches before continuing. This helps our app avoid being tricked into sending an attacker's authorization code to GitHub, as well as prevents CSRF attacks.</p>

[php]
// When GitHub redirects the user back here,
// there will be a &quot;code&quot; and &quot;state&quot; parameter in the query string
if(isset($_GET['code'])) {
  // Verify the state matches our stored state
  if(!isset($_GET['state'])
    || $_SESSION['state'] != $_GET['state']) {

    header('Location: ' . $baseURL . '?error=invalid_state');
    die();
  }

  // Exchange the auth code for an access token
  $token = apiRequest($tokenURL, array(
    'grant_type' =&gt; 'authorization_code',
    'client_id' =&gt; $githubClientID,
    'client_secret' =&gt; $githubClientSecret,
    'redirect_uri' =&gt; $baseURL,
    'code' =&gt; $_GET['code']
  ));
  $_SESSION['access_token'] = $token['access_token'];

  header('Location: ' . $baseURL);
  die();
}
[/php]

        <p>Here we are sending a request to GitHub's token endpoint to exchange the authorization code for an access token. The request contains our public client ID as well as the private client secret. We also send the same redirect URL as before along with the authorization code.</p>

        <p>If everything checks out, GitHub generates an access token and returns it in the response. We store the access token in the session and redirect to the home page, and the user is logged in.</p>

        <p>The response from GitHub will look like the below.</p>

[text]{
  &quot;access_token&quot;: &quot;e2f8c8e136c73b1e909bb1021b3b4c29&quot;,
  &quot;token_type&quot;: &quot;Bearer&quot;,
  &quot;scope&quot;: &quot;public_repo,user&quot;
}[/text]

        <p>Our code has extracted the access token and saved it in the session. The next time you visit the page, it recognizes that there's already an access token and shows the logged-in view we created earlier.</p>

        <p>Note: We have not included any error handling code in this example for simplicity's sake. In reality, you'd check for errors returned from GitHub and display an appropriate message to the user.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 16:00:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 23:00:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 12:03:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 19:03:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[obtaining-an-access-token]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>896</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[2.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Obtaining an Access Token]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"b2qw576","cols":[{"element_id":"p8pd577","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Making API Requests]]></title>
		<link>https://www.oauth.com/oauth2-servers/accessing-data/making-api-requests/</link>
		<pubDate>Thu, 12 Jul 2018 23:02:15 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=912</guid>
		<description></description>
		<content:encoded><![CDATA[        <p>Now that our app has a GitHub access token for the user, we can use it to make API requests. Let's add a new section to our application that will run when the user clicks the "View Repos" link we created earlier.</p>

        <p>Remember the <code>apiRequest</code> function we set up earlier? That's where the access token is included in the HTTP request. The request this code will make will include the access token in the HTTP <code>Authorization</code> header, as illustrated in the example below.</p>

[text]GET /user/repos?sort=created&amp;direction=desc HTTP/1.1
Host: api.github.com
Accept: application/vnd.github.v3+json
User-Agent: https://example-app.com/
Authorization: Bearer e2f8c8e136c73b1e909bb1021b3b4c29[/text]

        <p>The code below will take the access token and use it in a request to list the user's repositories. It will then output a list of repositories and link to each one.</p>

[php]
if(isset($_GET['action']) &amp;&amp; $_GET['action'] == 'repos') {
  // Find all repos created by the authenticated user
  $repos = apiRequest($apiURLBase.'user/repos?'.http_build_query([
    'sort' =&gt; 'created', 'direction' =&gt; 'desc'
  ]));

  echo '&lt;ul&gt;';
  foreach($repos as $repo)
    echo '&lt;li&gt;&lt;a href=&quot;' . $repo['html_url'] . '&quot;&gt;'
      . $repo['name'] . '&lt;/a&gt;&lt;/li&gt;';
  echo '&lt;/ul&gt;';
}
[/php]

        <p>That's it! You can now use the access token to make API requests to any of the API endpoints on GitHub! You can see the full documentation of GitHub's API at <a href="https://developer.github.com/v3/" class="url">https://developer.github.com/v3/</a>.</p>

        <h4>Download the Sample Code</h4>

        <p>You can download the complete sample code used in this example from GitHub at <a href="https://github.com/aaronpk/sample-oauth2-client" class="url">https://github.com/aaronpk/sample-oauth2-client</a>.</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>912</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 16:02:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 23:02:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-07-12 16:02:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-07-12 23:02:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[making-api-requests]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>896</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[4.5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Making API Requests]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Getting Ready]]></title>
		<link>https://www.oauth.com/oauth2-servers/getting-ready/</link>
		<pubDate>Thu, 12 Jul 2018 23:11:06 +0000</pubDate>
		<dc:creator><![CDATA[aaron.parecki]]></dc:creator>
		<guid isPermaLink="false">https://www.oauth.com/?page_id=914</guid>
		<description></description>
		<content:encoded><![CDATA[    <p>In Part I of this book, we'll walk through the things you need to know when you're building an app that talks to an existing OAuth 2.0 API. Whether you're building a web app or a mobile app, there are a few things you'll need to keep in mind as we get started.</p>

    <p>Every OAuth 2.0 service will require that you first register a new application, which also typically requires that you first sign up as a developer with the service.</p>

<h2>Creating an Application</h2>

        <p>The registration process typically involves creating a developer account on the service's website, then entering basic information about the application such as the name, website, logo, etc. After registering the application, you'll be given a <code>client_id</code> (and a <code>client_secret</code> in some cases) that you'll use when your app interacts with the service.</p>

        <p>One of the most important things when creating the application is to register one or more redirect URLs the application will use. The redirect URLs are where the OAuth 2.0 service will return the user to after they have authorized the application. It is critical that these are registered, otherwise it is easy to create malicious applications that can steal user data. This is covered in more detail later in this book.</p>

<h2>Redirect URLs and State</h2>
       <p>OAuth 2.0 APIs will only redirect users to a URL that was previously registered with the service, in order to prevent redirection attacks where an authorization code or access token can be intercepted by an attacker. Some services may allow you to register multiple redirect URLs, which can help when your web app may be running on serveral different subdomains.</p>

       <p>In order to be secure, the redirect URL must be an https endpoint to prevent the authorization code from being intercepted during the authorization process. If your redirect URL is not https, then an attacker may be able to intercept the authorization code and use it to hijack a session. The one exception to this is for apps running on the loopback interface, such as a native desktop application, or when doing local development. However even though the spec allows this exception, some OAuth services you encounter may require https redirect URLs anyway.</p>

       <p>OAuth services should be looking for an exact match of the redirect URL. This means a redirect URL of <code>https://example.com/auth</code> would not match <code>https://example.com/auth?destination=account</code>. It is best practice to avoid using query string parameters in your redirect URL, and have it include just a path.</p>

       <p>Some applications may have multiple places they want to start the OAuth process from, such as a login link on a home page as well as a login link when viewing some public item. For these applications, it may be tempting to try to register multiple redirect URLs, or you may think you need to be able to vary the redirect URL per request. Instead, OAuth 2.0 provides a mechanism for this, the "state" parameter.</p>

       <p>The "state" parameter can be used to encode application state, but it must also include some amount of random data if you're not also including <a href="/oauth2-servers/pkce/" class="section">PKCE</a> parameters in the request. The state parameter is a string that is opaque to the OAuth 2.0 service, so whatever state value you pass in during the initial authorization request will be returned after the user authorizes the application. You could for example encode a redirect URL in something like a JWT, and parse this after the user is redirected back to your application so you can take the user back to the appropriate location after they sign in.</p>

       <p>Note that unless you are using a signed or encrypted method like JWT to encode the state parameter, you should treat it as untrusted/unvalidated data when it arrives at your redirect URL, since it's trivial for anyone to modify that parameter on the redirect back to your app.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>914</wp:post_id>
		<wp:post_date><![CDATA[2018-07-12 16:11:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-12 23:11:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-12-16 11:56:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-12-16 18:56:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-ready]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_enable_valprop]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab9bc167970]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_number]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57aa71138b388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Getting Ready]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_page_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[field_57ab6dee5a734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_themify_builder_settings_json]]></wp:meta_key>
		<wp:meta_value><![CDATA[[{"element_id":"86lv419","cols":[{"element_id":"ko70419","grid_class":"col-full"}]}]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[themify_used_global_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mobile_menu_styles]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_estimated-reading-time-minutes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	